/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={448:(e,t,n)=>{var r=n(294),a=n(840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function g(e,t,n,r,a,l,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),j=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),T=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),C=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),I=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function _(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var F,M=Object.assign;function D(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var z=!1;function B(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),l=r.stack.split("\n"),i=a.length-1,o=l.length-1;1<=i&&0<=o&&a[i]!==l[o];)o--;for(;1<=i&&0<=o;i--,o--)if(a[i]!==l[o]){if(1!==i||1!==o)do{if(i--,0>--o||a[i]!==l[o]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function U(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return e=B(e.type,!1);case 11:return e=B(e.type.render,!1);case 1:return e=B(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case j:return"Portal";case T:return"Profiler";case w:return"StrictMode";case N:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function q(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function J(e,t){q(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(te(n)){if(1<n.length)throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function le(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var je=null,Ee=null,we=null;function Te(e){if(e=pa(e)){if("function"!=typeof je)throw Error(l(280));var t=e.stateNode;t&&(t=ga(t),je(e.stateNode,e.type,t))}}function Se(e){Ee?we?we.push(e):we=[e]:Ee=e}function Ce(){if(Ee){var e=Ee,t=we;if(we=Ee=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Oe(e,t){return e(t)}function Ne(){}var Ie=!1;function Re(e,t,n){if(Ie)return e(t,n);Ie=!0;try{return Oe(e,t,n)}finally{Ie=!1,(null!==Ee||null!==we)&&(Ne(),Ce())}}function Pe(e,t){var n=e.stateNode;if(null===n)return null;var r=ga(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Ae=!1;if(u)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ue){Ae=!1}function _e(e,t,n,r,a,l,i,o,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Fe=!1,Me=null,De=!1,ze=null,Be={onError:function(e){Fe=!0,Me=e}};function Ue(e,t,n,r,a,l,i,o,s){Fe=!1,Me=null,_e.apply(Be,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function We(e){if(He(e)!==e)throw Error(l(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,s=a.child;s;){if(s===n){o=!0,n=a,r=i;break}if(s===r){o=!0,r=a,n=i;break}s=s.sibling}if(!o){for(s=i.child;s;){if(s===n){o=!0,n=i,r=a;break}if(s===r){o=!0,r=i,n=a;break}s=s.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ke=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Xe=a.unstable_requestPaint,qe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,lt=null;var it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/st|0)|0},ot=Math.log,st=Math.LN2;var ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~a;0!==o?r=dt(o):0!==(l&=i)&&(r=dt(l))}else 0!==(i=n&~a)?r=dt(i):0!==l&&(r=dt(l));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(l=t&-t)||16===a&&0!=(4194240&l)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:default:return-1}}function ht(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function mt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,kt,jt,Et,wt,Tt=!1,St=[],Ct=null,Ot=null,Nt=null,It=new Map,Rt=new Map,Pt=[],At="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function _t(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&(null!==(t=pa(t))&&kt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ft(e){var t=fa(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void wt(e.priority,(function(){jt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=pa(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function Dt(e,t,n){Mt(e)&&n.delete(t)}function zt(){Tt=!1,null!==Ct&&Mt(Ct)&&(Ct=null),null!==Ot&&Mt(Ot)&&(Ot=null),null!==Nt&&Mt(Nt)&&(Nt=null),It.forEach(Dt),Rt.forEach(Dt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Tt||(Tt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Ut(e){function t(t){return Bt(t,e)}if(0<St.length){Bt(St[0],e);for(var n=1;n<St.length;n++){var r=St[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Bt(Ct,e),null!==Ot&&Bt(Ot,e),null!==Nt&&Bt(Nt,e),It.forEach(t),Rt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Pt.shift()}var Ht=x.ReactCurrentBatchConfig;function Vt(e,t,n,r){var a=bt,l=Ht.transition;Ht.transition=null;try{bt=1,$t(e,t,n,r)}finally{bt=a,Ht.transition=l}}function Wt(e,t,n,r){var a=bt,l=Ht.transition;Ht.transition=null;try{bt=4,$t(e,t,n,r)}finally{bt=a,Ht.transition=l}}function $t(e,t,n,r){var a=Kt(e,t,n,r);if(null===a)zr(e,t,r,Gt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Ct=_t(Ct,e,t,n,r,a),!0;case"dragenter":return Ot=_t(Ot,e,t,n,r,a),!0;case"mouseover":return Nt=_t(Nt,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return It.set(l,_t(It.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,Rt.set(l,_t(Rt.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<At.indexOf(e)){for(;null!==a;){var l=pa(a);if(null!==l&&xt(l),null===(l=Kt(e,t,n,r))&&zr(e,t,r,Gt,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else zr(e,t,r,null,n)}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=fa(e=ke(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,qt=null;function Jt(){if(qt)return qt;var e,t,n=Xt,r=n.length,a="value"in Yt?Yt.value:Yt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[l-t];t++);return qt=a.slice(e,1<t?1-t:void 0)}function Zt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function en(){return!0}function tn(){return!1}function nn(e){function t(t,n,r,a,l){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?en:tn,this.isPropagationStopped=tn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=en)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=en)},persist:function(){},isPersistent:en}),t}var rn,an,ln,on={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=nn(on),cn=M({},on,{view:0,detail:0}),un=nn(cn),dn=M({},cn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(rn=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=rn=0,ln=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:an}}),fn=nn(dn),pn=nn(M({},dn,{dataTransfer:0})),hn=nn(M({},cn,{relatedTarget:0})),gn=nn(M({},on,{animationName:0,elapsedTime:0,pseudoElement:0})),mn=nn(M({},on,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),vn=nn(M({},on,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function jn(){return kn}var En=nn(M({},cn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?yn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jn,charCode:function(e){return"keypress"===e.type?Zt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),wn=nn(M({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=nn(M({},cn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jn})),Sn=nn(M({},on,{propertyName:0,elapsedTime:0,pseudoElement:0})),Cn=nn(M({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),On=[9,13,27,32],Nn=u&&"CompositionEvent"in window,In=null;u&&"documentMode"in document&&(In=document.documentMode);var Rn=u&&"TextEvent"in window&&!In,Pn=u&&(!Nn||In&&8<In&&11>=In),An=String.fromCharCode(32),Ln=!1;function _n(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Mn=!1;var Dn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Dn[e.type]:"textarea"===t}function Bn(e,t,n,r){Se(r),0<(t=Ur(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Un=null,Hn=null;function Vn(e){Ar(e,0)}function Wn(e){if(K(ha(e)))return e}function $n(e,t){if("change"===e)return t}var Gn=!1;if(u){var Kn;if(u){var Qn="oninput"in document;if(!Qn){var Yn=document.createElement("div");Yn.setAttribute("oninput","return;"),Qn="function"==typeof Yn.oninput}Kn=Qn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function Xn(){Un&&(Un.detachEvent("onpropertychange",qn),Hn=Un=null)}function qn(e){if("value"===e.propertyName&&Wn(Hn)){var t=[];Bn(t,Hn,e,ke(e)),Re(Vn,t)}}function Jn(e,t,n){"focusin"===e?(Xn(),Hn=n,(Un=t).attachEvent("onpropertychange",qn)):"focusout"===e&&Xn()}function Zn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wn(Hn)}function er(e,t){if("click"===e)return Wn(t)}function tr(e,t){if("input"===e||"change"===e)return Wn(t)}var nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function rr(e,t){if(nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!nr(e[a],t[a]))return!1}return!0}function ar(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function lr(e,t){var n,r=ar(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ar(r)}}function ir(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?ir(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function or(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function cr(e){var t=or(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&ir(n.ownerDocument.documentElement,n)){if(null!==r&&sr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!e.extend&&l>r&&(a=r,r=l,l=a),a=lr(n,l);var i=lr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),l>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ur=u&&"documentMode"in document&&11>=document.documentMode,dr=null,fr=null,pr=null,hr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;hr||null==dr||dr!==Q(r)||("selectionStart"in(r=dr)&&sr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},pr&&rr(pr,r)||(pr=r,0<(r=Ur(fr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=dr)))}function mr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var vr={animationend:mr("Animation","AnimationEnd"),animationiteration:mr("Animation","AnimationIteration"),animationstart:mr("Animation","AnimationStart"),transitionend:mr("Transition","TransitionEnd")},br={},yr={};function xr(e){if(br[e])return br[e];if(!vr[e])return e;var t,n=vr[e];for(t in n)if(n.hasOwnProperty(t)&&t in yr)return br[e]=n[t];return e}u&&(yr=document.createElement("div").style,"AnimationEvent"in window||(delete vr.animationend.animation,delete vr.animationiteration.animation,delete vr.animationstart.animation),"TransitionEvent"in window||delete vr.transitionend.transition);var kr=xr("animationend"),jr=xr("animationiteration"),Er=xr("animationstart"),wr=xr("transitionend"),Tr=new Map,Sr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Cr(e,t){Tr.set(e,t),s(t,[e])}for(var Or=0;Or<Sr.length;Or++){var Nr=Sr[Or];Cr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Cr(kr,"onAnimationEnd"),Cr(jr,"onAnimationIteration"),Cr(Er,"onAnimationStart"),Cr("dblclick","onDoubleClick"),Cr("focusin","onFocus"),Cr("focusout","onBlur"),Cr(wr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,o,s,c){if(Ue.apply(this,arguments),Fe){if(!Fe)throw Error(l(198));var u=Me;Fe=!1,Me=null,De||(De=!0,ze=u)}}(r,t,void 0,e),e.currentTarget=null}function Ar(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var i=r.length-1;0<=i;i--){var o=r[i],s=o.instance,c=o.currentTarget;if(o=o.listener,s!==l&&a.isPropagationStopped())break e;Pr(a,o,c),l=s}else for(i=0;i<r.length;i++){if(s=(o=r[i]).instance,c=o.currentTarget,o=o.listener,s!==l&&a.isPropagationStopped())break e;Pr(a,o,c),l=s}}}if(De)throw e=ze,De=!1,ze=null,e}function Lr(e,t){var n=t[ca];void 0===n&&(n=t[ca]=new Set);var r=e+"__bubble";n.has(r)||(Dr(t,e,2,!1),n.add(r))}function _r(e,t,n){var r=0;t&&(r|=4),Dr(n,e,r,t)}var Fr="_reactListening"+Math.random().toString(36).slice(2);function Mr(e){if(!e[Fr]){e[Fr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||_r(t,!1,e),_r(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fr]||(t[Fr]=!0,_r("selectionchange",!1,t))}}function Dr(e,t,n,r){switch(Qt(t)){case 1:var a=Vt;break;case 4:a=Wt;break;default:a=$t}n=a.bind(null,t,n,e),a=void 0,!Ae||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function zr(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==o;){if(null===(i=fa(o)))return;if(5===(s=i.tag)||6===s){r=l=i;continue e}o=o.parentNode}}r=r.return}Re((function(){var r=l,a=ke(n),i=[];e:{var o=Tr.get(e);if(void 0!==o){var s=sn,c=e;switch(e){case"keypress":if(0===Zt(n))break e;case"keydown":case"keyup":s=En;break;case"focusin":c="focus",s=hn;break;case"focusout":c="blur",s=hn;break;case"beforeblur":case"afterblur":s=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=fn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case kr:case jr:case Er:s=gn;break;case wr:s=Sn;break;case"scroll":s=un;break;case"wheel":s=Cn;break;case"copy":case"cut":case"paste":s=mn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=wn}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==o?o+"Capture":null:o;u=[];for(var p,h=r;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==f&&(null!=(g=Pe(h,f))&&u.push(Br(h,g,p)))),d)break;h=h.return}0<u.length&&(o=new s(o,c,null,n,a),i.push({event:o,listeners:u}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===xe||!(c=n.relatedTarget||n.fromElement)||!fa(c)&&!c[sa])&&(s||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?fa(c):null)&&(c!==(d=He(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(u=fn,g="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=wn,g="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?o:ha(s),p=null==c?o:ha(c),(o=new u(g,h+"leave",s,n,a)).target=d,o.relatedTarget=p,g=null,fa(a)===r&&((u=new u(f,h+"enter",c,n,a)).target=p,u.relatedTarget=d,g=u),d=g,s&&c)e:{for(f=c,h=0,p=u=s;p;p=Hr(p))h++;for(p=0,g=f;g;g=Hr(g))p++;for(;0<h-p;)u=Hr(u),h--;for(;0<p-h;)f=Hr(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break e;u=Hr(u),f=Hr(f)}u=null}else u=null;null!==s&&Vr(i,o,s,u,!1),null!==c&&null!==d&&Vr(i,d,c,u,!0)}if("select"===(s=(o=r?ha(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===s&&"file"===o.type)var m=$n;else if(zn(o))if(Gn)m=tr;else{m=Zn;var v=Jn}else(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(m=er);switch(m&&(m=m(e,r))?Bn(i,m,n,a):(v&&v(e,o,r),"focusout"===e&&(v=o._wrapperState)&&v.controlled&&"number"===o.type&&ee(o,"number",o.value)),v=r?ha(r):window,e){case"focusin":(zn(v)||"true"===v.contentEditable)&&(dr=v,fr=r,pr=null);break;case"focusout":pr=fr=dr=null;break;case"mousedown":hr=!0;break;case"contextmenu":case"mouseup":case"dragend":hr=!1,gr(i,n,a);break;case"selectionchange":if(ur)break;case"keydown":case"keyup":gr(i,n,a)}var b;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Mn?_n(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Pn&&"ko"!==n.locale&&(Mn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Mn&&(b=Jt()):(Xt="value"in(Yt=a)?Yt.value:Yt.textContent,Mn=!0)),0<(v=Ur(r,y)).length&&(y=new vn(y,e,null,n,a),i.push({event:y,listeners:v}),b?y.data=b:null!==(b=Fn(n))&&(y.data=b))),(b=Rn?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(Ln=!0,An);case"textInput":return(e=t.data)===An&&Ln?null:e;default:return null}}(e,n):function(e,t){if(Mn)return"compositionend"===e||!Nn&&_n(e,t)?(e=Jt(),qt=Xt=Yt=null,Mn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Ur(r,"onBeforeInput")).length&&(a=new vn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=b))}Ar(i,t)}))}function Br(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ur(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=Pe(e,n))&&r.unshift(Br(e,l,a)),null!=(l=Pe(e,t))&&r.push(Br(e,l,a))),e=e.return}return r}function Hr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,a){for(var l=t._reactName,i=[];null!==n&&n!==r;){var o=n,s=o.alternate,c=o.stateNode;if(null!==s&&s===r)break;5===o.tag&&null!==c&&(o=c,a?null!=(s=Pe(n,l))&&i.unshift(Br(n,s,o)):a||null!=(s=Pe(n,l))&&i.push(Br(n,s,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Wr=/\r\n?/g,$r=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Wr,"\n").replace($r,"")}function Kr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(l(425))}function Qr(){}var Yr=null;function Xr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var qr="function"==typeof setTimeout?setTimeout:void 0,Jr="function"==typeof clearTimeout?clearTimeout:void 0,Zr="function"==typeof Promise?Promise:void 0,ea="function"==typeof queueMicrotask?queueMicrotask:void 0!==Zr?function(e){return Zr.resolve(null).then(e).catch(ta)}:qr;function ta(e){setTimeout((function(){throw e}))}function na(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ra(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function aa(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var la=Math.random().toString(36).slice(2),ia="__reactFiber$"+la,oa="__reactProps$"+la,sa="__reactContainer$"+la,ca="__reactEvents$"+la,ua="__reactListeners$"+la,da="__reactHandles$"+la;function fa(e){var t=e[ia];if(t)return t;for(var n=e.parentNode;n;){if(t=n[sa]||n[ia]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=aa(e);null!==e;){if(n=e[ia])return n;e=aa(e)}return t}n=(e=n).parentNode}return null}function pa(e){return!(e=e[ia]||e[sa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ha(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function ga(e){return e[oa]||null}var ma=[],va=-1;function ba(e){return{current:e}}function ya(e){0>va||(e.current=ma[va],ma[va]=null,va--)}function xa(e,t){va++,ma[va]=e.current,e.current=t}var ka={},ja=ba(ka),Ea=ba(!1),wa=ka;function Ta(e,t){var n=e.type.contextTypes;if(!n)return ka;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function Sa(e){return null!=(e=e.childContextTypes)}function Ca(){ya(Ea),ya(ja)}function Oa(e,t,n){if(ja.current!==ka)throw Error(l(168));xa(ja,t),xa(Ea,n)}function Na(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(l(108,V(e)||"Unknown",a));return M({},n,r)}function Ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ka,wa=ja.current,xa(ja,e),xa(Ea,Ea.current),!0}function Ra(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=Na(e,t,wa),r.__reactInternalMemoizedMergedChildContext=e,ya(Ea),ya(ja),xa(ja,e)):ya(Ea),xa(Ea,n)}var Pa=null,Aa=!1,La=!1;function _a(e){null===Pa?Pa=[e]:Pa.push(e)}function Fa(){if(!La&&null!==Pa){La=!0;var e=0,t=bt;try{var n=Pa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Pa=null,Aa=!1}catch(t){throw null!==Pa&&(Pa=Pa.slice(e+1)),Ke(Ze,Fa),t}finally{bt=t,La=!1}}return null}var Ma=x.ReactCurrentBatchConfig;function Da(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var za=ba(null),Ba=null,Ua=null,Ha=null;function Va(){Ha=Ua=Ba=null}function Wa(e){var t=za.current;ya(za),e._currentValue=t}function $a(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ga(e,t){Ba=e,Ha=Ua=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ho=!0),e.firstContext=null)}function Ka(e){var t=e._currentValue;if(Ha!==e)if(e={context:e,memoizedValue:t,next:null},null===Ua){if(null===Ba)throw Error(l(308));Ua=e,Ba.dependencies={lanes:0,firstContext:e}}else Ua=Ua.next=e;return t}var Qa=null,Ya=!1;function Xa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function qa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ja(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Za(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==gs&&0!=(1&e.mode)&&0==(2&hs)?(null===(e=n.interleaved)?(t.next=t,null===Qa?Qa=[n]:Qa.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function el(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function tl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=i:l=l.next=i,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function nl(e,t,n,r){var a=e.updateQueue;Ya=!1;var l=a.firstBaseUpdate,i=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var s=o,c=s.next;s.next=null,null===i?l=c:i.next=c,i=s;var u=e.alternate;null!==u&&((o=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===o?u.firstBaseUpdate=c:o.next=c,u.lastBaseUpdate=s))}if(null!==l){var d=a.baseState;for(i=0,u=c=s=null,o=l;;){var f=o.lane,p=o.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,g=o;switch(f=t,p=n,g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=g.payload)?h.call(p,d,f):h))break e;d=M({},d,f);break e;case 2:Ya=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[o]:f.push(o))}else p={eventTime:p,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===u?(c=u=p,s=d):u=u.next=p,i|=f;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(f=o).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===u&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===l&&(a.shared.lanes=0);js|=i,e.lanes=i,e.memoizedState=d}}function rl(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var al=(new r.Component).refs;function ll(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var il={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zs(),a=Bs(e),l=Ja(r,a);l.payload=t,null!=n&&(l.callback=n),Za(e,l),null!==(t=Us(e,a,r))&&el(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zs(),a=Bs(e),l=Ja(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),Za(e,l),null!==(t=Us(e,a,r))&&el(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zs(),r=Bs(e),a=Ja(n,r);a.tag=2,null!=t&&(a.callback=t),Za(e,a),null!==(t=Us(e,r,n))&&el(t,e,r)}};function ol(e,t,n,r,a,l,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,i):!t.prototype||!t.prototype.isPureReactComponent||(!rr(n,r)||!rr(a,l))}function sl(e,t,n){var r=!1,a=ka,l=t.contextType;return"object"==typeof l&&null!==l?l=Ka(l):(a=Sa(t)?wa:ja.current,l=(r=null!=(r=t.contextTypes))?Ta(e,a):ka),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=il,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function cl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&il.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=al,Xa(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=Ka(l):(l=Sa(t)?wa:ja.current,a.context=Ta(e,l)),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(ll(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&il.enqueueReplaceState(a,a.state,null),nl(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var dl=[],fl=0,pl=null,hl=0,gl=[],ml=0,vl=null,bl=1,yl="";function xl(e,t){dl[fl++]=hl,dl[fl++]=pl,pl=e,hl=t}function kl(e,t,n){gl[ml++]=bl,gl[ml++]=yl,gl[ml++]=vl,vl=e;var r=bl;e=yl;var a=32-it(r)-1;r&=~(1<<a),n+=1;var l=32-it(t)+a;if(30<l){var i=a-a%5;l=(r&(1<<i)-1).toString(32),r>>=i,a-=i,bl=1<<32-it(t)+a|n<<a|r,yl=l+e}else bl=1<<l|n<<a|r,yl=e}function jl(e){null!==e.return&&(xl(e,1),kl(e,1,0))}function El(e){for(;e===pl;)pl=dl[--fl],dl[fl]=null,hl=dl[--fl],dl[fl]=null;for(;e===vl;)vl=gl[--ml],gl[ml]=null,yl=gl[--ml],gl[ml]=null,bl=gl[--ml],gl[ml]=null}var wl=null,Tl=null,Sl=!1,Cl=null;function Ol(e,t){var n=vc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Nl(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,wl=e,Tl=ra(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,wl=e,Tl=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==vl?{id:bl,overflow:yl}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=vc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,wl=e,Tl=null,!0);default:return!1}}function Il(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Rl(e){if(Sl){var t=Tl;if(t){var n=t;if(!Nl(e,t)){if(Il(e))throw Error(l(418));t=ra(n.nextSibling);var r=wl;t&&Nl(e,t)?Ol(r,n):(e.flags=-4097&e.flags|2,Sl=!1,wl=e)}}else{if(Il(e))throw Error(l(418));e.flags=-4097&e.flags|2,Sl=!1,wl=e}}}function Pl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wl=e}function Al(e){if(e!==wl)return!1;if(!Sl)return Pl(e),Sl=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Xr(e.type,e.memoizedProps)),t&&(t=Tl)){if(Il(e)){for(e=Tl;e;)e=ra(e.nextSibling);throw Error(l(418))}for(;t;)Ol(e,t),t=ra(t.nextSibling)}if(Pl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Tl=ra(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Tl=null}}else Tl=wl?ra(e.stateNode.nextSibling):null;return!0}function Ll(){Tl=wl=null,Sl=!1}function _l(e){null===Cl?Cl=[e]:Cl.push(e)}function Fl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=a.refs;t===al&&(t=a.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function Ml(e,t){throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Dl(e){return(0,e._init)(e._payload)}function zl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=yc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ec(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){var l=n.type;return l===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===P&&Dl(l)===t.type)?((r=a(t,n.props)).ref=Fl(e,t,n),r.return=e,r):((r=xc(n.type,n.key,n.props,null,e.mode,r)).ref=Fl(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=wc(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,l){return null===t||7!==t.tag?((t=kc(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ec(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=xc(t.type,t.key,t.props,null,e.mode,n)).ref=Fl(e,null,t),n.return=e,n;case j:return(t=wc(t,e.mode,n)).return=e,t;case P:return f(e,(0,t._init)(t._payload),n)}if(te(t)||_(t))return(t=kc(t,e.mode,n,null)).return=e,t;Ml(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?c(e,t,n,r):null;case j:return n.key===a?u(e,t,n,r):null;case P:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||_(n))return null!==a?null:d(e,t,n,r,null);Ml(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case j:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case P:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||_(r))return d(t,e=e.get(n)||null,r,a,null);Ml(t,r)}return null}function g(a,l,o,s){for(var c=null,u=null,d=l,g=l=0,m=null;null!==d&&g<o.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=p(a,d,o[g],s);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(a,d),l=i(v,l,g),null===u?c=v:u.sibling=v,u=v,d=m}if(g===o.length)return n(a,d),Sl&&xl(a,g),c;if(null===d){for(;g<o.length;g++)null!==(d=f(a,o[g],s))&&(l=i(d,l,g),null===u?c=d:u.sibling=d,u=d);return Sl&&xl(a,g),c}for(d=r(a,d);g<o.length;g++)null!==(m=h(d,a,g,o[g],s))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),l=i(m,l,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(a,e)})),Sl&&xl(a,g),c}function m(a,o,s,c){var u=_(s);if("function"!=typeof u)throw Error(l(150));if(null==(s=u.call(s)))throw Error(l(151));for(var d=u=null,g=o,m=o=0,v=null,b=s.next();null!==g&&!b.done;m++,b=s.next()){g.index>m?(v=g,g=null):v=g.sibling;var y=p(a,g,b.value,c);if(null===y){null===g&&(g=v);break}e&&g&&null===y.alternate&&t(a,g),o=i(y,o,m),null===d?u=y:d.sibling=y,d=y,g=v}if(b.done)return n(a,g),Sl&&xl(a,m),u;if(null===g){for(;!b.done;m++,b=s.next())null!==(b=f(a,b.value,c))&&(o=i(b,o,m),null===d?u=b:d.sibling=b,d=b);return Sl&&xl(a,m),u}for(g=r(a,g);!b.done;m++,b=s.next())null!==(b=h(g,a,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),o=i(b,o,m),null===d?u=b:d.sibling=b,d=b);return e&&g.forEach((function(e){return t(a,e)})),Sl&&xl(a,m),u}return function e(r,l,i,s){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var c=i.key,u=l;null!==u;){if(u.key===c){if((c=i.type)===E){if(7===u.tag){n(r,u.sibling),(l=a(u,i.props.children)).return=r,r=l;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===P&&Dl(c)===u.type){n(r,u.sibling),(l=a(u,i.props)).ref=Fl(r,u,i),l.return=r,r=l;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===E?((l=kc(i.props.children,r.mode,s,i.key)).return=r,r=l):((s=xc(i.type,i.key,i.props,null,r.mode,s)).ref=Fl(r,l,i),s.return=r,r=s)}return o(r);case j:e:{for(u=i.key;null!==l;){if(l.key===u){if(4===l.tag&&l.stateNode.containerInfo===i.containerInfo&&l.stateNode.implementation===i.implementation){n(r,l.sibling),(l=a(l,i.children||[])).return=r,r=l;break e}n(r,l);break}t(r,l),l=l.sibling}(l=wc(i,r.mode,s)).return=r,r=l}return o(r);case P:return e(r,l,(u=i._init)(i._payload),s)}if(te(i))return g(r,l,i,s);if(_(i))return m(r,l,i,s);Ml(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==l&&6===l.tag?(n(r,l.sibling),(l=a(l,i)).return=r,r=l):(n(r,l),(l=Ec(i,r.mode,s)).return=r,r=l),o(r)):n(r,l)}}var Bl=zl(!0),Ul=zl(!1),Hl={},Vl=ba(Hl),Wl=ba(Hl),$l=ba(Hl);function Gl(e){if(e===Hl)throw Error(l(174));return e}function Kl(e,t){switch(xa($l,t),xa(Wl,e),xa(Vl,Hl),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ya(Vl),xa(Vl,t)}function Ql(){ya(Vl),ya(Wl),ya($l)}function Yl(e){Gl($l.current);var t=Gl(Vl.current),n=se(t,e.type);t!==n&&(xa(Wl,e),xa(Vl,n))}function Xl(e){Wl.current===e&&(ya(Vl),ya(Wl))}var ql=ba(0);function Jl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Zl=[];function ei(){for(var e=0;e<Zl.length;e++)Zl[e]._workInProgressVersionPrimary=null;Zl.length=0}var ti=x.ReactCurrentDispatcher,ni=x.ReactCurrentBatchConfig,ri=0,ai=null,li=null,ii=null,oi=!1,si=!1,ci=0,ui=0;function di(){throw Error(l(321))}function fi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!nr(e[n],t[n]))return!1;return!0}function pi(e,t,n,r,a,i){if(ri=i,ai=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ti.current=null===e||null===e.memoizedState?Yi:Xi,e=n(r,a),si){i=0;do{if(si=!1,ci=0,25<=i)throw Error(l(301));i+=1,ii=li=null,t.updateQueue=null,ti.current=qi,e=n(r,a)}while(si)}if(ti.current=Qi,t=null!==li&&null!==li.next,ri=0,ii=li=ai=null,oi=!1,t)throw Error(l(300));return e}function hi(){var e=0!==ci;return ci=0,e}function gi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ii?ai.memoizedState=ii=e:ii=ii.next=e,ii}function mi(){if(null===li){var e=ai.alternate;e=null!==e?e.memoizedState:null}else e=li.next;var t=null===ii?ai.memoizedState:ii.next;if(null!==t)ii=t,li=e;else{if(null===e)throw Error(l(310));e={memoizedState:(li=e).memoizedState,baseState:li.baseState,baseQueue:li.baseQueue,queue:li.queue,next:null},null===ii?ai.memoizedState=ii=e:ii=ii.next=e}return ii}function vi(e,t){return"function"==typeof t?t(e):t}function bi(e){var t=mi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=li,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=o=null,c=null,u=i;do{var d=u.lane;if((ri&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=f,o=r):c=c.next=f,ai.lanes|=d,js|=d}u=u.next}while(null!==u&&u!==i);null===c?o=r:c.next=s,nr(r,t.memoizedState)||(ho=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,ai.lanes|=i,js|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function yi(e){var t=mi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);nr(i,t.memoizedState)||(ho=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function xi(){}function ki(e,t){var n=ai,r=mi(),a=t(),i=!nr(r.memoizedState,a);if(i&&(r.memoizedState=a,ho=!0),r=r.queue,Pi(wi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ii&&1&ii.memoizedState.tag){if(n.flags|=2048,Ci(9,Ei.bind(null,n,r,a,t),void 0,null),null===gs)throw Error(l(349));0!=(30&ri)||ji(n,t,a)}return a}function ji(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ai.updateQueue)?(t={lastEffect:null,stores:null},ai.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ei(e,t,n,r){t.value=n,t.getSnapshot=r,Ti(t)&&Us(e,1,-1)}function wi(e,t,n){return n((function(){Ti(t)&&Us(e,1,-1)}))}function Ti(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!nr(e,n)}catch(e){return!0}}function Si(e){var t=gi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:vi,lastRenderedState:e},t.queue=e,e=e.dispatch=Vi.bind(null,ai,e),[t.memoizedState,e]}function Ci(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ai.updateQueue)?(t={lastEffect:null,stores:null},ai.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Oi(){return mi().memoizedState}function Ni(e,t,n,r){var a=gi();ai.flags|=e,a.memoizedState=Ci(1|t,n,void 0,void 0===r?null:r)}function Ii(e,t,n,r){var a=mi();r=void 0===r?null:r;var l=void 0;if(null!==li){var i=li.memoizedState;if(l=i.destroy,null!==r&&fi(r,i.deps))return void(a.memoizedState=Ci(t,n,l,r))}ai.flags|=e,a.memoizedState=Ci(1|t,n,l,r)}function Ri(e,t){return Ni(8390656,8,e,t)}function Pi(e,t){return Ii(2048,8,e,t)}function Ai(e,t){return Ii(4,2,e,t)}function Li(e,t){return Ii(4,4,e,t)}function _i(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4,4,_i.bind(null,t,e),n)}function Mi(){}function Di(e,t){var n=mi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function zi(e,t){var n=mi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Bi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ni.transition;ni.transition={};try{e(!1),t()}finally{bt=n,ni.transition=r}}function Ui(){return mi().memoizedState}function Hi(e,t,n){var r=Bs(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Wi(e)?$i(t,n):(Gi(e,t,n),null!==(e=Us(e,r,n=zs()))&&Ki(e,t,r))}function Vi(e,t,n){var r=Bs(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Wi(e))$i(t,a);else{Gi(e,t,a);var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=l(i,n);if(a.hasEagerState=!0,a.eagerState=o,nr(o,i))return}catch(e){}null!==(e=Us(e,r,n=zs()))&&Ki(e,t,r)}}function Wi(e){var t=e.alternate;return e===ai||null!==t&&t===ai}function $i(e,t){si=oi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Gi(e,t,n){null!==gs&&0!=(1&e.mode)&&0==(2&hs)?(null===(e=t.interleaved)?(n.next=n,null===Qa?Qa=[t]:Qa.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Ki(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Qi={readContext:Ka,useCallback:di,useContext:di,useEffect:di,useImperativeHandle:di,useInsertionEffect:di,useLayoutEffect:di,useMemo:di,useReducer:di,useRef:di,useState:di,useDebugValue:di,useDeferredValue:di,useTransition:di,useMutableSource:di,useSyncExternalStore:di,useId:di,unstable_isNewReconciler:!1},Yi={readContext:Ka,useCallback:function(e,t){return gi().memoizedState=[e,void 0===t?null:t],e},useContext:Ka,useEffect:Ri,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ni(4194308,4,_i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ni(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ni(4,2,e,t)},useMemo:function(e,t){var n=gi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Hi.bind(null,ai,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gi().memoizedState=e},useState:Si,useDebugValue:Mi,useDeferredValue:function(e){var t=Si(e),n=t[0],r=t[1];return Ri((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){var e=Si(!1),t=e[0];return e=Bi.bind(null,e[1]),gi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ai,a=gi();if(Sl){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===gs)throw Error(l(349));0!=(30&ri)||ji(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Ri(wi.bind(null,r,i,e),[e]),r.flags|=2048,Ci(9,Ei.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=gi(),t=gs.identifierPrefix;if(Sl){var n=yl;t=":"+t+"R"+(n=(bl&~(1<<32-it(bl)-1)).toString(32)+n),0<(n=ci++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ui++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Xi={readContext:Ka,useCallback:Di,useContext:Ka,useEffect:Pi,useImperativeHandle:Fi,useInsertionEffect:Ai,useLayoutEffect:Li,useMemo:zi,useReducer:bi,useRef:Oi,useState:function(){return bi(vi)},useDebugValue:Mi,useDeferredValue:function(e){var t=bi(vi),n=t[0],r=t[1];return Pi((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){return[bi(vi)[0],mi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Ui,unstable_isNewReconciler:!1},qi={readContext:Ka,useCallback:Di,useContext:Ka,useEffect:Pi,useImperativeHandle:Fi,useInsertionEffect:Ai,useLayoutEffect:Li,useMemo:zi,useReducer:yi,useRef:Oi,useState:function(){return yi(vi)},useDebugValue:Mi,useDeferredValue:function(e){var t=yi(vi),n=t[0],r=t[1];return Pi((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){return[yi(vi)[0],mi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Ui,unstable_isNewReconciler:!1};function Ji(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function Zi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var eo,to,no,ro="function"==typeof WeakMap?WeakMap:Map;function ao(e,t,n){(n=Ja(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ns||(Ns=!0,Is=r),Zi(0,t)},n}function lo(e,t,n){(n=Ja(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){Zi(0,t)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){Zi(0,t),"function"!=typeof r&&(null===Rs?Rs=new Set([this]):Rs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function io(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ro;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function oo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function so(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ja(-1,1)).tag=2,Za(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function co(e,t){if(!Sl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function uo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function fo(e,t,n){var r=t.pendingProps;switch(El(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return uo(t),null;case 1:return Sa(t.type)&&Ca(),uo(t),null;case 3:return r=t.stateNode,Ql(),ya(Ea),ya(ja),ei(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Al(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Cl&&(Gs(Cl),Cl=null))),uo(t),null;case 5:Xl(t);var a=Gl($l.current);if(n=t.type,null!==e&&null!=t.stateNode)to(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(l(166));return uo(t),null}if(e=Gl(Vl.current),Al(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ia]=t,r[oa]=i,e=0!=(1&t.mode),n){case"dialog":Lr("cancel",r),Lr("close",r);break;case"iframe":case"object":case"embed":Lr("load",r);break;case"video":case"audio":for(a=0;a<Ir.length;a++)Lr(Ir[a],r);break;case"source":Lr("error",r);break;case"img":case"image":case"link":Lr("error",r),Lr("load",r);break;case"details":Lr("toggle",r);break;case"input":X(r,i),Lr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Lr("invalid",r);break;case"textarea":ae(r,i),Lr("invalid",r)}for(var s in be(n,i),a=null,i)if(i.hasOwnProperty(s)){var c=i[s];"children"===s?"string"==typeof c?r.textContent!==c&&(Kr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(Kr(r.textContent,c,e),a=["children",""+c]):o.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&Lr("scroll",r)}switch(n){case"input":G(r),Z(r,i,!0);break;case"textarea":G(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Qr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[ia]=t,e[oa]=r,eo(e,t),t.stateNode=e;e:{switch(s=ye(n,r),n){case"dialog":Lr("cancel",e),Lr("close",e),a=r;break;case"iframe":case"object":case"embed":Lr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ir.length;a++)Lr(Ir[a],e);a=r;break;case"source":Lr("error",e),a=r;break;case"img":case"image":case"link":Lr("error",e),Lr("load",e),a=r;break;case"details":Lr("toggle",e),a=r;break;case"input":X(e,r),a=Y(e,r),Lr("invalid",e);break;case"option":a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Lr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Lr("invalid",e);break;default:a=r}for(i in be(n,a),c=a)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?me(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Lr("scroll",e):null!=u&&y(e,i,u,s))}switch(n){case"input":G(e),Z(e,r,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Qr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return uo(t),null;case 6:if(e&&null!=t.stateNode)no(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(n=Gl($l.current),Gl(Vl.current),Al(t)){if(r=t.stateNode,n=t.memoizedProps,r[ia]=t,(i=r.nodeValue!==n)&&null!==(e=wl))switch(s=0!=(1&e.mode),e.tag){case 3:Kr(r.nodeValue,n,s);break;case 5:!0!==e.memoizedProps[void 0]&&Kr(r.nodeValue,n,s)}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ia]=t,t.stateNode=r}return uo(t),null;case 13:if(ya(ql),r=t.memoizedState,Sl&&null!==Tl&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Tl;r;)r=ra(r.nextSibling);return Ll(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Al(t),null===e){if(!r)throw Error(l(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(l(317));r[ia]=t}else Ll(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return uo(t),null}return null!==Cl&&(Gs(Cl),Cl=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Al(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ql.current)?0===xs&&(xs=3):tc())),null!==t.updateQueue&&(t.flags|=4),uo(t),null);case 4:return Ql(),null===e&&Mr(t.stateNode.containerInfo),uo(t),null;case 10:return Wa(t.type._context),uo(t),null;case 17:return Sa(t.type)&&Ca(),uo(t),null;case 19:if(ya(ql),null===(i=t.memoizedState))return uo(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)co(i,!1);else{if(0!==xs||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=Jl(e))){for(t.flags|=128,co(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ql,1&ql.current|2),t.child}e=e.sibling}null!==i.tail&&qe()>Os&&(t.flags|=128,r=!0,co(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Jl(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),co(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!Sl)return uo(t),null}else 2*qe()-i.renderingStartTime>Os&&1073741824!==n&&(t.flags|=128,r=!0,co(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=qe(),t.sibling=null,n=ql.current,xa(ql,r?1&n|2:1&n),t):(uo(t),null);case 22:case 23:return qs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&bs)&&(uo(t),6&t.subtreeFlags&&(t.flags|=8192)):uo(t),null;case 24:case 25:return null}throw Error(l(156,t.tag))}eo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},to=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Gl(Vl.current);var l,i=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Qr)}for(u in be(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var s=a[u];for(l in s)s.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(o.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(i||(i=[]),i.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(o.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Lr("scroll",e),i||s===c||(i=[])):(i=i||[]).push(u,c))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},no=function(e,t,n,r){n!==r&&(t.flags|=4)};var po=x.ReactCurrentOwner,ho=!1;function go(e,t,n,r){t.child=null===e?Ul(t,null,n,r):Bl(t,e.child,n,r)}function mo(e,t,n,r,a){n=n.render;var l=t.ref;return Ga(t,a),r=pi(e,t,n,r,l,a),n=hi(),null===e||ho?(Sl&&n&&jl(t),t.flags|=1,go(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Fo(e,t,a))}function vo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||bc(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=xc(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,bo(e,t,l,r,a))}if(l=e.child,0==(e.lanes&a)){var i=l.memoizedProps;if((n=null!==(n=n.compare)?n:rr)(i,r)&&e.ref===t.ref)return Fo(e,t,a)}return t.flags|=1,(e=yc(l,r)).ref=t.ref,e.return=t,t.child=e}function bo(e,t,n,r,a){if(null!==e&&rr(e.memoizedProps,r)&&e.ref===t.ref){if(ho=!1,0==(e.lanes&a))return t.lanes=e.lanes,Fo(e,t,a);0!=(131072&e.flags)&&(ho=!0)}return ko(e,t,n,r,a)}function yo(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},xa(ys,bs),bs|=n;else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,xa(ys,bs),bs|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==l?l.baseLanes:n,xa(ys,bs),bs|=r}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,xa(ys,bs),bs|=r;return go(e,t,a,n),t.child}function xo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ko(e,t,n,r,a){var l=Sa(n)?wa:ja.current;return l=Ta(t,l),Ga(t,a),n=pi(e,t,n,r,l,a),r=hi(),null===e||ho?(Sl&&r&&jl(t),t.flags|=1,go(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Fo(e,t,a))}function jo(e,t,n,r,a){if(Sa(n)){var l=!0;Ia(t)}else l=!1;if(Ga(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),sl(t,n,r),ul(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var s=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ka(c):c=Ta(t,c=Sa(n)?wa:ja.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==r||s!==c)&&cl(t,i,r,c),Ya=!1;var f=t.memoizedState;i.state=f,nl(t,r,i,a),s=t.memoizedState,o!==r||f!==s||Ea.current||Ya?("function"==typeof u&&(ll(t,n,u,r),s=t.memoizedState),(o=Ya||ol(t,n,o,r,f,s,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=c,r=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,qa(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:Da(t.type,o),i.props=c,d=t.pendingProps,f=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=Ka(s):s=Ta(t,s=Sa(n)?wa:ja.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==d||f!==s)&&cl(t,i,r,s),Ya=!1,f=t.memoizedState,i.state=f,nl(t,r,i,a);var h=t.memoizedState;o!==d||f!==h||Ea.current||Ya?("function"==typeof p&&(ll(t,n,p,r),h=t.memoizedState),(c=Ya||ol(t,n,c,r,f,h,s)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Eo(e,t,n,r,l,a)}function Eo(e,t,n,r,a,l){xo(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Ra(t,n,!1),Fo(e,t,l);r=t.stateNode,po.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Bl(t,e.child,null,l),t.child=Bl(t,null,o,l)):go(e,t,o,l),t.memoizedState=r.state,a&&Ra(t,n,!0),t.child}function wo(e){var t=e.stateNode;t.pendingContext?Oa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Oa(0,t.context,!1),Kl(e,t.containerInfo)}function To(e,t,n,r,a){return Ll(),_l(a),t.flags|=256,go(e,t,n,r),t.child}var So={dehydrated:null,treeContext:null,retryLane:0};function Co(e){return{baseLanes:e,cachePool:null}}function Oo(e,t,n){var r,a=t.pendingProps,i=ql.current,o=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xa(ql,1&i),null===e)return Rl(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,o?(a=t.mode,o=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=i):o=jc(i,a,0,null),e=kc(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Co(n),t.memoizedState=So,e):No(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(s)return 256&t.flags?(t.flags&=-257,Po(e,t,n,Error(l(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=a.fallback,i=t.mode,a=jc({mode:"visible",children:a.children},i,0,null),(o=kc(o,i,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,0!=(1&t.mode)&&Bl(t,e.child,null,n),t.child.memoizedState=Co(n),t.memoizedState=So,o);if(0==(1&t.mode))t=Po(e,t,n,null);else if("$!"===r.data)t=Po(e,t,n,Error(l(419)));else if(a=0!=(n&e.childLanes),ho||a){if(null!==(a=gs)){switch(n&-n){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(a=0!=(o&(a.suspendedLanes|n))?0:o)&&a!==i.retryLane&&(i.retryLane=a,Us(e,a,-1))}tc(),t=Po(e,t,n,Error(l(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=pc.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,Tl=ra(r.nextSibling),wl=t,Sl=!0,Cl=null,null!==n&&(gl[ml++]=bl,gl[ml++]=yl,gl[ml++]=vl,bl=n.id,yl=n.overflow,vl=t),(t=No(t,t.pendingProps.children)).flags|=4096);return t}return o?(a=Ro(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?Co(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=So,a):(n=Io(e,t,a.children,n),t.memoizedState=null,n)}return o?(a=Ro(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?Co(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=So,a):(n=Io(e,t,a.children,n),t.memoizedState=null,n)}function No(e,t){return(t=jc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Io(e,t,n,r){var a=e.child;return e=a.sibling,n=yc(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Ro(e,t,n,r,a){var l=t.mode,i=(e=e.child).sibling,o={mode:"hidden",children:n};return 0==(1&l)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=o,t.deletions=null):(n=yc(e,o)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=yc(i,r):(r=kc(r,l,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Po(e,t,n,r){return null!==r&&_l(r),Bl(t,e.child,null,n),(e=No(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ao(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),$a(e.return,t,n)}function Lo(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function _o(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(go(e,t,r.children,n),0!=(2&(r=ql.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ao(e,n,t);else if(19===e.tag)Ao(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ql,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Jl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Lo(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Jl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Lo(t,!0,n,null,l);break;case"together":Lo(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Fo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=yc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=yc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Mo(e,t){switch(El(t),t.tag){case 1:return Sa(t.type)&&Ca(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ql(),ya(Ea),ya(ja),ei(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Xl(t),null;case 13:if(ya(ql),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));Ll()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ya(ql),null;case 4:return Ql(),null;case 10:return Wa(t.type._context),null;case 22:case 23:return qs(),null;case 24:default:return null}}var Do=!1,zo=!1,Bo="function"==typeof WeakSet?WeakSet:Set,Uo=null;function Ho(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){uc(e,t,n)}else n.current=null}function Vo(e,t,n){try{n()}catch(n){uc(e,t,n)}}var Wo=!1;function $o(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var l=a.destroy;a.destroy=void 0,void 0!==l&&Vo(t,n,l)}a=a.next}while(a!==r)}}function Go(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Ko(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}"function"==typeof t?t(e):t.current=e}}function Qo(e,t,n){if(lt&&"function"==typeof lt.onCommitFiberUnmount)try{lt.onCommitFiberUnmount(at,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var a=r,l=a.destroy;a=a.tag,void 0!==l&&(0!=(2&a)||0!=(4&a))&&Vo(t,n,l),r=r.next}while(r!==e)}break;case 1:if(Ho(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){uc(t,n,e)}break;case 5:Ho(t,n);break;case 4:ts(e,t,n)}}function Yo(e){var t=e.alternate;null!==t&&(e.alternate=null,Yo(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&(delete t[ia],delete t[oa],delete t[ca],delete t[ua],delete t[da])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Xo(e){return 5===e.tag||3===e.tag||4===e.tag}function qo(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Xo(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Jo(e){e:{for(var t=e.return;null!==t;){if(Xo(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(fe(t,""),n.flags&=-33),es(e,n=qo(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,Zo(e,n=qo(e),t);break;default:throw Error(l(161))}}function Zo(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Qr));else if(4!==r&&null!==(e=e.child))for(Zo(e,t,n),e=e.sibling;null!==e;)Zo(e,t,n),e=e.sibling}function es(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(es(e,t,n),e=e.sibling;null!==e;)es(e,t,n),e=e.sibling}function ts(e,t,n){for(var r,a,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(l(160));switch(r=o.stateNode,o.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,c=i,u=n,d=c;;)if(Qo(s,d,u),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===c)break e;for(;null===d.sibling;){if(null===d.return||d.return===c)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}a?(s=r,c=i.stateNode,8===s.nodeType?s.parentNode.removeChild(c):s.removeChild(c)):r.removeChild(i.stateNode)}else if(18===i.tag)a?(s=r,c=i.stateNode,8===s.nodeType?na(s.parentNode,c):1===s.nodeType&&na(s,c),Ut(s)):na(r,i.stateNode);else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(Qo(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ns(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return $o(3,t,t.return),Go(3,t),void $o(5,t,t.return);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for("input"===e&&"radio"===r.type&&null!=r.name&&q(n,r),ye(e,a),t=ye(e,r),a=0;a<i.length;a+=2){var o=i[a],s=i[a+1];"style"===o?me(n,s):"dangerouslySetInnerHTML"===o?de(n,s):"children"===o?fe(n,s):y(n,o,s,t)}switch(e){case"input":J(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ne(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ne(n,!!r.multiple,r.defaultValue,!0):ne(n,!!r.multiple,r.multiple?[]:"",!1))}n[oa]=r}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&Ut(t.stateNode.containerInfo));case 12:return;case 13:case 19:return void rs(t);case 17:return}throw Error(l(163))}function rs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Bo),t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function as(e,t,n){Uo=e,ls(e,t,n)}function ls(e,t,n){for(var r=0!=(1&e.mode);null!==Uo;){var a=Uo,l=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Do;if(!i){var o=a.alternate,s=null!==o&&null!==o.memoizedState||zo;o=Do;var c=zo;if(Do=i,(zo=s)&&!c)for(Uo=a;null!==Uo;)s=(i=Uo).child,22===i.tag&&null!==i.memoizedState?ss(a):null!==s?(s.return=i,Uo=s):ss(a);for(;null!==l;)Uo=l,ls(l,t,n),l=l.sibling;Uo=a,Do=o,zo=c}is(e)}else 0!=(8772&a.subtreeFlags)&&null!==l?(l.return=a,Uo=l):is(e)}}function is(e){for(;null!==Uo;){var t=Uo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:zo||Go(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!zo)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Da(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&rl(t,i,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}rl(t,o,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ut(f)}}}break;case 19:case 17:case 21:case 22:case 23:break;default:throw Error(l(163))}zo||512&t.flags&&Ko(t)}catch(e){uc(t,t.return,e)}}if(t===e){Uo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Uo=n;break}Uo=t.return}}function os(e){for(;null!==Uo;){var t=Uo;if(t===e){Uo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Uo=n;break}Uo=t.return}}function ss(e){for(;null!==Uo;){var t=Uo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Go(4,t)}catch(e){uc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){uc(t,a,e)}}var l=t.return;try{Ko(t)}catch(e){uc(t,l,e)}break;case 5:var i=t.return;try{Ko(t)}catch(e){uc(t,i,e)}}}catch(e){uc(t,t.return,e)}if(t===e){Uo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Uo=o;break}Uo=t.return}}var cs,us=Math.ceil,ds=x.ReactCurrentDispatcher,fs=x.ReactCurrentOwner,ps=x.ReactCurrentBatchConfig,hs=0,gs=null,ms=null,vs=0,bs=0,ys=ba(0),xs=0,ks=null,js=0,Es=0,ws=0,Ts=null,Ss=null,Cs=0,Os=1/0,Ns=!1,Is=null,Rs=null,Ps=!1,As=null,Ls=0,_s=0,Fs=null,Ms=-1,Ds=0;function zs(){return 0!=(6&hs)?qe():-1!==Ms?Ms:Ms=qe()}function Bs(e){return 0==(1&e.mode)?1:0!=(2&hs)&&0!==vs?vs&-vs:null!==Ma.transition?(0===Ds&&(e=ct,0==(4194240&(ct<<=1))&&(ct=64),Ds=e),Ds):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function Us(e,t,n){if(50<_s)throw _s=0,Fs=null,Error(l(185));var r=Hs(e,t);return null===r?null:(mt(r,t,n),0!=(2&hs)&&r===gs||(r===gs&&(0==(2&hs)&&(Es|=t),4===xs&&Ks(r,vs)),Vs(r,n),1===t&&0===hs&&0==(1&e.mode)&&(Os=qe()+500,Aa&&Fa())),r)}function Hs(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Vs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var i=31-it(l),o=1<<i,s=a[i];-1===s?0!=(o&n)&&0==(o&r)||(a[i]=pt(o,t)):s<=t&&(e.expiredLanes|=o),l&=~o}}(e,t);var r=ft(e,e===gs?vs:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Aa=!0,_a(e)}(Qs.bind(null,e)):_a(Qs.bind(null,e)),ea((function(){0===hs&&Fa()})),n=null;else{switch(yt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:n=tt;break;case 536870912:n=rt;break;default:n=tt}n=gc(n,Ws.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Ws(e,t){if(Ms=-1,Ds=0,0!=(6&hs))throw Error(l(327));var n=e.callbackNode;if(sc()&&e.callbackNode!==n)return null;var r=ft(e,e===gs?vs:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=nc(e,r);else{t=r;var a=hs;hs|=2;var i=ec();for(gs===e&&vs===t||(Os=qe()+500,Js(e,t));;)try{ac();break}catch(t){Zs(e,t)}Va(),ds.current=i,hs=a,null!==ms?t=0:(gs=null,vs=0,t=xs)}if(0!==t){if(2===t&&(0!==(a=ht(e))&&(r=a,t=$s(e,a))),1===t)throw n=ks,Js(e,0),Ks(e,r),Vs(e,qe()),n;if(6===t)Ks(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!nr(l(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=nc(e,r))&&(0!==(i=ht(e))&&(r=i,t=$s(e,i))),1===t))throw n=ks,Js(e,0),Ks(e,r),Vs(e,qe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(l(345));case 2:oc(e,Ss);break;case 3:if(Ks(e,r),(130023424&r)===r&&10<(t=Cs+500-qe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){zs(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=qr(oc.bind(null,e,Ss),t);break}oc(e,Ss);break;case 4:if(Ks(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-it(r);i=1<<o,(o=t[o])>a&&(a=o),r&=~i}if(r=a,10<(r=(120>(r=qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*us(r/1960))-r)){e.timeoutHandle=qr(oc.bind(null,e,Ss),r);break}oc(e,Ss);break;case 5:oc(e,Ss);break;default:throw Error(l(329))}}}return Vs(e,qe()),e.callbackNode===n?Ws.bind(null,e):null}function $s(e,t){var n=Ts;return e.current.memoizedState.isDehydrated&&(Js(e,t).flags|=256),2!==(e=nc(e,t))&&(t=Ss,Ss=n,null!==t&&Gs(t)),e}function Gs(e){null===Ss?Ss=e:Ss.push.apply(Ss,e)}function Ks(e,t){for(t&=~ws,t&=~Es,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function Qs(e){if(0!=(6&hs))throw Error(l(327));sc();var t=ft(e,0);if(0==(1&t))return Vs(e,qe()),null;var n=nc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=$s(e,r))}if(1===n)throw n=ks,Js(e,0),Ks(e,t),Vs(e,qe()),n;if(6===n)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,oc(e,Ss),Vs(e,qe()),null}function Ys(e,t){var n=hs;hs|=1;try{return e(t)}finally{0===(hs=n)&&(Os=qe()+500,Aa&&Fa())}}function Xs(e){null!==As&&0===As.tag&&0==(6&hs)&&sc();var t=hs;hs|=1;var n=ps.transition,r=bt;try{if(ps.transition=null,bt=1,e)return e()}finally{bt=r,ps.transition=n,0==(6&(hs=t))&&Fa()}}function qs(){bs=ys.current,ya(ys)}function Js(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Jr(n)),null!==ms)for(n=ms.return;null!==n;){var r=n;switch(El(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ca();break;case 3:Ql(),ya(Ea),ya(ja),ei();break;case 5:Xl(r);break;case 4:Ql();break;case 13:case 19:ya(ql);break;case 10:Wa(r.type._context);break;case 22:case 23:qs()}n=n.return}if(gs=e,ms=e=yc(e.current,null),vs=bs=t,xs=0,ks=null,ws=Es=js=0,Ss=Ts=null,null!==Qa){for(t=0;t<Qa.length;t++)if(null!==(r=(n=Qa[t]).interleaved)){n.interleaved=null;var a=r.next,l=n.pending;if(null!==l){var i=l.next;l.next=a,r.next=i}n.pending=r}Qa=null}return e}function Zs(e,t){for(;;){var n=ms;try{if(Va(),ti.current=Qi,oi){for(var r=ai.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}oi=!1}if(ri=0,ii=li=ai=null,si=!1,ci=0,fs.current=null,null===n||null===n.return){xs=1,ks=t,ms=null;break}e:{var i=e,o=n.return,s=n,c=t;if(t=vs,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=s,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=oo(o);if(null!==h){h.flags&=-257,so(h,o,s,0,t),1&h.mode&&io(i,u,t),c=u;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(c),t.updateQueue=m}else g.add(c);break e}if(0==(1&t)){io(i,u,t),tc();break e}c=Error(l(426))}else if(Sl&&1&s.mode){var v=oo(o);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),so(v,o,s,0,t),_l(c);break e}}i=c,4!==xs&&(xs=2),null===Ts?Ts=[i]:Ts.push(i),c=Ji(c,s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,tl(s,ao(0,c,t));break e;case 1:i=c;var b=s.type,y=s.stateNode;if(0==(128&s.flags)&&("function"==typeof b.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Rs||!Rs.has(y)))){s.flags|=65536,t&=-t,s.lanes|=t,tl(s,lo(s,i,t));break e}}s=s.return}while(null!==s)}ic(n)}catch(e){t=e,ms===n&&null!==n&&(ms=n=n.return);continue}break}}function ec(){var e=ds.current;return ds.current=Qi,null===e?Qi:e}function tc(){0!==xs&&3!==xs&&2!==xs||(xs=4),null===gs||0==(268435455&js)&&0==(268435455&Es)||Ks(gs,vs)}function nc(e,t){var n=hs;hs|=2;var r=ec();for(gs===e&&vs===t||Js(e,t);;)try{rc();break}catch(t){Zs(e,t)}if(Va(),hs=n,ds.current=r,null!==ms)throw Error(l(261));return gs=null,vs=0,xs}function rc(){for(;null!==ms;)lc(ms)}function ac(){for(;null!==ms&&!Ye();)lc(ms)}function lc(e){var t=cs(e.alternate,e,bs);e.memoizedProps=e.pendingProps,null===t?ic(e):ms=t,fs.current=null}function ic(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=fo(n,t,bs)))return void(ms=n)}else{if(null!==(n=Mo(n,t)))return n.flags&=32767,void(ms=n);if(null===e)return xs=6,void(ms=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(ms=t);ms=t=e}while(null!==t);0===xs&&(xs=5)}function oc(e,t){var n=bt,r=ps.transition;try{ps.transition=null,bt=1,function(e,t,n){do{sc()}while(null!==As);if(0!=(6&hs))throw Error(l(327));var r=e.finishedWork,a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),l=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~l}}(e,i),e===gs&&(ms=gs=null,vs=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ps||(Ps=!0,gc(tt,(function(){return sc(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=ps.transition,ps.transition=null;var o=bt;bt=1;var s=hs;hs|=4,fs.current=null,function(e,t){if(sr(e=or())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,s=-1,c=-1,u=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(s=o+a),f!==i||0!==r&&3!==f.nodeType||(c=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++u===a&&(s=o),p===i&&++d===r&&(c=o),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(Yr={focusedElem:e,selectionRange:n},Uo=t;null!==Uo;)if(e=(t=Uo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Uo=e;else for(;null!==Uo;){t=Uo;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:break;case 1:if(null!==g){var m=g.memoizedProps,v=g.memoizedState,b=t.stateNode,y=b.getSnapshotBeforeUpdate(t.elementType===t.type?m:Da(t.type,m),v);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var x=t.stateNode.containerInfo;if(1===x.nodeType)x.textContent="";else if(9===x.nodeType){var k=x.body;null!=k&&(k.textContent="")}break;case 5:case 6:case 4:case 17:break;default:throw Error(l(163))}}catch(e){uc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Uo=e;break}Uo=t.return}g=Wo,Wo=!1}(e,r),function(e,t){for(Uo=t;null!==Uo;){var n=(t=Uo).deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{ts(e,a,t);var l=a.alternate;null!==l&&(l.return=null),a.return=null}catch(e){uc(a,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Uo=n;else for(;null!==Uo;){t=Uo;try{var i=t.flags;if(32&i&&fe(t.stateNode,""),512&i){var o=t.alternate;if(null!==o){var s=o.ref;null!==s&&("function"==typeof s?s(null):s.current=null)}}if(8192&i)switch(t.tag){case 13:if(null!==t.memoizedState){var c=t.alternate;null!==c&&null!==c.memoizedState||(Cs=qe())}break;case 22:var u=null!==t.memoizedState,d=t.alternate,f=null!==d&&null!==d.memoizedState;e:{a=u;for(var p=null,h=r=n=t;;){if(5===h.tag){if(null===p){p=h;var g=h.stateNode;if(a){var m=g.style;"function"==typeof m.setProperty?m.setProperty("display","none","important"):m.display="none"}else{var v=h.stateNode,b=h.memoizedProps.style,y=null!=b&&b.hasOwnProperty("display")?b.display:null;v.style.display=ge("display",y)}}}else if(6===h.tag)null===p&&(h.stateNode.nodeValue=a?"":h.memoizedProps);else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===r)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===r)break;for(;null===h.sibling;){if(null===h.return||h.return===r)break e;p===h&&(p=null),h=h.return}p===h&&(p=null),h.sibling.return=h.return,h=h.sibling}}if(u&&!f&&0!=(1&n.mode)){Uo=n;for(var x=n.child;null!==x;){for(n=Uo=x;null!==Uo;){var k=(r=Uo).child;switch(r.tag){case 0:case 11:case 14:case 15:$o(4,r,r.return);break;case 1:Ho(r,r.return);var j=r.stateNode;if("function"==typeof j.componentWillUnmount){var E=r.return;try{j.props=r.memoizedProps,j.state=r.memoizedState,j.componentWillUnmount()}catch(e){uc(r,E,e)}}break;case 5:Ho(r,r.return);break;case 22:if(null!==r.memoizedState){os(n);continue}}null!==k?(k.return=r,Uo=k):os(n)}x=x.sibling}}}switch(4102&i){case 2:Jo(t),t.flags&=-3;break;case 6:Jo(t),t.flags&=-3,ns(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,ns(t.alternate,t);break;case 4:ns(t.alternate,t)}}catch(e){uc(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Uo=n;break}Uo=t.return}}}(e,r),cr(Yr),Yr=null,e.current=r,as(r,e,a),Xe(),hs=s,bt=o,ps.transition=i}else e.current=r;if(Ps&&(Ps=!1,As=e,Ls=a),0===(i=e.pendingLanes)&&(Rs=null),function(e){if(lt&&"function"==typeof lt.onCommitFiberRoot)try{lt.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Vs(e,qe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Ns)throw Ns=!1,e=Is,Is=null,e;0!=(1&Ls)&&0!==e.tag&&sc(),0!=(1&(i=e.pendingLanes))?e===Fs?_s++:(_s=0,Fs=e):_s=0,Fa()}(e,t,n)}finally{ps.transition=r,bt=n}return null}function sc(){if(null!==As){var e=yt(Ls),t=ps.transition,n=bt;try{if(ps.transition=null,bt=16>e?16:e,null===As)var r=!1;else{if(e=As,As=null,Ls=0,0!=(6&hs))throw Error(l(331));var a=hs;for(hs|=4,Uo=e.current;null!==Uo;){var i=Uo,o=i.child;if(0!=(16&Uo.flags)){var s=i.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Uo=u;null!==Uo;){var d=Uo;switch(d.tag){case 0:case 11:case 15:$o(8,d,i)}var f=d.child;if(null!==f)f.return=d,Uo=f;else for(;null!==Uo;){var p=(d=Uo).sibling,h=d.return;if(Yo(d),d===u){Uo=null;break}if(null!==p){p.return=h,Uo=p;break}Uo=h}}}var g=i.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var v=m.sibling;m.sibling=null,m=v}while(null!==m)}}Uo=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,Uo=o;else e:for(;null!==Uo;){if(0!=(2048&(i=Uo).flags))switch(i.tag){case 0:case 11:case 15:$o(9,i,i.return)}var b=i.sibling;if(null!==b){b.return=i.return,Uo=b;break e}Uo=i.return}}var y=e.current;for(Uo=y;null!==Uo;){var x=(o=Uo).child;if(0!=(2064&o.subtreeFlags)&&null!==x)x.return=o,Uo=x;else e:for(o=y;null!==Uo;){if(0!=(2048&(s=Uo).flags))try{switch(s.tag){case 0:case 11:case 15:Go(9,s)}}catch(e){uc(s,s.return,e)}if(s===o){Uo=null;break e}var k=s.sibling;if(null!==k){k.return=s.return,Uo=k;break e}Uo=s.return}}if(hs=a,Fa(),lt&&"function"==typeof lt.onPostCommitFiberRoot)try{lt.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,ps.transition=t}}return!1}function cc(e,t,n){Za(e,t=ao(0,t=Ji(n,t),1)),t=zs(),null!==(e=Hs(e,1))&&(mt(e,1,t),Vs(e,t))}function uc(e,t,n){if(3===e.tag)cc(e,e,n);else for(;null!==t;){if(3===t.tag){cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Rs||!Rs.has(r))){Za(t,e=lo(t,e=Ji(n,e),1)),e=zs(),null!==(t=Hs(t,1))&&(mt(t,1,e),Vs(t,e));break}}t=t.return}}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=zs(),e.pingedLanes|=e.suspendedLanes&n,gs===e&&(vs&n)===n&&(4===xs||3===xs&&(130023424&vs)===vs&&500>qe()-Cs?Js(e,0):ws|=n),Vs(e,t)}function fc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=zs();null!==(e=Hs(e,t))&&(mt(e,t,n),Vs(e,n))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),fc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(t),fc(e,n)}function gc(e,t){return Ke(e,t)}function mc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function vc(e,t,n,r){return new mc(e,t,n,r)}function bc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function yc(e,t){var n=e.alternate;return null===n?((n=vc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function xc(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)bc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case E:return kc(n.children,a,i,t);case w:o=8,a|=8;break;case T:return(e=vc(12,n,t,2|a)).elementType=T,e.lanes=i,e;case N:return(e=vc(13,n,t,a)).elementType=N,e.lanes=i,e;case I:return(e=vc(19,n,t,a)).elementType=I,e.lanes=i,e;case A:return jc(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:o=10;break e;case C:o=9;break e;case O:o=11;break e;case R:o=14;break e;case P:o=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=vc(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function kc(e,t,n,r){return(e=vc(7,e,r,t)).lanes=n,e}function jc(e,t,n,r){return(e=vc(22,e,r,t)).elementType=A,e.lanes=n,e.stateNode={},e}function Ec(e,t,n){return(e=vc(6,e,null,t)).lanes=n,e}function wc(e,t,n){return(t=vc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Tc(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Sc(e,t,n,r,a,l,i,o,s){return e=new Tc(e,t,n,o,s),1===t?(t=1,!0===l&&(t|=8)):t=0,l=vc(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},Xa(l),e}function Cc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:j,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Oc(e){if(!e)return ka;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Sa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(l(171))}if(1===e.tag){var n=e.type;if(Sa(n))return Na(e,n,t)}return t}function Nc(e,t,n,r,a,l,i,o,s){return(e=Sc(n,r,!0,e,0,l,0,o,s)).context=Oc(null),n=e.current,(l=Ja(r=zs(),a=Bs(n))).callback=null!=t?t:null,Za(n,l),e.current.lanes=a,mt(e,a,r),Vs(e,r),e}function Ic(e,t,n,r){var a=t.current,l=zs(),i=Bs(a);return n=Oc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ja(l,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),Za(a,t),null!==(e=Us(a,i,l))&&el(e,a,i),i}function Rc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Pc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ac(e,t){Pc(e,t),(e=e.alternate)&&Pc(e,t)}cs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ea.current)ho=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ho=!1,function(e,t,n){switch(t.tag){case 3:wo(t),Ll();break;case 5:Yl(t);break;case 1:Sa(t.type)&&Ia(t);break;case 4:Kl(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(za,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ql,1&ql.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Oo(e,t,n):(xa(ql,1&ql.current),null!==(e=Fo(e,t,n))?e.sibling:null);xa(ql,1&ql.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return _o(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ql,ql.current),r)break;return null;case 22:case 23:return t.lanes=0,yo(e,t,n)}return Fo(e,t,n)}(e,t,n);ho=0!=(131072&e.flags)}else ho=!1,Sl&&0!=(1048576&t.flags)&&kl(t,hl,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Ta(t,ja.current);Ga(t,n),a=pi(null,t,r,e,a,n);var i=hi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Sa(r)?(i=!0,Ia(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Xa(t),a.updater=il,t.stateNode=a,a._reactInternals=t,ul(t,r,e,n),t=Eo(null,t,r,!0,i,n)):(t.tag=0,Sl&&i&&jl(t),go(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return bc(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===R)return 14}return 2}(r),e=Da(r,e),a){case 0:t=ko(null,t,r,e,n);break e;case 1:t=jo(null,t,r,e,n);break e;case 11:t=mo(null,t,r,e,n);break e;case 14:t=vo(null,t,r,Da(r.type,e),n);break e}throw Error(l(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,ko(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 1:return r=t.type,a=t.pendingProps,jo(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 3:e:{if(wo(t),null===e)throw Error(l(387));r=t.pendingProps,a=(i=t.memoizedState).element,qa(e,t),nl(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:o.cache,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=To(e,t,r,n,a=Error(l(423)));break e}if(r!==a){t=To(e,t,r,n,a=Error(l(424)));break e}for(Tl=ra(t.stateNode.containerInfo.firstChild),wl=t,Sl=!0,Cl=null,n=Ul(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Ll(),r===a){t=Fo(e,t,n);break e}go(e,t,r,n)}t=t.child}return t;case 5:return Yl(t),null===e&&Rl(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,Xr(r,a)?o=null:null!==i&&Xr(r,i)&&(t.flags|=32),xo(e,t),go(e,t,o,n),t.child;case 6:return null===e&&Rl(t),null;case 13:return Oo(e,t,n);case 4:return Kl(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bl(t,null,r,n):go(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,mo(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 7:return go(e,t,t.pendingProps,n),t.child;case 8:case 12:return go(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value,xa(za,r._currentValue),r._currentValue=o,null!==i)if(nr(i.value,o)){if(i.children===a.children&&!Ea.current){t=Fo(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){o=i.child;for(var c=s.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ja(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),$a(i.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(l(341));o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),$a(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}go(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ga(t,n),r=r(a=Ka(a)),t.flags|=1,go(e,t,r,n),t.child;case 14:return a=Da(r=t.type,t.pendingProps),vo(e,t,r,a=Da(r.type,a),n);case 15:return bo(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Da(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Sa(r)?(e=!0,Ia(t)):e=!1,Ga(t,n),sl(t,r,a),ul(t,r,a,n),Eo(null,t,r,!0,e,n);case 19:return _o(e,t,n);case 22:return yo(e,t,n)}throw Error(l(156,t.tag))};var Lc="function"==typeof reportError?reportError:function(e){console.error(e)};function _c(e){this._internalRoot=e}function Fc(e){this._internalRoot=e}function Mc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Dc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function zc(){}function Bc(e,t,n,r,a){var l=n._reactRootContainer;if(l){var i=l;if("function"==typeof a){var o=a;a=function(){var e=Rc(i);o.call(e)}}Ic(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var l=r;r=function(){var e=Rc(i);l.call(e)}}var i=Nc(t,r,e,0,null,!1,0,"",zc);return e._reactRootContainer=i,e[sa]=i.current,Mr(8===e.nodeType?e.parentNode:e),Xs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=Rc(s);o.call(e)}}var s=Sc(e,0,!1,null,0,!1,0,"",zc);return e._reactRootContainer=s,e[sa]=s.current,Mr(8===e.nodeType?e.parentNode:e),Xs((function(){Ic(t,s,n,r)})),s}(n,t,e,a,r);return Rc(i)}Fc.prototype.render=_c.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Ic(e,t,null,null)},Fc.prototype.unmount=_c.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Xs((function(){Ic(null,e,null,null)})),t[sa]=null}},Fc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&Ft(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),Vs(t,qe()),0==(6&hs)&&(Os=qe()+500,Fa()))}break;case 13:var r=zs();Xs((function(){return Us(e,1,r)})),Ac(e,1)}},kt=function(e){13===e.tag&&(Us(e,134217728,zs()),Ac(e,134217728))},jt=function(e){if(13===e.tag){var t=zs(),n=Bs(e);Us(e,n,t),Ac(e,n)}},Et=function(){return bt},wt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},je=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ga(r);if(!a)throw Error(l(90));K(r),J(r,a)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=Ys,Ne=Xs;var Uc={usingClientEntryPoint:!1,Events:[pa,ha,ga,Se,Ce,Ys]},Hc={findFiberByHostInstance:fa,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Vc={bundleType:Hc.bundleType,version:Hc.version,rendererPackageName:Hc.rendererPackageName,rendererConfig:Hc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:Hc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Wc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Wc.isDisabled&&Wc.supportsFiber)try{at=Wc.inject(Vc),lt=Wc}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Uc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Mc(t))throw Error(l(200));return Cc(e,t,null,n)},t.createRoot=function(e,t){if(!Mc(e))throw Error(l(299));var n=!1,r="",a=Lc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Sc(e,1,!1,null,0,n,0,r,a),e[sa]=t.current,Mr(8===e.nodeType?e.parentNode:e),new _c(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return Xs(e)},t.hydrate=function(e,t,n){if(!Dc(t))throw Error(l(200));return Bc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Mc(e))throw Error(l(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",o=Lc;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Nc(t,null,e,1,null!=n?n:null,a,0,i,o),e[sa]=t.current,Mr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Fc(t)},t.render=function(e,t,n){if(!Dc(t))throw Error(l(200));return Bc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Dc(e))throw Error(l(40));return!!e._reactRootContainer&&(Xs((function(){Bc(null,null,e,!1,(function(){e._reactRootContainer=null,e[sa]=null}))})),!0)},t.unstable_batchedUpdates=Ys,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Dc(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return Bc(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},745:(e,t,n)=>{var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{var r=n(294),a=Symbol.for("react.element"),l=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,l={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)i.call(t,r)&&!s.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===l[r]&&(l[r]=t[r]);return{$$typeof:a,type:e,key:c,ref:u,props:l,_owner:o.current}}t.Fragment=l,t.jsx=c,t.jsxs=c},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function b(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var x=y.prototype=new b;x.constructor=y,g(x,v.prototype),x.isPureReactComponent=!0;var k=Array.isArray,j=Object.prototype.hasOwnProperty,E={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var a,l={},i=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)j.call(t,a)&&!w.hasOwnProperty(a)&&(l[a]=t[a]);var s=arguments.length-2;if(1===s)l.children=r;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];l.children=c}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===l[a]&&(l[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:o,props:l,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function N(e,t,a,l,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s=!1;if(null===e)s=!0;else switch(o){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===l?"."+O(s,0):l,k(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),N(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(s=0,l=""===l?".":l+":",k(e))for(var c=0;c<e.length;c++){var u=l+O(o=e[c],c);s+=N(o,t,a,u,i)}else if("function"==typeof(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=u.call(e),c=0;!(o=e.next()).done;)s+=N(o=o.value,t,a,u=l+O(o,c++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function I(e,t,n){if(null==e)return e;var r=[],a=0;return N(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},A={transition:null},L={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:A,ReactCurrentOwner:E};t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=y,t.StrictMode=l,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),l=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=E.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)j.call(t,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];a.children=s}return{$$typeof:n,type:e.type,key:l,ref:i,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.transition;A.transition={};try{e()}finally{A.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return P.current.useCallback(e,t)},t.useContext=function(e){return P.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return P.current.useDeferredValue(e)},t.useEffect=function(e,t){return P.current.useEffect(e,t)},t.useId=function(){return P.current.useId()},t.useImperativeHandle=function(e,t,n){return P.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return P.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.current.useMemo(e,t)},t.useReducer=function(e,t,n){return P.current.useReducer(e,t,n)},t.useRef=function(e){return P.current.useRef(e)},t.useState=function(e){return P.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return P.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return P.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},294:(e,t,n)=>{e.exports=n(408)},893:(e,t,n)=>{e.exports=n(251)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var o=2*(r+1)-1,s=e[o],c=o+1,u=e[c];if(0>l(s,n))c<a&&0>l(u,s)?(e[r]=u,e[c]=n,r=c):(e[r]=s,e[o]=n,r=o);else{if(!(c<a&&0>l(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,s=o.now();t.unstable_now=function(){return o.now()-s}}var c=[],u=[],d=1,f=null,p=3,h=!1,g=!1,m=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function k(e){if(m=!1,x(e),!g)if(null!==r(c))g=!0,A(j);else{var t=r(u);null!==t&&L(k,t.startTime-e)}}function j(e,n){g=!1,m&&(m=!1,b(S),S=-1),h=!0;var l=p;try{for(x(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!N());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var o=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===r(c)&&a(c),x(n)}else a(c);f=r(c)}if(null!==f)var s=!0;else{var d=r(u);null!==d&&L(k,d.startTime-n),s=!1}return s}finally{f=null,p=l,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,w=!1,T=null,S=-1,C=5,O=-1;function N(){return!(t.unstable_now()-O<C)}function I(){if(null!==T){var e=t.unstable_now();O=e;var n=!0;try{n=T(!0,e)}finally{n?E():(w=!1,T=null)}}else w=!1}if("function"==typeof y)E=function(){y(I)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,P=R.port2;R.port1.onmessage=I,E=function(){P.postMessage(null)}}else E=function(){v(I,0)};function A(e){T=e,w||(w=!0,E())}function L(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,A(j))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var i=t.unstable_now();switch("object"==typeof l&&null!==l?l="number"==typeof(l=l.delay)&&0<l?i+l:i:l=i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:l,expirationTime:o=l+o,sortIndex:-1},l>i?(e.sortIndex=l,n(u,e),null===r(c)&&e===r(u)&&(m?(b(S),S=-1):m=!0,L(k,l-i))):(e.sortIndex=o,n(c,e),g||h||(g=!0,A(j))),e},t.unstable_shouldYield=N,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{e.exports=n(53)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var l=r[e]={exports:{}};return n[e](l,l.exports,a),l.exports}a.m=n,a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".index.js",a.miniCssF=e=>"css/"+(901===e?"sdktest":e)+".css",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="mp_webgl:",a.l=(n,r,l,i)=>{if(e[n])e[n].push(r);else{var o,s;if(void 0!==l)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==t+l){o=d;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,a.nc&&o.setAttribute("nonce",a.nc),o.setAttribute("data-webpack",t+l),o.src=n),e[n]=[r];var f=(t,r)=>{o.onerror=o.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=f.bind(null,o.onerror),o.onload=f.bind(null,o.onload),s&&document.head.appendChild(o)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={901:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var l=new Promise(((n,a)=>r=e[t]=[n,a]));n.push(r[2]=l);var i=a.p+a.u(t),o=new Error;a.l(i,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var l=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;o.message="Loading chunk "+t+" failed.\n("+l+": "+i+")",o.name="ChunkLoadError",o.type=l,o.request=i,r[1](o)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,l,[i,o,s]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);if(s)s(a)}for(t&&t(n);c<i.length;c++)l=i[c],a.o(e,l)&&e[l]&&e[l][0](),e[l]=0},n=self.webpackChunkmp_webgl=self.webpackChunkmp_webgl||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{var e=document.getElementById("filter-panels");e.addEventListener("keyup",(t=>{const n=document.getElementsByClassName("controlPanelHeader");for(const t of n)!e.value||t.textContent.match(new RegExp("".concat(e.value),"i"))?t.parentElement.style.display="block":t.parentElement.style.display="none"}));var t=document.getElementById("status");function n(e,n){var r=n||"";t.className="Error: "===e?"error":"",document.querySelector("#status span").textContent=e+n,"Error: "===e&&console.warn(r)}function r(e){n("Error: ",e)}function l(e){n("OK: ",e)}function i(){n("Working ...")}function o(e){for(;e.lastChild;)e.removeChild(e.lastChild)}function s(e,t){console.log("SHOWCASE IS CONNECTED"),function(e){const t=document.getElementById("mattertag-selector");(function(e,t){var n={},r=document.getElementById("tag-lock-bb"),a=document.getElementById("tag-lock-nav");function l(){var e=n[t.value];return e||(e={billboard:!0,navigation:!0}),n[t.value]=e,e}function i(){var n=l();n.billboard=r.checked,n.navigation=a.checked,e.Mattertag.preventAction(t.value,{opening:!n.billboard,navigating:!n.navigation})}t.addEventListener("change",(function(){var e=l();r.checked=e.billboard,a.checked=e.navigation})),r.addEventListener("change",i),a.addEventListener("change",i)})(e,t),document.getElementById("tag-add").addEventListener("click",function(){const t=document.getElementById("tag-add-title"),n=document.getElementById("tag-add-desc"),r=document.getElementById("tag-add-pos-x"),a=document.getElementById("tag-add-pos-y"),l=document.getElementById("tag-add-pos-z"),i=document.getElementById("tag-add-norm-x"),o=document.getElementById("tag-add-norm-y"),s=document.getElementById("tag-add-norm-z"),c=document.getElementById("tag-add-mtype"),u=document.getElementById("tag-add-msrc");return function(){e.Mattertag.add({label:t.value,description:n.value,anchorPosition:{x:parseFloat(r.value),y:parseFloat(a.value),z:parseFloat(l.value)},stemVector:{x:parseFloat(i.value),y:parseFloat(o.value),z:parseFloat(s.value)},media:""===c.value?void 0:{type:c.value,src:u.value}})}}()),document.getElementById("tag-move").addEventListener("click",function(){const n=document.getElementById("tag-move-pos-x"),r=document.getElementById("tag-move-pos-y"),a=document.getElementById("tag-move-pos-z"),l=document.getElementById("tag-move-norm-x"),i=document.getElementById("tag-move-norm-y"),o=document.getElementById("tag-move-norm-z");return function(){e.Mattertag.editPosition(t.value,{anchorPosition:{x:parseFloat(n.value),y:parseFloat(r.value),z:parseFloat(a.value)},stemVector:{x:parseFloat(l.value),y:parseFloat(i.value),z:parseFloat(o.value)}})}}()),document.getElementById("mattertag-remove").addEventListener("click",(function(){e.Mattertag.remove(t.value)}));var n=document.getElementsByClassName("mtag-media-type");for(const t of n){o(t);var a=document.createElement("option");for(var s in a.value="",a.text="(select)",t.appendChild(a),e.Mattertag.MediaType){var c=document.createElement("option");c.value=e.Mattertag.MediaType[s],c.text=s,t.appendChild(c)}}document.getElementById("mattertag-edit").addEventListener("click",(f=document.getElementById("tag-edit-title"),p=document.getElementById("tag-edit-media"),h=document.getElementById("tag-edit-desc"),g=document.getElementById("tag-edit-mediatype"),function(){i(),e.Mattertag.editBillboard(t.value,{label:f.value||void 0,description:h.value||void 0,media:""!==g.value?{src:p.value,type:g.value}:void 0}).then((function(){var e=t.options[t.selectedIndex].innerText;l("edited [".concat(e,"], (SID=").concat(t.value,")"))}),(function(e){r(e)}))})),document.getElementById("tag-edit-color").addEventListener("click",function(){const n=document.getElementById("tag-color-r"),r=document.getElementById("tag-color-g"),a=document.getElementById("tag-color-b");return function(){e.Mattertag.editColor(t.value,{r:parseFloat(n.value),g:parseFloat(r.value),b:parseFloat(a.value)})}}()),document.getElementById("tag-edit-stem").addEventListener("click",function(){const n=document.getElementById("stem-height"),r=document.getElementById("stem-visible");return function(){const a=parseFloat(n.value),l=r.checked;e.Mattertag.editStem(t.value,{stemHeight:a,stemVisible:l})}}()),document.getElementById("mattertag-opacity-edit").addEventListener("click",function(){const n=document.getElementById("mattertag-opacity");return function(){e.Mattertag.editOpacity(t.value,parseFloat(n.value))}}()),document.getElementById("injectHTML").addEventListener("click",function(){const n=document.getElementById("mattertag-html-w"),r=document.getElementById("mattertag-html-h"),a=document.getElementById("injectedHTML");return function(){e.Mattertag.injectHTML(t.value,a.value,{globalVariableMap:{on:"on",off:"off",send:"send",tag:"tag"},size:{w:n.value||0,h:r.value||0}}).then((function(e){function t(){let e="";for(let t=0;t<6;++t)e+=Math.floor(16*Math.random()).toString(16);return"#"+e}e.on("click",(function(n){console.log("page received",n);const r=t();e.send("update.button",r,r.toString())}))}))}}()),document.getElementById("navigateToTag").addEventListener("click",(u=document.getElementById("mattertag-navigation-type"),d=document.getElementById("mattertag-navigation-force"),function(){i(),e.Mattertag.navigateToTag(t.value,e.Mattertag.Transition[u.value],d.checked).then((function(e){l("moved to ["+t.options[t.selectedIndex].innerText+"], (SID="+t.value+")")}),(function(e){r(e)}))}));var u,d;var f,p,h,g}(e);const n={},a=document.getElementsByClassName("sweep-selector");var s;[].slice.call(a).forEach((function(t){o(t),e.Sweep.data.subscribe({onAdded(e,t){n[e]=t},onRemoved(e){delete n[e]},onCollectionUpdated(e){if(!t.hasChildNodes())for(const r in e){var n=document.createElement("option");n.value=r,n.text=r,t.appendChild(n)}}})}));var c,u,d,f,p,h,g,m,v,b,y,x,k,j={};e.Mattertag.data.subscribe({onCollectionUpdated(e){j=e}}),e.on(e.Model.Event.MODEL_LOADED,(function(e){l("Model successfully loaded")})).on(e.Mode.Event.CHANGE_START,(function(e,t){l("moved to mode: "+t+" from "+e)})).on(e.Camera.Event.MOVE,(function(e){s=e})).on(e.Mattertag.Event.CLICK,(function(n){var r=j[n],a={},l={};e.Mattertag.getDiscPosition(r,a),e.Conversion.worldToScreen(a,s,{w:t.clientWidth,h:t.clientHeight},l),console.log("clicked",n),console.log("with a world position of",a),console.log("and a screen position of",l)})),[].slice.call(document.querySelectorAll(".navButton")).forEach((function(t){t.addEventListener("click",(function(t){var n=this.getAttribute("data-direction");i(),e.Camera.moveInDirection(e.Camera.Direction[n]).then((function(e){l(e)}),(function(e){r(e)}))}))})),document.getElementById("pan").addEventListener("click",(c=document.getElementById("positionX"),u=document.getElementById("positionZ"),function(t){i(),e.Camera.pan({x:parseFloat(c.value)||0,z:parseFloat(u.value)||0}).then((function(e){l("Camera.pan complete")}),(function(e){r(e)}))})),[document.getElementById("tiltUp"),document.getElementById("tiltDown"),document.getElementById("rotateLeft"),document.getElementById("rotateRight")].forEach((function(t){var n=document.getElementById("rotation");t.addEventListener("click",(function(t){var a=this.getAttribute("data-direction");i(),e.Camera.rotateInDirection(e.Camera.Direction[a],parseFloat(n.value)).then((function(e){l("Rotation complete: ")}),(function(e){r(e)}))}))})),e.Camera.rotateInDirection=function(t,n){return e.Camera.rotate(t===e.Camera.Direction.RIGHT?n:t===e.Camera.Direction.LEFT?-n:0,t===e.Camera.Direction.UP?n:t===e.Camera.Direction.DOWN?-n:0)},document.getElementById("freeRotate").addEventListener("click",(d=document.getElementById("rotationX"),f=document.getElementById("rotationY"),p=document.getElementById("rotationSpeed"),function(t){var n=d.value||0,a=f.value||0;i(),e.Camera.rotate(parseFloat(n),parseFloat(a),{speed:parseFloat(p.value)}).then((function(e){l("Free rotation complete:")}),(function(e){r(e)}))})),document.getElementById("orient").addEventListener("click",function(){var t=document.getElementById("rotationX"),n=document.getElementById("rotationY"),a=document.getElementById("rotationSpeed");return function(o){var s=t.value||0,c=n.value||0;i(),e.Camera.setRotation({x:parseFloat(s),y:parseFloat(c)},{speed:parseFloat(a.value)}).then((function(e){l(" Orient complete: ")}),(function(e){r(e)}))}}()),[].slice.call(document.querySelectorAll(".modeButton")).forEach((function(t){t.addEventListener("click",(function(t){var n=document.getElementById("modeStyles"),a=e.Mode.TransitionType[n.value],o=this.getAttribute("id");i(),e.Mode.moveTo(e.Mode.Mode[o],{transition:a}).then((function(e){l(e)}),(function(e){r(e)}))}))})),document.getElementById("moveToSweep").addEventListener("click",(h=document.getElementById("sweepIds"),g=document.getElementById("flyStyles"),m=document.getElementById("sweepRotationX"),v=document.getElementById("sweepRotationY"),b=document.getElementById("sweepTransitionTime"),function(t){var n=h.value,a=e.Sweep.Transition[g.value],o={x:m.value||0,y:v.value||0},s=b.value;i(),e.Sweep.moveTo(n,{rotation:o,transition:a,transitionTime:s}).then((function(e){l("moved to sweep "+e)}),(function(e){r(e)}))})),document.getElementById("getPose").addEventListener("click",(y=null,x=document.getElementById("pose"),function(){y?(y.cancel(),y=null):y=e.Camera.pose.subscribe({onChanged:function(e){x.innerText=JSON.stringify(e)}})})),document.getElementById("screenshot").addEventListener("click",(k=document.getElementById("screenshot-preview"),function(t){e.Renderer.takeScreenShot(void 0,{mattertags:!1}).then((function(e){k.setAttribute("src",e)}))})),document.getElementById("equirectangle").addEventListener("click",function(){var t=document.getElementById("screenshot-preview");return function(n){e.Renderer.takeEquirectangular().then((function(e){t.setAttribute("src",e)}))}}()),e.Sweep.current.subscribe((function(e){""===e.sid?console.log("Not currently stationed at a sweep position"):console.log(e)})),function(e){e.Mattertag.data.subscribe(function(){var e=[].slice.call(document.getElementsByClassName("mattertag-selector"));e.forEach((function(e){for(;e.lastChild;)e.removeChild(e.lastChild)}));var t={};function n(e){var t=document.createElement("option");return t.value=e.sid,t.text=e.label||"(no label)",t}return{onAdded(r,a){e.forEach((function(e){var l=n(a);t[r]=t[r]||[],t[r].push(l);let i=e.firstChild;for(;i&&l.text.localeCompare(i.text)>0;)i=i.nextSibling;e.insertBefore(l,i)}))},onRemoved(e){(t[e]||[]).forEach((function(e){e.parentElement.removeChild(e)})),delete t[e]},onUpdated(e,n){(t[e]||[]).forEach((function(e){e.text=n.label}))}}}())}(e),document.getElementById("tourStartBtn").addEventListener("click",(function(){e.Tour.start()})),document.getElementById("tourStopBtn").addEventListener("click",(function(){e.Tour.stop()})),document.getElementById("tourPrevBtn").addEventListener("click",(function(){e.Tour.prev()})),document.getElementById("tourNextBtn").addEventListener("click",(function(){e.Tour.next()})),document.getElementById("tourSteppedBtn").addEventListener("click",(function(){var t=document.getElementById("tour-stepped");e.Tour.step(parseInt(t.value,10))}));var E,w,T=null;document.getElementById("getPointer").addEventListener("click",(function(){var t=document.getElementById("pointer");T?(T.cancel(),T=null):T=e.Pointer.intersection.subscribe((function(e){t.innerText=JSON.stringify(e)}))})),e.Camera.zoom.subscribe((E=document.getElementById("current-zoom-level"),function(e){E.innerText=e.level.toFixed(5)})),document.getElementById("zoom-by").addEventListener("click",(w=document.getElementById("zoom-by-val"),function(){e.Camera.zoomBy(w.value).then((function(e){l("Zoomed by "+w.value+" to "+e)}))})),document.getElementById("zoom-to").addEventListener("click",function(){var t=document.getElementById("zoom-to-val");return function(){e.Camera.zoomTo(t.value).then((function(e){l("Zoomed to "+e)}))}}()),document.getElementById("zoom-reset").addEventListener("click",(function(){e.Camera.zoomReset().then((function(){l("reset zoom")}))})),function(e,t){var n=document.getElementById("sweep-enable-selector"),r={},a=document.getElementById("sweep-enable");function l(){r[n.value]=a.checked,a.checked?e.Sweep.enable(n.value):e.Sweep.disable(n.value)}n.addEventListener("change",(function(){var e=t[n.value].enabled;a.checked=e})),a.addEventListener("change",l)}(e,n)}var c=a(893),u=a(745),d=a(294);class f extends d.Component{constructor(e){super(e),this.optionMap=new Map,this.onChanged=e=>this.onValueChanged(e),this.state={availableOptions:this.optionMap,selected:""},this.selectRef=(0,d.createRef)()}componentDidMount(){if(!this.subscription){const e=this;this.subscription=this.props.collection.subscribe({onAdded(t,n){e.props.filter&&!e.props.filter(n)||e.optionMap.set(t,n)},onRemoved(t){e.optionMap.delete(t)},onUpdated(t,n){!e.props.filter||e.props.filter(n)?e.optionMap.set(t,n):e.optionMap.delete(t)},onCollectionUpdated(t){e.setState((n=>{const r=t[n.selected]?n.selected:Object.keys(t)[0];return e.props.onChanged&&(r?e.props.onChanged(r,e.optionMap.get(r)):e.props.onChanged("",void 0)),{availableOptions:new Map(e.optionMap),selected:void 0!==r?r:""}}))}})}}componentWillUnmount(){this.subscription&&this.subscription.cancel()}onValueChanged(e){if(this.setState({selected:e.currentTarget.value}),this.props.onChanged){const t=e.target.value;this.props.onChanged(t,this.optionMap.get(t))}}render(){const e=[...this.state.availableOptions.entries()].sort((([,e],[,t])=>this.props.sort?this.props.sort(e,t):0));return(0,c.jsx)("select",Object.assign({ref:this.selectRef,className:"collection-selector",onChange:this.onChanged,value:this.state.selected},{children:e.length>0?this.renderOptions(e):(0,c.jsx)("option",Object.assign({value:""},{children:"(no values)"}))}))}renderOptions(e){return e.map((([e,t])=>(0,c.jsx)("option",Object.assign({value:e,title:this.props.hoverLabel&&this.props.hoverLabel(t)},{children:this.props.optionLabel?this.props.optionLabel(t):e}),e)))}}const p={overflowY:"auto"};function h(e){return(0,c.jsxs)("div",Object.assign({style:p,className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:e.header})),e.children]}))}function g(e){const[t,n]=(0,d.useState)(),r=(0,d.useCallback)(((t,r)=>{var a,l;if(r){const a=Object.assign({},r);(e.additionalProperties||[]).forEach((function(e){a[e]=r[e]})),n(a),null===(l=e.onChanged)||void 0===l||l.call(e,t,r)}else n(null),null===(a=e.onChanged)||void 0===a||a.call(e,"",void 0)}),[e]);return(0,c.jsxs)(h,Object.assign({header:`${e.label} - Selector`},{children:[(0,c.jsxs)("div",{children:[e.label+":",(0,c.jsx)(f,{collection:e.collection,onChanged:r,sort:e.sort,optionLabel:e.optionLabel,hoverLabel:e.hoverLabel})]}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:t?function(t){const n=Object.assign({},t);if(e.propertyTransforms){const r=e.propertyTransforms;for(const[e,a]of Object.entries(r))n[e]=a(t[e])}return JSON.stringify(n)}(t):""})})]}))}var m=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function v(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)(((t,n)=>m(this,void 0,void 0,(function*(){yield e.sdk.Asset.registerTexture(t,n),e.onRegister(t,n)}))),[e]),a=(0,d.useCallback)((()=>m(this,void 0,void 0,(function*(){t.current&&n.current&&r(t.current.value,n.current.value)}))),[r]);return(0,d.useEffect)((()=>{const e={Chrome:"images/chrome.png",Firefox:"images/firefox.png",Edge:"images/edge.png"};for(const t in e)r(t,e[t])}),[]),(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"asset-id"},{children:"id: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"asset-id",type:"string"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"asset-src"},{children:"src: "})),(0,c.jsx)("input",{ref:n,className:"small-input",id:"asset-src",type:"string"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"asset-register",onClick:a},{children:"Register"}))})]})}const b=new class{constructor(){this.observers=new Set,this.assets={*[Symbol.iterator](){for(const e in this.assets)yield[e,this.assets[e]]}}}subscribe(e){return this.observers.add(e),{cancel:()=>{this.observers.delete(e)}}}add(e,t){var n,r;this.assets[e]=t;for(const a of this.observers)null===(n=a.onAdded)||void 0===n||n.call(a,e,t,this.assets),null===(r=a.onCollectionUpdated)||void 0===r||r.call(a,this.assets)}};function y(e){const t=(0,d.useCallback)(((t,n)=>{e.setAssets((e=>Object.assign(Object.assign({},e),{[t]:n}))),b.add(t,{id:t,src:n})}),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(g,{collection:b,label:"Asset",onChanged:e.setSelectedAsset}),(0,c.jsx)(h,Object.assign({header:"Asset - Register"},{children:(0,c.jsx)(v,{sdk:e.sdk,onRegister:t})}))]})}var x=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function k(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useCallback)((t=>{!function(){var t,i,o;x(this,void 0,void 0,(function*(){if(!r.current||!a.current||!l.current)return;const s=e.sdk,c=null===(t=r.current)||void 0===t?void 0:t.value,u=null===(i=a.current)||void 0===i?void 0:i.value,d=null===(o=l.current)||void 0===o?void 0:o.value;if(!c||!u||!d)return;let f=null;yield s.Camera.pose.waitUntil((function(e){return f=e,!0}));const p=document.getElementById("showcase"),h={w:p.clientWidth,h:p.clientHeight};try{const t=yield e.sdk.Conversion.worldToScreen({x:parseFloat(c),y:parseFloat(u),z:parseFloat(d)},f,h);t.x=Math.trunc(t.x),t.y=Math.trunc(t.y),n(`success x:${t.x} y:${t.y}`)}catch(e){n("error")}}))}()}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:i},{children:"worldToScreen"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"conversion-worldtoscreen-x",className:"small-input",placeholder:"x",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"conversion-worldtoscreen-y",className:"small-input",placeholder:"y",ref:a})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"conversion-worldtoscreen-z",className:"small-input",placeholder:"z",ref:l})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"settings-update-message"},{children:t}))}))})]})}function j(e){return(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Conversion"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(k,{sdk:e.sdk})})})]}))}var E=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const w={height:50};function T(e){const[t,n]=(0,d.useState)(null),r=(0,d.useCallback)((()=>E(this,void 0,void 0,(function*(){const t=yield e.sdk.Floor.getData();n(t)}))),[]),a=JSON.stringify(t);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("textarea",{rows:3,style:w,value:a,readOnly:!0})}))]})}var S=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function C(e){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)(!1),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useCallback)((t=>S(this,void 0,void 0,(function*(){if(!l.current||!i.current)return;let t;try{const n=parseInt(l.current.value,10);let a;if(r)a=yield e.sdk.Floor.moveTo(n);else{const t=i.current.checked;a=yield e.sdk.Floor.moveTo(n,t)}t=`Moved to floor index ${a}`}catch(e){t=`Error ${e}`}n(t)}))),[]),s=(0,d.useCallback)((()=>{a(!0)}),[]),u=r?"Move camera(set)":"Move camera(unset)";return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:o},{children:"moveTo"}))})),(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("input",{type:"number",id:"floor-moveto-index",className:"small-input",placeholder:"index",ref:l})})),(0,c.jsxs)("td",Object.assign({colSpan:1},{children:[(0,c.jsx)("div",{children:u}),(0,c.jsx)("input",{id:"floor-moveto-movecamera",type:"checkbox",ref:i,defaultChecked:!0,onChange:s})]}))]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("div",Object.assign({id:"settings-get-message"},{children:t}))}))})]})}var O=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function N(e){const t=(0,d.useCallback)((t=>O(this,void 0,void 0,(function*(){yield e.sdk.Floor.showAll()}))),[]);return(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:t},{children:"showAll"}))}))})}const I={height:5};function R(){return(0,c.jsx)("tr",{style:I})}const P={width:"200px",borderWidth:1,borderStyle:"solid",borderColor:"lightgray"},A={maxWidth:20},L={padding:2,height:"50%",overflow:"scroll"},_={backgroundColor:"rgba(239, 239, 239, 0.3)"};function F(e){const[t,n]=(0,d.useState)([]),[r,a]=(0,d.useState)(!1),l=(0,d.useRef)(null);(0,d.useRef)().current=t;const i=(0,d.useCallback)((function(){const t=function(e,t,r){const a={checked:!1,type:e,payload:t};n((e=>[...e,a]))};return e.collection.subscribe({onAdded:(e,n)=>{t("onAdded",n)},onRemoved:(e,n)=>{t("onRemoved",n)},onUpdated:(e,n)=>{t("onUpdated",n)},onCollectionUpdated:e=>{t("onCollectionUpdated",e)}})}),[e.collection]),o=(0,d.useCallback)((e=>{const{currentTarget:t}=e;t.checked?(n([]),l.current=i()):(l.current.cancel(),l.current=null),a(t.checked)}),[i]),s=(0,d.useCallback)((function(e){const r=parseInt(e.currentTarget.value,10),a=[...t];a[r].checked=e.currentTarget.checked,n(a)}),[t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:["Collection: ",e.name]}),(0,c.jsxs)("div",{children:["subscribe: ",(0,c.jsx)("input",{type:"checkbox",onChange:o})]}),(0,c.jsx)("div",Object.assign({style:r?Object.assign({},P):Object.assign(Object.assign({},P),_)},{children:(0,c.jsx)("ol",Object.assign({style:L},{children:t.map((function(e,t){return(0,c.jsxs)("li",{children:[(0,c.jsx)("input",{type:"checkbox",value:t,onChange:s,style:A}),e.type,(0,c.jsx)("textarea",{rows:3,style:(n=e.checked,{height:32,display:n?"block":"none"}),defaultValue:JSON.stringify(e.payload)})]},t);var n}))}))}))]})}const M={height:50};function D(e){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)(!1),l=(0,d.useRef)(null),i=(0,d.useCallback)((t=>{const{currentTarget:r}=t;r.checked?l.current=e.observable.subscribe({onChanged(e){if(null===e||"object"!=typeof e||Array.isArray(e))n(JSON.stringify(e));else{const t=Object.assign({},e);for(const n of Object.keys(t)){const r=e[n];r instanceof Set&&(t[n]=[...r.values()])}n(JSON.stringify(t))}}}):(l.current.cancel(),l.current=null,n("")),a(r.checked)}),[e.observable]),o=r?t:"not subbed";return(0,c.jsxs)("div",{children:[(0,c.jsxs)("div",{children:["Observable: ",e.name]}),(0,c.jsxs)("div",{children:["subscribe: ",(0,c.jsx)("input",{type:"checkbox",onChange:i})]}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{rows:3,style:M,readOnly:!0,value:o,disabled:!r})})]})}function z(e){const[t,n]=(0,d.useState)([]);(0,d.useEffect)((function(){const r=e.sdk,a=function(e){return function(...r){const a=[];for(const e of r)"object"==typeof e?a.push(JSON.stringify(e)):a.push(e);t.push({checked:!1,type:e,data:a.join(",")}),n([...t])}};for(const t of Object.values(e.enum))r.on(t,a(t))}),[e.sdk,e.enum,t]);const r=(0,d.useCallback)((function(e){const r=parseInt(e.target.value,10),a=[...t];a[r].checked=e.target.checked,n(a)}),[t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Event"}))}))}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("ol",Object.assign({style:{padding:2}},{children:t.map((function(e,t){return(0,c.jsxs)("li",Object.assign({style:{display:"flex",justifyContent:"flex-start"}},{children:[(0,c.jsx)("input",{type:"checkbox",value:t,onChange:r,style:{maxWidth:20}}),e.checked?(0,c.jsx)("textarea",{rows:3,style:{height:30,float:"right"},defaultValue:e.data}):(0,c.jsx)("div",Object.assign({style:{float:"right"}},{children:String(e.type)}))]}),t)}))}))}))})]})}function B(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Floor"},{children:(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(T,{sdk:e.sdk}),(0,c.jsx)(R,{}),(0,c.jsx)(C,{sdk:e.sdk}),(0,c.jsx)(R,{}),(0,c.jsx)(N,{sdk:e.sdk})]})})})),(0,c.jsx)(h,Object.assign({header:"Floor - Current"},{children:(0,c.jsx)(D,{observable:e.sdk.Floor.current,name:"Floor.current"})})),(0,c.jsx)(h,Object.assign({header:"Floor - Collection"},{children:(0,c.jsx)(F,{collection:e.sdk.Floor.data,name:"Floor.data"})})),(0,c.jsx)(h,Object.assign({header:"Floor - Events"},{children:(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(z,{enum:e.sdk.Floor.Event,sdk:e.sdk})})})}))]})}var U=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const H={height:50};function V(e){const[t,n]=(0,d.useState)([]),[r,a]=(0,d.useState)(""),l=(0,d.useCallback)((()=>U(this,void 0,void 0,(function*(){const t=yield e.sdk.Label.getData();n(t),a(t.length>0?t[0].sid:"")}))),[]);let i=(0,c.jsx)("option",Object.assign({value:0,disabled:!0},{children:"(no data)"})),o="";if(t.length>0){i=t.map((e=>(0,c.jsx)("option",Object.assign({value:e.sid},{children:e.sid}),e.sid)));const e=t.findIndex((e=>e.sid===r));if(-1!==e){const n=t[e];o=JSON.stringify(n,null,2)}}const s=(0,d.useCallback)((e=>a(e.target.value)),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("select",Object.assign({value:r,onChange:s},{children:i}))}))]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("textarea",{rows:3,style:H,defaultValue:o})}))})]})}function W(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Label"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Label.Event}),(0,c.jsx)(V,{sdk:e.sdk})]})})]})),(0,c.jsx)(g,{collection:e.sdk.Label.data,label:"Label"})]})}var $,G,K,Q,Y,X,q,J,Z,ee,te,ne,re,ae,le,ie,oe,se,ce,ue,de,fe=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function pe(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>fe(this,void 0,void 0,(function*(){const t=yield e.createLink();n(t)}))),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("button",Object.assign({onClick:r},{children:e.label})),(0,c.jsx)("br",{}),(0,c.jsx)("textarea",{style:{height:"3.5em"},value:t,readOnly:!0})]})}function he(e){const t=Object.keys(q.CreationPolicy).map(((e,t)=>(0,c.jsx)("option",Object.assign({value:q.CreationPolicy[e]},{children:e}),t))),n=(0,d.useCallback)((t=>{const n=t.currentTarget.value;n===q.CreationPolicy.MATTERPORT?e.setPolicy(n):e.setPolicy(n,{includeParams:n===q.CreationPolicy.REFERRER?["apiHost","applicationKey"]:["apiHost"]})}),[e]);return(0,c.jsx)("select",Object.assign({onChange:n},{children:t}))}function ge(e){const t=Object.keys(q.OpenPolicy).map(((e,t)=>(0,c.jsx)("option",Object.assign({value:q.OpenPolicy[e]},{children:e}),t))),n=(0,d.useCallback)((t=>{const n=t.currentTarget.value;e.setPolicy(n,{templateHref:window.location.origin+window.location.pathname+"?${bundleVersion}&${apiHost}&${mds}&${applicationKey}"})}),[e]);return(0,c.jsx)("select",Object.assign({onChange:n},{children:t}))}function me(e){const t=(0,d.useCallback)((t=>{const n="new window"===t.currentTarget.value;e.setPolicy(n)}),[e]);return(0,c.jsxs)("select",Object.assign({onChange:t},{children:[(0,c.jsx)("option",Object.assign({value:"new window"},{children:"NEW WINDOW"})),(0,c.jsx)("option",Object.assign({value:"same window"},{children:"SAME WINDOW"}))]}))}function ve(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Link - Create"})),(0,c.jsx)("label",{children:"Policy:"}),(0,c.jsx)(he,{setPolicy:e.sdk.Link.setShareLinkPolicy}),(0,c.jsx)("br",{}),(0,c.jsx)(pe,{label:"createLink",createLink:e.sdk.Link.createLink}),(0,c.jsx)("br",{}),(0,c.jsx)(pe,{label:"createDeepLink",createLink:e.sdk.Link.createDeepLink})]})),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Link - Set Policy"})),"Opening policies:",(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"Model:"}),(0,c.jsx)("td",{children:(0,c.jsx)(ge,{setPolicy:e.sdk.Link.setModelLinkPolicy})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"Navigation:"}),(0,c.jsx)("td",{children:(0,c.jsx)(ge,{setPolicy:e.sdk.Link.setNavigationLinkPolicy})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"Same Origin:"}),(0,c.jsx)("td",{children:(0,c.jsx)(ge,{setPolicy:e.sdk.Link.setSameOriginLinkPolicy})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:"External:"}),(0,c.jsx)("td",{children:(0,c.jsx)(me,{setPolicy:e.sdk.Link.setExternalLinkPolicy})})]})]})})]}))]})}function be(e){const t=(0,d.useCallback)((()=>{e.sdk.Mattertag.editIcon(e.selectedMattertag,e.selectedAsset)}),[e.sdk.Mattertag,e.selectedAsset,e.selectedMattertag]),n=(0,d.useCallback)((()=>{e.sdk.Mattertag.resetIcon(e.selectedMattertag)}),[e.sdk.Mattertag,e.selectedMattertag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:t},{children:"Edit Icon"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Reset Icon"}))})]})}!function(e){let t,n,r;!function(e){e.PHASE_CHANGE="application.phasechange"}(t=e.Event||(e.Event={})),function(e){e.UNINITIALIZED="appphase.uninitialized",e.WAITING="appphase.waiting",e.LOADING="appphase.loading",e.STARTING="appphase.starting",e.PLAYING="appphase.playing",e.ERROR="appphase.error"}(n=e.Phase||(e.Phase={})),function(e){e.UNKNOWN="application.unknown",e.WEBVR="application.webvr",e.SHOWCASE="application.showcase",e.WORKSHOP="application.workshop"}(r=e.Application||(e.Application={}))}($||($={})),function(e){let t,n,r;!function(e){e.IMAGE="image",e.PDF="pdf",e.VIDEO="video",e.RICH="rich",e.ZIP="zip",e.TEXT="text",e.AUDIO="audio",e.MODEL="model",e.APPLICATION="application"}(t=e.MediaType||(e.MediaType={})),function(e){e.EXTERNAL="external",e.UPLOAD="upload",e.SANDBOX="sandbox"}(n=e.AttachmentCategory||(e.AttachmentCategory={})),function(e){e.COMMENT="comment",e.MATTERTAG="mattertag"}(r=e.ParentType||(e.ParentType={}))}(G||(G={})),function(e){let t,n;!function(e){e.MOVE="camera.move"}(t=e.Event||(e.Event={})),function(e){e.FORWARD="FORWARD",e.LEFT="LEFT",e.RIGHT="RIGHT",e.BACK="BACK",e.UP="UP",e.DOWN="DOWN"}(n=e.Direction||(e.Direction={}))}(K||(K={})),function(e){let t;!function(e){e.CHANGE_START="floors.changestart",e.CHANGE_END="floors.changeend"}(t=e.Event||(e.Event={}))}(Q||(Q={})),function(e){let t;!function(e){e.SUCCESS="astar.status.success",e.NO_PATH="astar.status.no_path",e.TIMEOUT="astar.status.timeout",e.NO_START_VERTEX="astar.status.no_start",e.NO_END_VERTEX="astar.status.no_end"}(t=e.AStarStatus||(e.AStarStatus={}))}(Y||(Y={})),function(e){let t;!function(e){e.POSITION_UPDATED="label.positionupdated"}(t=e.Event||(e.Event={}))}(X||(X={})),function(e){let t,n,r;!function(e){e.WINDOW="link.creationpolicy.window",e.REFERRER="link.creationpolicy.referrer",e.MATTERPORT="link.creationpolicy.matterport"}(t=e.CreationPolicy||(e.CreationPolicy={})),function(e){e.DEFAULT="link.openpolicy.default",e.NEW_WINDOW="link.openpolicy.newwindow",e.SAME_FRAME="link.openpolicy.sameframe",e.CURRENT_WINDOW="link.openpolicy.current"}(n=e.OpenPolicy||(e.OpenPolicy={})),function(e){e.DEFAULT="link.destination.default",e.MATTERPORT="link.destination.matterport"}(r=e.DestinationPolicy||(e.DestinationPolicy={}))}(q||(q={})),function(e){let t,n,r,a,l;!function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(t=e.Transition||(e.Transition={})),function(e){e.NAVIGATION="tag.link.nav",e.MODEL="tag.link.model",e.EXT_LINK="tag.link.ext"}(n=e.LinkType||(e.LinkType={})),function(e){e.NONE="tag.chunk.none",e.TEXT="tag.chunk.text",e.LINK="tag.chunk.link"}(r=e.DescriptionChunkType||(e.DescriptionChunkType={})),function(e){e.HOVER="tag.hover",e.CLICK="tag.click",e.LINK_OPEN="tag.linkopen"}(a=e.Event||(e.Event={})),function(e){e.NONE="mattertag.media.none",e.PHOTO="mattertag.media.photo",e.VIDEO="mattertag.media.video",e.RICH="mattertag.media.rich"}(l=e.MediaType||(e.MediaType={}))}(J||(J={})),function(e){let t,n,r;!function(e){e.INSIDE="mode.inside",e.OUTSIDE="mode.outside",e.DOLLHOUSE="mode.dollhouse",e.FLOORPLAN="mode.floorplan",e.TRANSITIONING="mode.transitioning"}(t=e.Mode||(e.Mode={})),function(e){e.CHANGE_START="viewmode.changestart",e.CHANGE_END="viewmode.changeend"}(n=e.Event||(e.Event={})),function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(r=e.TransitionType||(e.TransitionType={}))}(Z||(Z={})),function(e){let t;!function(e){e.MODEL_LOADED="model.loaded"}(t=e.Event||(e.Event={}))}(ee||(ee={})),function(e){let t;!function(e){e.NONE="intersectedobject.none",e.MODEL="intersectedobject.model",e.TAG="intersectedobject.tag",e.SWEEP="intersectedobject.sweep",e.UNKNOWN="intersectedobject.unknown"}(t=e.Colliders||(e.Colliders={}))}(te||(te={})),ne||(ne={}),function(e){let t,n;!function(e){e.CAMERA="sensor.sensortype.camera"}(t=e.SensorType||(e.SensorType={})),function(e){e.SPHERE="sensor.sourcetype.sphere",e.BOX="sensor.sourcetype.box",e.CYLINDER="sensor.sourcetype.cylinder"}(n=e.SourceType||(e.SourceType={}))}(re||(re={})),function(e){let t,n,r,a;!function(e){e.ENTER="sweep.enter",e.EXIT="sweep.exit"}(t=e.Event||(e.Event={})),function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(n=e.Transition||(e.Transition={})),function(e){e.ALIGNED="aligned",e.UNALIGNED="unaligned"}(r=e.Alignment||(e.Alignment={})),function(e){e.UNPLACED="unplaced",e.AUTO="auto",e.MANUAL="manual"}(a=e.Placement||(e.Placement={}))}(ae||(ae={})),function(e){let t;!function(e){e.UNKNOWN="tag.attachment.unknown",e.APPLICATION="tag.attachment.application",e.AUDIO="tag.attachment.audio",e.IMAGE="tag.attachment.image",e.MODEL="tag.attachment.model",e.PDF="tag.attachment.pdf",e.RICH="tag.attachment.rich",e.TEXT="tag.attachment.text",e.VIDEO="tag.attachment.video",e.ZIP="tag.attachment.zip",e.SANDBOX="tag.attachment.sandbox"}(t=e.AttachmentType||(e.AttachmentType={}))}(le||(le={})),function(e){let t,n;!function(e){e.STARTED="tour.started",e.STOPPED="tour.stopped",e.ENDED="tour.ended",e.STEPPED="tour.stepped"}(t=e.Event||(e.Event={})),function(e){e.INACTIVE="tour.inactive",e.ACTIVE="tour.active",e.STOP_SCHEDULED="tour.stopscheduled"}(n=e.PlayState||(e.PlayState={}))}(ie||(ie={})),function(e){let t,n,r;!function(e){e.OBJ_LOADER="mp.objLoader",e.FBX_LOADER="mp.fbxLoader",e.DAE_LOADER="mp.daeLoader",e.GLTF_LOADER="mp.gltfLoader",e.SCROLLING_TUBE="mp.scrollingTube",e.TRANSFORM_CONTROLS="mp.transformControls",e.LIGHTS_COMPONENT="mp.lights",e.POINT_LIGHT="mp.pointLight",e.DIRECTIONAL_LIGHT="mp.directionalLight",e.AMBIENT_LIGHT="mp.ambientLight",e.CAMERA="mp.camera",e.INPUT="mp.input",e.XR="mp.xr"}(t=e.Component||(e.Component={})),function(e){e.CLICK="INTERACTION.CLICK",e.HOVER="INTERACTION.HOVER",e.DRAG="INTERACTION.DRAG",e.DRAG_BEGIN="INTERACTION.DRAG_BEGIN",e.DRAG_END="INTERACTION.DRAG_END",e.POINTER_MOVE="INTERACTION.POINTER_MOVE",e.POINTER_BUTTON="INTERACTION.POINTER_BUTTON",e.SCROLL="INTERACTION.SCROLL",e.KEY="INTERACTION.KEY",e.LONG_PRESS_START="INTERACTION.LONG_PRESS_START",e.LONG_PRESS_END="INTERACTION.LONG_PRESS_END",e.MULTI_SWIPE="INTERACTION.MULTI_SWIPE",e.MULTI_SWIPE_END="INTERACTION.MULTI_SWIPE_END",e.PINCH="INTERACTION.PINCH",e.PINCH_END="INTERACTION.PINCH_END",e.ROTATE="INTERACTION.ROTATE",e.ROTATE_END="INTERACTION.ROTATE_END"}(n=e.InteractionType||(e.InteractionType={})),function(e){e.INPUT="input",e.OUTPUT="output",e.EVENT="event",e.EMIT="emit"}(r=e.PathType||(e.PathType={}))}(oe||(oe={})),function(e){e[e.BACKSPACE=8]="BACKSPACE",e[e.TAB=9]="TAB",e[e.RETURN=13]="RETURN",e[e.SHIFT=16]="SHIFT",e[e.CONTROL=17]="CONTROL",e[e.ALT=18]="ALT",e[e.ESCAPE=27]="ESCAPE",e[e.SPACE=32]="SPACE",e[e.HASH=35]="HASH",e[e.LEFTARROW=37]="LEFTARROW",e[e.UPARROW=38]="UPARROW",e[e.RIGHTARROW=39]="RIGHTARROW",e[e.DOWNARROW=40]="DOWNARROW",e[e.DELETE=46]="DELETE",e[e.ZERO=48]="ZERO",e[e.ONE=49]="ONE",e[e.TWO=50]="TWO",e[e.THREE=51]="THREE",e[e.FOUR=52]="FOUR",e[e.FIVE=53]="FIVE",e[e.SIX=54]="SIX",e[e.SEVEN=55]="SEVEN",e[e.EIGHT=56]="EIGHT",e[e.NINE=57]="NINE",e[e.AT=64]="AT",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.G=71]="G",e[e.H=72]="H",e[e.I=73]="I",e[e.J=74]="J",e[e.K=75]="K",e[e.L=76]="L",e[e.M=77]="M",e[e.N=78]="N",e[e.O=79]="O",e[e.P=80]="P",e[e.Q=81]="Q",e[e.R=82]="R",e[e.S=83]="S",e[e.T=84]="T",e[e.U=85]="U",e[e.V=86]="V",e[e.W=87]="W",e[e.X=88]="X",e[e.Y=89]="Y",e[e.Z=90]="Z",e[e.SEMICOLON=186]="SEMICOLON",e[e.PLUSEQUALS=187]="PLUSEQUALS",e[e.COMMA=188]="COMMA",e[e.DASHUNDERSCORE=189]="DASHUNDERSCORE",e[e.PERIOD=190]="PERIOD",e[e.OPENBRACKET=219]="OPENBRACKET"}(se||(se={})),function(e){e[e.DOWN=0]="DOWN",e[e.PRESSED=1]="PRESSED",e[e.UP=2]="UP"}(ce||(ce={})),function(e){e[e.PRIMARY=0]="PRIMARY",e[e.MIDDLE=1]="MIDDLE",e[e.SECONDARY=2]="SECONDARY",e[e.BACK=3]="BACK",e[e.FORWARD=4]="FORWARD",e[e.COUNT=5]="COUNT"}(ue||(ue={})),function(e){e[e.NONE=0]="NONE",e[e.PRIMARY=1]="PRIMARY",e[e.SECONDARY=4]="SECONDARY",e[e.MIDDLE=2]="MIDDLE",e[e.BACK=8]="BACK",e[e.FORWARD=16]="FORWARD",e[e.ALL=31]="ALL"}(de||(de={}));var ye=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function xe(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>ye(this,void 0,void 0,(function*(){if(t.current&&n.current){const r=t.current.value,a=n.current.value;yield e.sdk.Mattertag.registerIcon(r,a),e.addAsset(r,a)}}))),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,c.jsx)("label",Object.assign({htmlFor:"mattertag-icon-id"},{children:"id: "}))})),(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,c.jsx)("input",{ref:t,id:"mattertag-icon-id",type:"string"})}))]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,c.jsx)("label",Object.assign({htmlFor:"mattertag-icon-src"},{children:"src: "}))})),(0,c.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,c.jsx)("input",{ref:n,id:"mattertag-icon-src",type:"string"})}))]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Register"}))})]})}function ke(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((function(e){return e.label||"(no label)"}),[]),a=(0,d.useCallback)((function(e,t){return e.label<t.label?-1:e.label>t.label?1:0}),[]),{sdk:l}=e;return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Mattertag - Collection"},{children:(0,c.jsx)(F,{collection:l.Mattertag.data,name:"Mattertags"})})),(0,c.jsx)(g,{label:"Mattertag",collection:l.Mattertag.data,onChanged:n,optionLabel:r,sort:a}),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Mattertag"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(z,{sdk:l,enum:e.sdk.Mattertag.Event})})})]})),(0,c.jsx)(h,Object.assign({header:"Mattertag - Edit Icon"},{children:(0,c.jsx)(be,{sdk:l,selectedMattertag:t,selectedAsset:e.selectedAsset})})),(0,c.jsx)(h,Object.assign({header:"Mattertag - Register Icon"},{children:(0,c.jsx)(xe,{sdk:l,selectedMattertag:t,selectedAsset:e.selectedAsset,addAsset:e.addAsset})}))]})}var je=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Ee={height:50};function we(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>je(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Measurements.getData(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("textarea",{rows:3,style:Ee,value:t,readOnly:!0})}))]})}function Te({sdk:e}){const[t,n]=(0,d.useState)(!1);(0,d.useEffect)((()=>{const t=e.Measurements.mode.subscribe((e=>n(e.active)));return()=>t.cancel()}),[]);const r=(0,d.useCallback)((()=>{e.Measurements.toggleMode(!t)}),[t,e.Measurements]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Toggle"}))}),(0,c.jsxs)("div",{children:["Active: ",(0,c.jsx)("span",{children:String(t)})]})]})}function Se({sdk:e}){return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(g,{collection:e.Measurements.data,label:"Measurements"}),(0,c.jsx)(h,Object.assign({header:"Measurements - Mode"},{children:(0,c.jsx)(D,{name:"mode",observable:e.Measurements.mode})})),(0,c.jsx)(h,Object.assign({header:"Measurements - Toggle"},{children:(0,c.jsx)(Te,{sdk:e})})),(0,c.jsx)(h,Object.assign({header:"Measurements - GetData"},{children:(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(we,{sdk:e})})})}))]})}var Ce=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Oe={height:50};function Ne(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>Ce(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Model.getData(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("textarea",{rows:3,style:Oe,value:t,readOnly:!0})}))]})}var Ie=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Re={height:50};function Pe(e){const[t,n]=(0,d.useState)(""),r=(0,d.useCallback)((()=>Ie(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Model.getDetails(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:1},{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getDetails"}))})),(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("textarea",{rows:3,style:Re,value:t,readOnly:!0})}))]})}function Ae(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Model"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(Ne,{sdk:e.sdk}),(0,c.jsx)(Pe,{sdk:e.sdk}),(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Model.Event})]})})]}))})}var Le=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function _e(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useCallback)((()=>Le(this,void 0,void 0,(function*(){var t,i,o;if(!r)return;const s=null===(t=r.current)||void 0===t?void 0:t.value,c=null===(i=a.current)||void 0===i?void 0:i.value,u=null===(o=l.current)||void 0===o?void 0:o.value;if(void 0===s||void 0===c||void 0===u)return;const d=e.sdk.Plugin;try{yield d.load({applicationKey:c,id:u},new URL(s,window.location.origin).href)}catch(e){n(`error: ${e}`)}}))),[]),o=(0,d.useCallback)((()=>Le(this,void 0,void 0,(function*(){var t,i;if(!r)return;const o=null===(t=a.current)||void 0===t?void 0:t.value,s=null===(i=l.current)||void 0===i?void 0:i.value;if(void 0===o||void 0===s)return;const c=e.sdk.Plugin;try{yield c.unload({applicationKey:o,id:s})}catch(e){n(`error: ${e}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("span",{children:"App Key"})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",placeholder:"application key",defaultValue:"qa314apf28d4um76n45cz91md",ref:a})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("span",{children:"Plugin Id"})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",placeholder:"plugin id",ref:l})})]}),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("span",{children:"Url"})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"scene-source-url",placeholder:"source url",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:i},{children:"Load"}))})}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:o},{children:"Unload"}))})}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"scene-setplugin-message"},{children:t}))}))})]})}function Fe(e){const t=e.sdk.Plugin;return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Plugin"},{children:(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(_e,{sdk:e.sdk})})})})),(0,c.jsx)(h,Object.assign({header:"Plugin - Collection"},{children:(0,c.jsx)(F,{collection:t.data,name:"Plugin.data"})}))]})}function Me(e){const t=(0,d.useCallback)((()=>{e.sdk.Pointer.editTexture(e.selectedAsset)}),[e.sdk.Pointer,e.selectedAsset]),n=(0,d.useCallback)((()=>{e.sdk.Pointer.resetTexture()}),[e.sdk.Pointer]);return(0,c.jsxs)(d.Fragment,{children:["SelectedAsset: ",e.selectedAsset,(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:t},{children:"Edit Texture"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Reset Texture"}))})]})}var De=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ze(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>De(this,void 0,void 0,(function*(){if(t.current&&n.current){const r=t.current.value,a=n.current.value;yield e.sdk.Pointer.registerTexture(r,a),e.addAsset(r,a)}}))),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"pointer-texture-id"},{children:"id: "})),(0,c.jsx)("input",{ref:t,id:"pointer-texture-id",type:"string"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"pointer-texture-src"},{children:"src: "})),(0,c.jsx)("input",{ref:n,id:"pointer-texture-src",type:"string"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Register"}))})]})}function Be(e){const{sdk:t,selectedAsset:n,addAsset:r}=e;return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Pointer - Register Texture"},{children:(0,c.jsx)(ze,{sdk:t,addAsset:r})})),(0,c.jsx)(h,Object.assign({header:"Pointer - Edit Texture"},{children:(0,c.jsx)(Me,{sdk:t,selectedAsset:n})}))]})}var Ue=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function He(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useCallback)((t=>{!function(){var t,i,o;Ue(this,void 0,void 0,(function*(){if(!r.current||!a.current||!l.current)return;const s=null===(t=r.current)||void 0===t?void 0:t.value,c=null===(i=a.current)||void 0===i?void 0:i.value,u=null===(o=l.current)||void 0===o?void 0:o.value;if(s&&c&&u)try{const t=yield e.sdk.Renderer.getScreenPosition({x:parseFloat(s),y:parseFloat(c),z:parseFloat(u)});t.x=Math.trunc(t.x),t.y=Math.trunc(t.y),n(`success x:${t.x} y:${t.y}`)}catch(e){n("error")}}))}()}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:i},{children:"getScreenPosition"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getscreenposition-x",className:"small-input",placeholder:"x",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getscreenposition-y",className:"small-input",placeholder:"y",ref:a})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getscreenposition-z",className:"small-input",placeholder:"z",ref:l})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"renderer-getscreenposition-message"},{children:t}))}))})]})}var Ve=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function We(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useCallback)((t=>{!function(){var t,l;Ve(this,void 0,void 0,(function*(){if(!r.current||!a.current)return;const i=null===(t=r.current)||void 0===t?void 0:t.value,o=null===(l=a.current)||void 0===l?void 0:l.value;if(i&&o)try{const t=yield e.sdk.Renderer.getWorldPositionData({x:parseFloat(i),y:parseFloat(o)});n(`success ${JSON.stringify(t)}`)}catch(e){n("error")}}))}()}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"getWorldPositionData"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getworldpositiondata-x",className:"small-input",placeholder:"x",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"number",id:"renderer-getworldpositiondata-y",className:"small-input",placeholder:"y",ref:a})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"renderer-getscreenposition-message"},{children:t}))}))})]})}function $e(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Renderer"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(He,{sdk:e.sdk}),(0,c.jsx)(We,{sdk:e.sdk})]})})]}))})}function Ge(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Room - Current"},{children:(0,c.jsx)(D,{observable:e.sdk.Room.current,name:"Room.current"})})),(0,c.jsx)(h,Object.assign({header:"Room - Collection"},{children:(0,c.jsx)(F,{collection:e.sdk.Room.data,name:"Room.data"})}))]})}function Ke(e){const t=(0,d.useRef)(null),n=(0,d.useCallback)((()=>{var n,r;(null===(n=t.current)||void 0===n?void 0:n.value)&&e.path.set(null===(r=t.current)||void 0===r?void 0:r.value)}),[]);return(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:e.id}))})),(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("input",{type:"text",placeholder:"string",ref:t})}))]})}const Qe=JSON.parse('{"version":"2.0","payload":{"objects":[{"name":"","position":{"x":0,"y":0.6,"z":0},"rotation":{"x":0,"y":0,"z":0},"scale":{"x":1,"y":1,"z":1},"components":[{"type":"mp.gltfLoader","id":"gltf-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":1,"y":1,"z":1},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.objLoader","id":"obj-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":0.03,"y":0.03,"z":0.03},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.daeLoader","id":"dae-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":1,"y":1,"z":1},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}}],"bindings":[],"id":"JxRI"},{"name":"","position":{"x":0,"y":0,"z":0},"rotation":{"x":0,"y":0,"z":0},"scale":{"x":1,"y":1,"z":1},"components":[{"type":"mp.directionalLight","id":"ouvX","inputs":{"enabled":true,"color":{"r":0.7,"g":0.7,"b":0.7},"intensity":2,"position":{"x":1,"y":5,"z":1},"target":{"x":0,"y":0,"z":0},"castShadow":false,"debug":false},"events":{"INTERACTION.CLICK":false,"INTERACTION.HOVER":false,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.ambientLight","id":"aZ8Q","inputs":{"enabled":true,"color":{"r":1,"g":1,"b":1},"intensity":0.5},"events":{"INTERACTION.CLICK":false,"INTERACTION.HOVER":false,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}}],"bindings":[],"id":"rLHR"}],"bindings":[],"paths":[["gltfUrl","JxRI/gltf-loader/url"],["objUrl","JxRI/obj-loader/url"],["daeUrl","JxRI/dae-loader/url"],["ambientIntensity","rLHR/ouvX/intensity"]]}}');var Ye=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Xe=JSON.stringify(Qe);function qe(e){const[t,n]=(0,d.useState)(null),r=(0,d.useRef)(null),a=function(){if(t){if(t.object&&t.object.stop(),t.objects)for(const e of t.objects)e.stop();n(null)}},l=function(t){var r;return Ye(this,void 0,void 0,(function*(){const a=yield e.sdk.Scene.deserialize(t);if(a)if(Array.isArray(a)){const e=a;for(const t of e)t.start();n({object:null,objects:e,paths:[]})}else if("object"==typeof a){const e=JSON.parse(t),l=null===(r=null==e?void 0:e.payload)||void 0===r?void 0:r.paths,i=[];if(l)for(const e of l)i.push(e[0]);const o=a;o.start(),n({object:o,objects:null,paths:i})}}))},i=(0,d.useCallback)((e=>{if(a(),0===e.target.files.length)return;const t=new FileReader;t.onload=e=>Ye(this,void 0,void 0,(function*(){if(e.target){const t=e.target.result;console.log(t),yield l(t)}})),t.readAsText(e.target.files[0],"UTF-8")}),[]),o=(0,d.useCallback)((e=>{a(),r.current&&(r.current.value="")}),[t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("tr",{children:(0,c.jsxs)("td",Object.assign({colSpan:3},{children:[(0,c.jsx)("input",{type:"file",id:"scene-deserialize-key",placeholder:"key",accept:".json",onChange:i,ref:r}),(0,c.jsx)("input",{type:"button",onClick:e=>{r.current&&(r.current.value=""),l(Xe)},value:"Model Loader"})]}))}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("button",Object.assign({onClick:o},{children:"Clear"}))}))}),(()=>{if(t&&t.object){const e=[];for(const{desc:n,path:r}of t.object.pathIterator())n.type===oe.PathType.INPUT&&e.push({desc:n,path:r});return e.map((function(e){return(0,c.jsx)(Ke,{id:e.desc.id,path:e.path},e.desc.id)}))}return null})()]})}function Je(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Scene"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(qe,{sdk:e.sdk})})})]}))})}function Ze(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",{children:"TBD"})}))}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",{colSpan:3})})]})}function et(e){return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sensor"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(Ze,{sdk:e.sdk})})})]}))})}var tt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function nt(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useCallback)((t=>tt(this,void 0,void 0,(function*(){var t;if(!r.current)return;const a=null===(t=r.current)||void 0===t?void 0:t.value,l=yield e.sdk.Settings.get(a);n(`key:${a} value:${l}`)}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"get"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"settings-get-key",className:"small-input",placeholder:"key",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:2},{children:(0,c.jsx)("div",Object.assign({id:"settings-get-message"},{children:t}))}))})]})}var rt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function at(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useCallback)((()=>rt(this,void 0,void 0,(function*(){var t,l;if(!r||!a)return;const i=null===(t=r.current)||void 0===t?void 0:t.value,o=null===(l=a.current)||void 0===l?void 0:l.value;if(void 0!==i&&void 0!==o)try{yield e.sdk.Settings.update(i,o),n(`success key:${i} value: ${o}`)}catch(e){n(`error key:${i} value: ${o}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"update"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"settings-update-key",className:"small-input",placeholder:"key",ref:r})}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"settings-update-value",className:"small-input",placeholder:"value",ref:a})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"settings-update-message"},{children:t}))}))})]})}function lt(e){return(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Settings"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(nt,{sdk:e.sdk}),(0,c.jsx)(at,{sdk:e.sdk})]})})]}))}var it=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ot(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useCallback)((()=>it(this,void 0,void 0,(function*(){var t;if(!r)return;const a=null===(t=r.current)||void 0===t?void 0:t.value;if(void 0!==a)try{yield e.sdk.Sweep.disable(a),n(`sweepId:${a} disabled`)}catch(e){n(`error disabling sweepId:${a}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"disable"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"sweep-disable-sweepId",placeholder:"sweep id",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"sweep-disable-message"},{children:t}))}))})]})}var st=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ct(e){const[t,n]=(0,d.useState)(""),r=(0,d.useRef)(null),a=(0,d.useCallback)((()=>st(this,void 0,void 0,(function*(){var t;if(!r)return;const a=null===(t=r.current)||void 0===t?void 0:t.value;if(void 0!==a)try{yield e.sdk.Sweep.enable(a),n(`sweepId:${a} enabled`)}catch(e){n(`error enabling sweepId:${a}`)}}))),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"enable"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("input",{type:"text",id:"sweep-enable-sweepId",placeholder:"sweep id",ref:r})})]}),(0,c.jsx)("tr",{children:(0,c.jsx)("td",Object.assign({colSpan:3},{children:(0,c.jsx)("div",Object.assign({id:"sweep-enable-message"},{children:t}))}))})]})}var ut=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const dt=e=>{const[t,n]=(0,d.useState)({}),[r,a]=(0,d.useState)({}),[l,i]=(0,d.useState)([]),[o,s]=(0,d.useState)([]),[u,f]=(0,d.useState)(""),[p,h]=(0,d.useState)(""),g=(0,d.useRef)(!1),m=(0,d.useRef)("");function v(e){const t=r[e];if(!t)throw new Error("Id doesn't correspond to sweep: "+e);s(t.neighbors),h(e),m.current=e}(0,d.useEffect)((()=>{const t=[];return function(){return ut(this,void 0,void 0,(function*(){yield e.sdk.App.state.waitUntil((t=>t.phase===e.sdk.App.Phase.PLAYING));const r=yield e.sdk.Sweep.Conversion.createIdMap(!0);t.push(e.sdk.Sweep.current.subscribe((e=>{var t;e.id&&f(null!==(t=r[e.id])&&void 0!==t?t:e.id)}))),t.push(e.sdk.Sweep.data.subscribe({onCollectionUpdated(t){return ut(this,void 0,void 0,(function*(){const l=function(e,t){var n;const r={},l=Object.values(e).map((e=>{var n;const a=null!==(n=t[e.id])&&void 0!==n?n:e.id;return r[a]=e,a}));a(r);const i=null!==(n=t[m.current])&&void 0!==n?n:m.current;return r&&r[i]&&s(r[i].neighbors),l}(t,r);g.current?u&&v(u):(i(l),g.current=!0,function(t,r){ut(this,void 0,void 0,(function*(){const a={};yield Promise.all(Object.values(t).map((t=>ut(this,void 0,void 0,(function*(){const n=yield e.sdk.Sweep.Conversion.getLabelFromId(t.id);a[t.id]=n,a[r[t.id]]=n}))))).then((()=>{n(a),u&&v(u)}))}))}(t,r))}))}}))}))}().catch((e=>{console.error(e)})),()=>{t.forEach((e=>{e.cancel()}))}}),[]);const b=(0,c.jsx)("option",Object.assign({value:""},{children:"-"}),-1),y=l.map(((e,n)=>(0,c.jsx)("option",Object.assign({value:e},{children:t[e]}),n)));return y.unshift(b),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("p",{children:["Select Sweep: ",(0,c.jsx)("select",Object.assign({onChange:function(e){v(e.currentTarget.value)},value:p},{children:y})),(0,c.jsxs)("button",Object.assign({style:{float:"right"},disabled:!u||u===p,onClick:()=>{v(u)}},{children:[" Use Current (",t[u],") "]}))]}),(0,c.jsxs)("div",Object.assign({style:{width:"250px"}},{children:["Neighbors: ",o.map(((e,n)=>t[e])).join(", ")]})),(0,c.jsx)("hr",{}),(0,c.jsxs)("div",{children:["Remove sweep neighbor:",(0,c.jsxs)("select",Object.assign({onChange:function(t){var n;return ut(this,void 0,void 0,(function*(){const r=t.currentTarget.value;if(!r)return void console.warn("cannot select spacer as ID!");const a=yield e.sdk.Sweep.Conversion.createIdMap(!0);yield e.sdk.Sweep.removeNeighbors(p,[null!==(n=a[r])&&void 0!==n?n:r]),console.log("removed sweep",r)}))},value:-1,style:{float:"right",width:"40px"}},{children:[b,o.map(((e,n)=>(0,c.jsx)("option",Object.assign({value:e},{children:t[e]}),n)))]}))]}),(0,c.jsxs)("div",{children:["Add sweep neighbor:",(0,c.jsx)("select",Object.assign({onChange:function(t){var n;return ut(this,void 0,void 0,(function*(){const r=t.currentTarget.value;if(!r)return void console.warn("cannot select spacer as ID!");const a=yield e.sdk.Sweep.Conversion.createIdMap(!0);yield e.sdk.Sweep.addNeighbors(p,[null!==(n=a[r])&&void 0!==n?n:r]),console.log("added sweep",r)}))},value:-1,style:{float:"right",width:"40px"}},{children:y}))]})]})};function ft(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Sweep - Current"},{children:(0,c.jsx)(D,{observable:e.sdk.Sweep.current,name:"Sweep.current"})})),(0,c.jsx)(h,Object.assign({header:"Sweep - Collection"},{children:(0,c.jsx)(F,{collection:e.sdk.Sweep.data,name:"Sweep.data"})})),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sweep"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(ot,{sdk:e.sdk}),(0,c.jsx)(ct,{sdk:e.sdk})]})})]})),(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sweep"})),(0,c.jsx)("table",{children:(0,c.jsx)("tbody",{children:(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Sweep.Event})})})]})),(0,c.jsx)(h,Object.assign({header:"Sweep Neighbor Connections"},{children:(0,c.jsx)(dt,{sdk:e.sdk})}))]})}function pt(e){const[t,n]=(0,d.useState)(!0),r=(0,d.useRef)(),a=["",""],l=(0,d.useRef)(),i=(0,d.useRef)(),o=(0,d.useCallback)((function(e){a[0]=e,u()}),[]),s=(0,d.useCallback)((function(e){a[1]=e,u()}),[]);function u(){if(r.current){const t=r.current.vertex(a[0]),o=r.current.vertex(a[1]);t&&o&&(l.current&&l.current.cancel(),i.current=e.sdk.Graph.createAStarRunner(r.current,t,o),l.current=i.current.subscribe({onChanged(){n(!0)}}))}n(!0)}(0,d.useEffect)((()=>{e.sdk.Sweep.createGraph().then((e=>r.current=e))}));const p=(0,d.useRef)(null),h=(0,d.useCallback)((function(){if(i.current){const e=i.current.exec();p.current&&(e.status!==Y.AStarStatus.SUCCESS?p.current.value="No path found":p.current.value=e.path.map(((e,t)=>t+": "+e.id)).join("\n")),n(!1)}}),[]);return(0,c.jsx)(d.Fragment,{children:(0,c.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Graph - Sweep"})),(0,c.jsxs)("div",{children:["Start: ",(0,c.jsx)(f,{collection:e.sdk.Sweep.data,filter:ht,onChanged:o})]}),(0,c.jsxs)("div",{children:["End: ",(0,c.jsx)(f,{collection:e.sdk.Sweep.data,filter:ht,onChanged:s})]}),(0,c.jsxs)("div",{children:["Path Dirty: ",t.toString()]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:h},{children:"CALCULATE PATH"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{width:"300px",height:"72px",whiteSpace:"pre"},ref:p})})]}))})}function ht(e){return e.enabled}function gt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useRef)(null),s=(0,d.useRef)(null),u=(0,d.useRef)(null),f=(0,d.useRef)(null),p=(0,d.useRef)(null),h=(0,d.useCallback)((()=>{var c;t.current&&n.current&&r.current&&a.current&&l.current&&i.current&&o.current&&s.current&&u.current&&f.current&&e.sdk.Tag.add({id:""===u.current.value?void 0:u.current.value,label:t.current.value,description:n.current.value,anchorPosition:{x:parseFloat(r.current.value),y:parseFloat(a.current.value),z:parseFloat(l.current.value)},stemVector:{x:parseFloat(i.current.value),y:parseFloat(o.current.value),z:parseFloat(s.current.value)},opacity:parseFloat(f.current.value),iconId:(null===(c=p.current)||void 0===c?void 0:c.checked)&&e.selectedAsset?e.selectedAsset:void 0})}),[e.sdk.Tag,e.selectedAsset]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-title"},{children:"Title:"})),(0,c.jsx)("input",{ref:t,type:"text",id:"tag2-add-title"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-desc"},{children:"Desc:"})),(0,c.jsx)("textarea",{ref:n,id:"tag2-add-desc"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("div",{children:"position:"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-x"},{children:"x: "})),(0,c.jsx)("input",{ref:r,className:"small-input",id:"tag2-add-pos-x",type:"number",step:"0.001",defaultValue:"0"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-y"},{children:"y: "})),(0,c.jsx)("input",{ref:a,className:"small-input",id:"tag2-add-pos-y",type:"number",step:"0.001",defaultValue:"0"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-z"},{children:"z: "})),(0,c.jsx)("input",{ref:l,className:"small-input",id:"tag2-add-pos-z",type:"number",step:"0.001",defaultValue:"0"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("div",{children:"normal:"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-x"},{children:"x: "})),(0,c.jsx)("input",{ref:i,className:"small-input",id:"tag2-add-norm-x",type:"number",step:"0.001",defaultValue:"0"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-y"},{children:"y: "})),(0,c.jsx)("input",{ref:o,className:"small-input",id:"tag2-add-norm-y",type:"number",step:"0.001",defaultValue:"1"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-z"},{children:"z: "})),(0,c.jsx)("input",{ref:s,className:"small-input",id:"tag2-add-norm-z",type:"number",step:"0.001",defaultValue:"0"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-id"},{children:"id: "})),(0,c.jsx)("input",{ref:u,className:"small-input",id:"tag2-add-id",type:"string"}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-add-opacity"},{children:"opacity: "})),(0,c.jsx)("input",{ref:f,className:"small-input",id:"tag2-add-opacity",type:"number",step:"0.01",defaultValue:"1"})]}),(0,c.jsxs)("div",{children:["icon: ",(0,c.jsx)("input",{ref:p,type:"checkbox",defaultChecked:!1}),(0,c.jsx)("input",{type:"text",readOnly:!0,value:e.selectedAsset}),(0,c.jsx)("button",Object.assign({id:"tag2-add",onClick:h},{children:"Add"}))]})]})}function mt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useRef)(null),[l,i]=(0,d.useState)(new Map),o=(0,d.useCallback)((()=>{t.current&&n.current&&r.current&&a.current&&e.sdk.Tag.allowAction(e.selectedTag,{docking:t.current.checked,opening:n.current.checked,navigating:r.current.checked,sharing:a.current.checked})}),[e.sdk.Tag,e.selectedTag]),s=(0,d.useCallback)((s=>{const c=l.get(e.selectedTag)||{docking:!0,opening:!0,navigating:!0,sharing:!0};s.target===t.current&&(c.docking=!c.docking),s.target===r.current&&(c.navigating=!c.navigating),s.target===n.current&&(c.opening=!c.opening),s.target===a.current&&(c.sharing=!c.sharing),l.set(e.selectedTag,c),i(new Map(l)),o()}),[o,l,e.selectedTag]),u=l.get(e.selectedTag)||{docking:!0,opening:!0,navigating:!0,sharing:!0};return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:"(checked == allowed)"}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-open"},{children:"Billboard:"})),(0,c.jsx)("input",{ref:n,type:"checkbox",id:"tag2-allow-open",onChange:s,checked:u.opening})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-nav"},{children:"Navigation:"})),(0,c.jsx)("input",{ref:r,type:"checkbox",id:"tag2-allow-nav",onChange:s,checked:u.navigating})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-dock"},{children:"Dock:"})),(0,c.jsx)("input",{ref:t,type:"checkbox",id:"tag2-allow-dock",onChange:s,checked:u.docking})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-allow-share"},{children:"Share:"})),(0,c.jsx)("input",{ref:a,type:"checkbox",id:"tag2-allow-share",onChange:s,checked:u.sharing})]})]})}const vt={display:"inline-block",width:"80px"};function bt({sdk:e,selectedTag:t,selectedAttachment:n}){const r=(0,d.useCallback)((()=>{e.Tag.attach(t,n)}),[e.Tag,n,t]),a=(0,d.useCallback)((()=>{e.Tag.detach(t,n)}),[e.Tag,n,t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({style:vt},{children:"Tag:"})),(0,c.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:t})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({style:vt},{children:"Attachment:"})),(0,c.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:n})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"Attach"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:a},{children:"Detach"}))})]})}function yt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useCallback)((()=>{t.current&&n.current&&e.sdk.Tag.editBillboard(e.selectedTag,{label:t.current.value||void 0,description:n.current.value||void 0})}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-edit-title"},{children:"Title:"})),(0,c.jsx)("input",{ref:t,type:"text",id:"tag2-edit-title"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-edit-desc"},{children:"Desc:"})),(0,c.jsx)("textarea",{ref:n,id:"tag2-edit-desc"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit",onClick:r},{children:"Edit"}))})]})}function xt(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useCallback)((()=>{t.current&&n.current&&r.current&&e.sdk.Tag.editColor(e.selectedTag,{r:parseFloat(t.current.value),g:parseFloat(n.current.value),b:parseFloat(r.current.value)})}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-color-r"},{children:"R: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"tag2-color-r",type:"number",step:.01,defaultValue:1,min:0,max:.75})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-color-g"},{children:"G: "})),(0,c.jsx)("input",{ref:n,className:"small-input",id:"tag2-color-g",type:"number",step:.01,defaultValue:0,min:0,max:1})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-color-b"},{children:"B: "})),(0,c.jsx)("input",{ref:r,className:"small-input",id:"tag2-color-b",type:"number",step:.01,defaultValue:1,min:0,max:.75})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-color",onClick:a},{children:"Edit Color"}))})]})}function kt(e){const[t,n]=(0,d.useState)(!0),[r,a]=(0,d.useState)(!0),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useCallback)((function(){n(!t)}),[t]),s=(0,d.useCallback)((function(){a(!r)}),[r]),u=(0,d.useCallback)((()=>{l.current&&i.current&&e.sdk.Tag.editStem(e.selectedTag,{stemVisible:r?i.current.checked:void 0,stemHeight:t?parseFloat(l.current.value):void 0})}),[e.sdk.Tag,e.selectedTag,t,r]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:t,onChange:o}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-stem-height"},{children:"stem height: "})),(0,c.jsx)("input",{ref:l,className:"small-input",id:"tag2-height-stem",type:"number",step:.1,defaultValue:1,min:0,disabled:!t})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:r,onChange:s}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-stem-visible"},{children:"stem visible:"})),(0,c.jsx)("input",{ref:i,type:"checkbox",id:"tag2-stem-visible",disabled:!r})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-stem",onClick:u},{children:"Edit Stem"}))})]})}function jt(e){const t=(0,d.useCallback)((()=>{e.sdk.Tag.editIcon(e.selectedTag,e.selectedAsset)}),[e.sdk.Tag,e.selectedAsset,e.selectedTag]),n=(0,d.useCallback)((()=>{e.sdk.Tag.resetIcon(e.selectedTag)}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-icon",onClick:t},{children:"Edit Icon"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-reset-icon",onClick:n},{children:"Reset Icon"}))})]})}function Et(e){const t=(0,d.useRef)(null),n=(0,d.useCallback)((()=>{t.current&&e.sdk.Tag.editOpacity(e.selectedTag,parseFloat(t.current.value))}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-opacity"},{children:"opacity: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"tag2-opacity",type:"number",step:.01,defaultValue:.5,min:0,max:1})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-edit-opacity",onClick:n},{children:"Edit Opacity"}))})]})}function wt(e){const[t,n]=(0,d.useState)(!0),[r,a]=(0,d.useState)(!0),l=(0,d.useRef)(null),i=(0,d.useRef)(null),o=(0,d.useRef)(null),s=(0,d.useRef)(null),u=(0,d.useRef)(null),f=(0,d.useRef)(null),p=(0,d.useCallback)((function(){n(!t)}),[t]),h=(0,d.useCallback)((function(){a(!r)}),[r]),g=(0,d.useCallback)((()=>{l.current&&i.current&&o.current&&s.current&&u.current&&f.current&&e.sdk.Tag.editPosition(e.selectedTag,{anchorPosition:t?{x:parseFloat(l.current.value),y:parseFloat(i.current.value),z:parseFloat(o.current.value)}:void 0,stemVector:r?{x:parseFloat(s.current.value),y:parseFloat(u.current.value),z:parseFloat(f.current.value)}:void 0})}),[e.sdk.Tag,e.selectedTag,r,t]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:"position:"}),(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:t,onChange:p}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-x"},{children:"x: "})),(0,c.jsx)("input",{ref:l,className:"small-input",id:"tag2-move-pos-x",type:"number",step:"0.001",defaultValue:"0",disabled:!t}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-y"},{children:"y: "})),(0,c.jsx)("input",{ref:i,className:"small-input",id:"tag2-move-pos-y",type:"number",step:"0.001",defaultValue:"0",disabled:!t}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-z"},{children:"z: "})),(0,c.jsx)("input",{ref:o,className:"small-input",id:"tag2-move-pos-z",type:"number",step:"0.001",defaultValue:"0",disabled:!t})]}),(0,c.jsx)("div",{children:"normal:"}),(0,c.jsxs)("div",{children:[(0,c.jsx)("input",{type:"checkbox",checked:r,onChange:h}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-x"},{children:"x: "})),(0,c.jsx)("input",{ref:s,className:"small-input",id:"tag2-move-norm-x",type:"number",step:"0.001",defaultValue:"0",disabled:!r}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-y"},{children:"y: "})),(0,c.jsx)("input",{ref:u,className:"small-input",id:"tag2-move-norm-y",type:"number",step:"0.001",defaultValue:"1",disabled:!r}),(0,c.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-z"},{children:"z: "})),(0,c.jsx)("input",{ref:f,className:"small-input",id:"tag2-move-norm-z",type:"number",step:"0.001",defaultValue:"0",disabled:!r})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-move",onClick:g},{children:"Move"}))})]})}function Tt({sdk:e,selectedTag:t}){const n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useCallback)((function(){var r;const a=(null===(r=n.current)||void 0===r?void 0:r.checked)||!1;e.Tag.open(t,{force:a})}),[e.Tag,t]),l=(0,d.useCallback)((function(){var n;const a=(null===(n=r.current)||void 0===n?void 0:n.checked)||!1;e.Tag.dock(t,{force:a})}),[e.Tag,t]),i=(0,d.useCallback)((function(){e.Tag.close(t)}),[e.Tag,t]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:t})}),(0,c.jsxs)("div",{children:[(0,c.jsx)("button",Object.assign({className:"small-input",onClick:a},{children:"Open"})),(0,c.jsx)("label",Object.assign({style:{marginLeft:"5px"}},{children:"force:"})),(0,c.jsx)("input",{ref:n,id:"tag-force-open",type:"checkbox"})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("button",Object.assign({className:"small-input",onClick:l},{children:"Dock"})),(0,c.jsx)("label",Object.assign({style:{marginLeft:"5px"}},{children:"force:"})),(0,c.jsx)("input",{ref:r,id:"tag-force-dock",type:"checkbox"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:i},{children:"Close"}))})]})}function St(e){const t=(0,d.useRef)(null),n=(0,d.useCallback)((()=>{t.current&&e.sdk.Tag.registerAttachment(t.current.value)}),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"tag2-register-attachment-src"},{children:"Src:"})),(0,c.jsx)("input",{ref:t,type:"text",id:"tag2-register-attachment-src"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Register"}))})]})}var Ct=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ot(e){const t=(0,d.useRef)(null),n=(0,d.useRef)(null),r=(0,d.useRef)(null),a=(0,d.useRef)(null),l=(0,d.useCallback)((()=>Ct(this,void 0,void 0,(function*(){if(t.current&&n.current&&r.current&&a.current){const[,l]=yield e.sdk.Tag.registerSandbox(t.current.value,{name:n.current.value,size:{h:parseInt(a.current.value,10),w:parseInt(r.current.value,10)}});l.on("click",(function(e){const t=function(){let e="";for(let t=0;t<6;++t)e+=Math.floor(16*Math.random()).toString(16);return"#"+e}();l.send("update.button",t,t.toString())}))}}))),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("input",{ref:n,type:"text",placeholder:"name"})}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{height:"7em"},ref:t,defaultValue:Nt})}),(0,c.jsxs)("div",{children:["width:",(0,c.jsx)("input",{className:"small-input",ref:r,type:"number",defaultValue:350}),"height:",(0,c.jsx)("input",{className:"small-input",ref:a,type:"number",defaultValue:150})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:l},{children:"Register"}))})]})}const Nt="<style>\nbody {\n  background-color: #cccccc;\n}\n#btn1 {\n  width: 100px;\n  height: 20px;\n  background-color: rgb(255, 255, 255);\n  border-radius: 10px;\n  border: 1px solid black;\n  text-align: center;\n}\n</style>\n<br>\n<br>\n<div id='btn1'>CLICK ME!</div>\n<div id='tag'></div>\n<div id='docked'></div>\n<script>\nconst btn1 = document.getElementById('btn1');\nbtn1.addEventListener('click', function () {\n  window.send('click', {buttonId: 1234321});\n});\nwindow.on('update.button', function (color, message) {\n  btn1.innerText = message;\n  btn1.style.backgroundColor = color;\n});\nconst tagOutput = document.getElementById('tag');\ntagOutput.innerHTML = 'Current tag: ' + window.tag;\nconst dockedOutput = document.getElementById('docked');\ndockedOutput.innerHTML = 'Docked: ' + window.docked;\n<\/script>";function It(e){const t=(0,d.useCallback)((()=>{e.sdk.Tag.remove(e.selectedTag)}),[e.sdk.Tag,e.selectedTag]);return(0,c.jsx)(d.Fragment,{children:(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"tag2-remove",onClick:t},{children:"Remove"}))})})}function Rt({toggleSetting:e}){const t=(0,d.useCallback)((()=>{e()}),[e]),n=(0,d.useCallback)((()=>{e(!0)}),[e]),r=(0,d.useCallback)((()=>{e(!1)}),[e]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:t},{children:"Toggle"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:n},{children:"Show"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({className:"small-input",onClick:r},{children:"Hide"}))})]})}function Pt(e,t){return e.label<t.label?-1:e.label>t.label?1:0}var At=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Lt(e){const t=(0,d.useRef)(null),[n,r]=(0,d.useState)(""),a=(0,d.useCallback)((()=>At(this,void 0,void 0,(function*(){if(t.current){const n=yield e.sdk.Tag.importTags(t.current.value);r(`New tag ids: ${n}`)}}))),[e.sdk.Tag]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("label",Object.assign({htmlFor:"space-id"},{children:"spaceId: "})),(0,c.jsx)("input",{ref:t,className:"small-input",id:"space-id",type:"string"})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({id:"copy-tags",onClick:a},{children:"Import"}))}),(0,c.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:n})]})}function _t(e){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)(""),l=(0,d.useCallback)((function(e){return e.label||"(no label)"}),[]),i=(0,d.useCallback)((function(e){return e.src}),[]),o=(0,d.useCallback)((function(e){return e.src.slice(0,30)}),[]),{sdk:s}=e;return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"Tag - Collection"},{children:(0,c.jsx)(F,{collection:s.Tag.data,name:"Tags"})})),(0,c.jsx)(h,Object.assign({header:"Tag.attachments - Collection"},{children:(0,c.jsx)(F,{collection:s.Tag.attachments,name:"Attachments"})})),(0,c.jsx)(g,{label:"Tag",collection:s.Tag.data,onChanged:n,optionLabel:l,sort:Pt,additionalProperties:["stemHeight","discPosition"]}),(0,c.jsx)(g,{label:"Attachment",collection:s.Tag.attachments,onChanged:a,optionLabel:o,hoverLabel:i}),(0,c.jsx)(h,Object.assign({header:"Tag - Add"},{children:(0,c.jsx)(gt,{sdk:s,selectedAsset:e.selectedAsset})})),(0,c.jsx)(h,Object.assign({header:"Tag - Remove"},{children:(0,c.jsx)(It,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Open"},{children:(0,c.jsx)(Tt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:'Tag - "Open Tags"'},{children:(0,c.jsx)(D,{observable:s.Tag.openTags,name:"Open Tags"})})),(0,c.jsx)(h,Object.assign({header:"Tag - Edit"},{children:(0,c.jsx)(yt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Color"},{children:(0,c.jsx)(xt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Edit Icon"},{children:(0,c.jsx)(jt,{sdk:s,selectedTag:t,selectedAsset:e.selectedAsset})})),(0,c.jsx)(h,Object.assign({header:"Tag - Opacity"},{children:(0,c.jsx)(Et,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Stem"},{children:(0,c.jsx)(kt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Move"},{children:(0,c.jsx)(wt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Allow Actions"},{children:(0,c.jsx)(mt,{sdk:s,selectedTag:t})})),(0,c.jsx)(h,Object.assign({header:"Tag - Attach"},{children:(0,c.jsx)(bt,{sdk:s,selectedTag:t,selectedAttachment:r})})),(0,c.jsx)(h,Object.assign({header:"Tag - Register Attachment"},{children:(0,c.jsx)(St,{sdk:s})})),(0,c.jsx)(h,Object.assign({header:"Tag - Register Sandbox"},{children:(0,c.jsx)(Ot,{sdk:s})})),(0,c.jsx)(h,Object.assign({header:"Tag - Docking Controls"},{children:(0,c.jsx)(Rt,{toggleSetting:s.Tag.toggleDocking})})),(0,c.jsx)(h,Object.assign({header:"Tag - Navigation Controls"},{children:(0,c.jsx)(Rt,{toggleSetting:s.Tag.toggleNavControls})})),(0,c.jsx)(h,Object.assign({header:"Tag - Sharing Controls"},{children:(0,c.jsx)(Rt,{toggleSetting:s.Tag.toggleSharing})})),(0,c.jsx)(h,Object.assign({header:"Tag - Import Tags"},{children:(0,c.jsx)(Lt,{sdk:s})}))]})}var Ft=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Mt={height:50};function Dt(e){const[t,n]=(0,d.useState)([]),r=(0,d.useCallback)((()=>Ft(this,void 0,void 0,(function*(){const t=yield e.sdk.Tour.getData();n(t)}))),[]);let a="";return t.length>0&&(a=JSON.stringify(t,null,2)),(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("button",Object.assign({onClick:r},{children:"getData"}))}),(0,c.jsx)("td",{children:(0,c.jsx)("textarea",{rows:3,style:Mt,defaultValue:a})})]})}const zt={overflowY:"auto"};function Bt(e){return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",Object.assign({style:zt,className:"controlPanel"},{children:[(0,c.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Tour"})),(0,c.jsx)("table",{children:(0,c.jsxs)("tbody",{children:[(0,c.jsx)(Dt,{sdk:e.sdk}),(0,c.jsx)(z,{sdk:e.sdk,enum:e.sdk.Tour.Event})]})})]})),(0,c.jsxs)(h,Object.assign({header:"Tour - State"},{children:[(0,c.jsx)(D,{name:"current step",observable:e.sdk.Tour.currentStep}),(0,c.jsx)(D,{name:"play state",observable:e.sdk.Tour.state}),(0,c.jsx)(D,{name:"transition",observable:e.sdk.Tour.transition})]}))]})}function Ut({selectedView:e}){var t;const n=(0,d.useCallback)((()=>{e&&e.setActive()}),[e]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsxs)("div",{children:["selected: ",(0,c.jsx)("input",{type:"text",value:null!==(t=null==e?void 0:e.id)&&void 0!==t?t:"None",disabled:!0})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:n},{children:"Activate"}))})]})}function Ht({selectedLayer:e}){var t;const n=(0,d.useCallback)((t=>{e&&e.toggle(t)}),[e]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("div",{children:["selected: ",(0,c.jsx)("input",{type:"text",value:null!==(t=null==e?void 0:e.id)&&void 0!==t?t:"None",disabled:!0})]}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:()=>n(!0)},{children:"Toggle On"}))}),(0,c.jsx)("div",{children:(0,c.jsx)("button",Object.assign({onClick:()=>n(!1)},{children:"Toggle Off"}))})]})}var Vt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Wt={display:"inline-block",width:"50px"};function $t({selectedView:e,selectedLayer:t}){var n,r;const[a,l]=(0,d.useState)(""),i=(0,d.useCallback)((()=>Vt(this,void 0,void 0,(function*(){if(e&&t)try{yield e.addLayer(t)}catch(e){l("[addLayer] Error:"+e)}else l("not ready")}))),[t,e]),o=(0,d.useCallback)((()=>Vt(this,void 0,void 0,(function*(){if(e&&t)try{yield e.removeLayer(t)}catch(e){l("[removeLayer] Error:"+e)}else l("not ready")}))),[t,e]),s=(0,d.useCallback)((()=>Vt(this,void 0,void 0,(function*(){l(e&&t?e.hasLayer(t).toString():"not ready")}))),[t,e]);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)("span",Object.assign({style:Wt},{children:"View:"})),(0,c.jsx)("input",{type:"text",value:null!==(n=null==e?void 0:e.id)&&void 0!==n?n:"None",disabled:!0})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("span",Object.assign({style:Wt},{children:"Layer:"})),(0,c.jsx)("input",{type:"text",value:null!==(r=null==t?void 0:t.id)&&void 0!==r?r:"None",disabled:!0})]}),(0,c.jsxs)("div",{children:[(0,c.jsx)("button",Object.assign({style:{width:"70px"},onClick:i},{children:"Add"})),(0,c.jsx)("button",Object.assign({style:{width:"70px"},onClick:o},{children:"Remove"})),(0,c.jsx)("button",Object.assign({style:{width:"70px"},onClick:s},{children:"Has"}))]}),(0,c.jsx)("div",{children:(0,c.jsx)("textarea",{style:{width:"100%",height:"6em"},value:a,disabled:!0})})]})}function Gt({sdk:e}){const[t,n]=(0,d.useState)(),[r,a]=(0,d.useState)();return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(h,Object.assign({header:"View.views - Collection"},{children:(0,c.jsx)(F,{name:"views",collection:e.View.views})})),(0,c.jsx)(g,{label:"Views",collection:e.View.views,additionalProperties:["id","name","layers"],propertyTransforms:{layers:e=>[...e].map((e=>e.id))},onChanged:(e,t)=>n(t)}),(0,c.jsx)(h,Object.assign({header:"View.layers - Collection"},{children:(0,c.jsx)(F,{name:"layers",collection:e.View.layers})})),(0,c.jsx)(g,{label:"Layers",collection:e.View.layers,additionalProperties:["id","name"],onChanged:(e,t)=>a(t)}),(0,c.jsx)(h,Object.assign({header:"View - Current"},{children:(0,c.jsx)(D,{name:"current",observable:e.View.current})})),(0,c.jsx)(h,Object.assign({header:"View - Activate"},{children:(0,c.jsx)(Ut,{selectedView:t})})),(0,c.jsx)(h,Object.assign({header:"Layer - Toggle"},{children:(0,c.jsx)(Ht,{selectedLayer:r})})),(0,c.jsx)(h,Object.assign({header:"View.layers controls"},{children:(0,c.jsx)($t,{selectedView:t,selectedLayer:r})}))]})}function Kt(e){return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)(h,Object.assign({header:"Viewmode - Transition"},{children:[(0,c.jsx)(D,{name:"viewmode current",observable:e.sdk.Mode.current}),(0,c.jsx)(D,{name:"viewmode transition",observable:e.sdk.Mode.transition})]}))})}function Qt({sdk:e}){const[t,n]=(0,d.useState)(""),[r,a]=(0,d.useState)({}),l=(0,d.useCallback)(((e,t)=>{a((n=>Object.assign(Object.assign({},n),{[e]:t})))}),[]);return(0,c.jsxs)(d.Fragment,{children:[(0,c.jsx)(y,{sdk:e,assets:r,setAssets:a,setSelectedAsset:n}),(0,c.jsx)(j,{sdk:e}),(0,c.jsx)(B,{sdk:e}),(0,c.jsx)(W,{sdk:e}),(0,c.jsx)(ve,{sdk:e}),(0,c.jsx)(ke,{sdk:e,selectedAsset:t,addAsset:l}),(0,c.jsx)(Se,{sdk:e}),(0,c.jsx)(Ae,{sdk:e}),"Plugin"in e&&(0,c.jsx)(Fe,{sdk:e}),(0,c.jsx)(Be,{sdk:e,selectedAsset:t,addAsset:l}),(0,c.jsx)($e,{sdk:e}),(0,c.jsx)(Ge,{sdk:e}),(0,c.jsx)(Je,{sdk:e}),(0,c.jsx)(et,{sdk:e}),(0,c.jsx)(lt,{sdk:e}),(0,c.jsx)(ft,{sdk:e}),(0,c.jsx)(pt,{sdk:e}),"Tag"in e&&(0,c.jsx)(_t,{sdk:e,selectedAsset:t}),(0,c.jsx)(Bt,{sdk:e}),"View"in e&&(0,c.jsx)(Gt,{sdk:e}),(0,c.jsx)(Kt,{sdk:e})]})}(()=>{const e={}})();var Yt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};document.getElementById("control-root").innerHTML="<div>\n  <div class='drawer'>\n    <span class='drawer-label'>Mattertag</span>\n    <div>\n      <select id='mattertag-selector' class='mattertag-selector'>\n        <option disabled selected value />\n      </select>\n    </div>\n\n    \x3c!-- Mattertag Add --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Add</div>\n      <label for='tag-add-title'>Title:</label>\n      <input type='text' id='tag-add-title'>\n      <br>\n      <label for='tag-add-desc'>Desc:</label>\n      <textarea id='tag-add-desc'></textarea>\n      <br>\n      position:\n      <br>\n      <label for='tag-add-pos-x'>x: </label><input class='small-input' id='tag-add-pos-x' type='number' step='0.001' value='0'>\n      <label for='tag-add-pos-y'>y: </label><input class='small-input' id='tag-add-pos-y' type='number' step='0.001' value='0'>\n      <label for='tag-add-pos-z'>z: </label><input class='small-input' id='tag-add-pos-z' type='number' step='0.001' value='0'>\n      <br>\n      normal:\n      <br>\n      <label for='tag-add-norm-x'>x: </label><input class='small-input' id='tag-add-norm-x' type='number' step='0.001' value='0'>\n      <label for='tag-add-norm-y'>y: </label><input class='small-input' id='tag-add-norm-y' type='number' step='0.001' value='1'>\n      <label for='tag-add-norm-z'>z: </label><input class='small-input' id='tag-add-norm-z' type='number' step='0.001' value='0'>\n      <br>\n      media:\n      <br>\n      <label for='tag-add-mtype'>type:</label><select id='tag-add-mtype' class='mtag-media-type'></select>\n      <label for='tag-add-msrc'>src:</label><input type='text' id='tag-add-msrc'>\n      <br>\n      <button id='tag-add'>Add</button>\n    </div>\n\n    \x3c!-- Mattertag Move --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Move</div>\n      position:\n      <br>\n      <label for='tag-move-pos-x'>x: </label><input class='small-input' id='tag-move-pos-x' type='number' step='0.001' value='0'>\n      <label for='tag-move-pos-y'>y: </label><input class='small-input' id='tag-move-pos-y' type='number' step='0.001' value='0'>\n      <label for='tag-move-pos-z'>z: </label><input class='small-input' id='tag-move-pos-z' type='number' step='0.001' value='0'>\n      <br>\n      normal:\n      <br>\n      <label for='tag-move-norm-x'>x: </label><input class='small-input' id='tag-move-norm-x' type='number' step='0.001' value='0'>\n      <label for='tag-move-norm-y'>y: </label><input class='small-input' id='tag-move-norm-y' type='number' step='0.001' value='1'>\n      <label for='tag-move-norm-z'>z: </label><input class='small-input' id='tag-move-norm-z' type='number' step='0.001' value='0'>\n      <br>\n      <button id='tag-move'>Move</button>\n    </div>\n\n    \x3c!-- Mattertag Remove --\x3e\n    <div id='mattertag-controls' class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Remove</div>\n      <br />\n      <div>\n        <button id='mattertag-remove'>Remove Mattertag</button>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag Editor --\x3e\n    <div class='controlPanel'>\n      <div class=\"controlPanelHeader\">Mattertag - Edit</div>\n      <table>\n        <tr>\n          <td><label for='tag-edit-title'>Title:</label></td>\n          <td><input type='text' id='tag-edit-title'></td>\n        </tr>\n        <tr>\n          <td><label for='tag-edit-media'>Media:</label></td>\n          <td><input type='text' id='tag-edit-media'></td>\n          <td><select id='tag-edit-mediatype' class='mtag-media-type'></select></td>\n        </tr>\n        <tr>\n          <td><label for='tag-edit-desc'>Desc:</label></td>\n          <td><textarea id='tag-edit-desc'></textarea></td>\n        </tr>\n      </table>\n      <button id='mattertag-edit'>Edit</button>\n    </div>\n\n    \x3c!-- Mattertag prevent --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Prevent Action</div>\n      checked => functionality allowed<br />unchecked => disallowed\n      <br />\n      <br />\n      <div>\n        <label for='tag-lock-bb'>Billboard:</label>\n        <input type='checkbox' id='tag-lock-bb' checked></td>\n      </div>\n      <div>\n        <label>Navigation:</label>\n        <input type='checkbox' id='tag-lock-nav' checked></td>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag Color --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Color</div>\n      <br>\n      <label>Color</label>\n      <div>\n        <label for='tag-color-r'>r: </label><input class='small-input' id='tag-color-r' type='number' step='0.001' value='1'>\n      </div>\n      <div>\n        <label for='tag-color-g'>g: </label><input class='small-input' id='tag-color-g' type='number' step='0.001' value='0'>\n      </div>\n      <div>\n        <label for='tag-color-b'>b: </label><input class='small-input' id='tag-color-b' type='number' step='0.001' value='1'>\n      </div>\n      <br>\n      <button id='tag-edit-color'>Edit Color</button>\n    </div>\n\n    \x3c!-- Mattertag Opacity --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Edit Opacity</div>\n      <br />\n      <div>\n        <label for='mattertag-opacity'>Opacity:</label>\n        <input type='number' min='0' max='1' step='0.001' value='.5' id='mattertag-opacity'>\n      </div>\n      <div>\n        <button id='mattertag-opacity-edit'>Edit Opacity</button>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag injection --\x3e\n    <div id=\"tagHTML\" class=\"controlPanel\">\n      <div class=\"controlPanelHeader\">Mattertag - Inject HTML</div>\n      <table height=\"100%\">\n        <tr>\n          <td>\n            <textarea id='injectedHTML'></textarea>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <div>\n              <table>\n                <tr>\n                  <td>Size:</td>\n                  <td><input type=\"text\" id=\"mattertag-html-w\" class=\"small-input\"></td>\n                  <td><input type=\"text\" id=\"mattertag-html-h\" class=\"small-input\"></td>\n                </tr>\n              </table>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td><button id=\"injectHTML\">INJECT HTML</button></td>\n        </tr>\n      </table>\n    </div>\n\n    \x3c!-- Mattertag Navigation --\x3e\n    <div id='mattertag-controls' class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Navigate</div>\n      <br />\n      <div>\n        <select id='mattertag-navigation-type'>\n          <option value='FLY'>Fly</option>\n          <option value='FADEOUT'>Fade Out</option>\n          <option value='INSTANT'>Instant</option>\n        </select>\n      </div>\n      <div>\n        <label for='mattertag-navigation-force'>Force:</label>\n        <input id='mattertag-navigation-force' type='checkbox'></input>\n      </div>\n      <div>\n        <button id='navigateToTag'>Navigate</button>\n      </div>\n    </div>\n\n  </div>\n\n\n  \x3c!-- Mattertag Stem --\x3e\n  <div class='controlPanel'>\n    <div class='controlPanelHeader'>Mattertag - Stem</div>\n    <br>\n    <label>Editable Stem Properties</label>\n    <div>\n      <label for='stem-height'>Stem Height: </label><input class='small-input' id='stem-height' type='number' step='0.01' value='0.7'>\n    </div>\n    <input id='stem-visible' type='checkbox' checked>Visible</input>\n    <br>\n    <button id='tag-edit-stem'>Update Stem</button>\n  </div>\n\n\n  \x3c!-- Screenshots --\x3e\n  <div class='controlPanel'>\n    <button id=\"screenshot\">Screenshot</button>\n    <button id=\"equirectangle\">Equirectangular</button>\n    <br />\n    <br />\n    <img id='screenshot-preview'>\n  </div>\n\n  \x3c!-- Pose Observable --\x3e\n  <div id=\"playerPose\" class=\"controlPanel\">\n    <textarea id='pose'></textarea>\n    <br />\n    <button id=\"getPose\">Get Pose</button>\n  </div>\n\n  \x3c!-- Pointer Observable --\x3e\n  <div id=\"pointerInfo\" class=\"controlPanel\">\n    <textarea id='pointer'></textarea>\n    <br />\n    <button id=\"getPointer\">Toggle Pointer Data</button>\n  </div>\n\n  \x3c!-- Movement --\x3e\n  <div class=\"controlPanel navControls\">\n    <div class=\"controlPanelHeader\">Movement</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"FORWARD\" data-direction='FORWARD' class=\"navButton\">Fwd</button></td>\n        <td></td>\n      </tr>\n       <tr>\n        <td><button id=\"LEFT\" data-direction='LEFT' class=\"navButton\">Left</button></td>\n        <td></td>\n        <td><button id=\"RIGHT\" data-direction='RIGHT' class=\"navButton\">Right</button></td>\n      </tr>\n       <tr>\n        <td></td>\n        <td><button id=\"BACK\" data-direction='BACK' class=\"navButton\">Back</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"positionX\" name=\"panX\" class=\"rotationbutton\"></td>\n        <td><input type=\"text\" id=\"positionZ\" name=\"panZ\" class=\"rotationbutton\"></td>\n        <td><button id=\"pan\">Pan</button></td>\n        </tr>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Rotation Controls --\x3e\n  <div class=\"controlPanel rotationControls\">\n    <div class=\"controlPanelHeader\">Rotation</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"tiltUp\" data-direction='UP' class=\"rotationbutton\">Up</button></td>\n        <td></td>\n      </tr>\n       <tr>\n        <td><button id=\"rotateLeft\" data-direction='LEFT' class=\"rotationbutton\">Left</button></td>\n        <td><input type=\"text\" id=\"rotation\" name=\"rotation\" class=\"rotationbutton\"></td>\n        <td><button id=\"rotateRight\" data-direction='RIGHT' class=\"rotationbutton\">Right</button></td>\n      </tr>\n       <tr>\n        <td></td>\n        <td><button id=\"tiltDown\" data-direction='DOWN' class=\"rotationbutton\">Down</button></td>\n        <td></td>\n      </tr>\n    </table>\n    <br />\n    <input type=\"text\" id=\"rotationX\" name=\"rotationX\" class=\"rotationbutton\">&nbsp;&nbsp;\n    <input type=\"text\" id=\"rotationY\" name=\"rotationY\" class=\"rotationbutton\">&nbsp;&nbsp;\n    <button id=\"freeRotate\" class=\"rotationbutton\">Free</button>\n    <button id=\"orient\" class=\"rotationbutton\">Orient</button>\n    <input type=\"text\" id=\"rotationSpeed\" name=\"rotationSpeed\" class=\"rotationbutton\">&nbsp;&nbsp;\n  </div>\n\n  \x3c!-- Zoom Controls --\x3e\n  <div class=\"controlPanel zoomControls\">\n    <div class=\"controlPanelHeader\">Zoom</div>\n    <br />\n    <table>\n      <tr>\n        <td>Current Zoom:</td>\n        <td><label id='current-zoom-level'>1</label></td>\n\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"zoom-by-val\" name=\"zoom-by-val\" class=\"rotationbutton\"></td>\n        <td><button id=\"zoom-by\" class=\"\">Zoom By</button></td>\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"zoom-to-val\" name=\"zoom-to-val\" class=\"rotationbutton\"></td>\n        <td><button id=\"zoom-to\" class=\"\">Zoom To</button></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"zoom-reset\" class=\"rotationbutton\">Reset</button></td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Mode Controls --\x3e\n  <div class=\"controlPanel modeControls\">\n    <div class=\"controlPanelHeader\">Mode</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"INSIDE\" class=\"modeButton\">Inside</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"DOLLHOUSE\" class=\"modeButton\">Dollhouse</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"FLOORPLAN\" class=\"modeButton\">Floorplan</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>\n          <p>\n            Transition:\n            <select id=\"modeStyles\">\n              <option value='FLY'>Fly</option>\n              <option value='FADEOUT'>Fade to black</option>\n              <option value='INSTANT'>Instant</option>\n            </select>\n          </p>\n        </td>\n        <td></td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- sweep Controls --\x3e\n  <div class=\"controlPanel modeControls\">\n    <div class=\"controlPanelHeader\">Fly To Sweep By ID</div>\n    <br />\n    <table>\n      <tr>\n        <td>\n        <p>\n          Sweep:\n          <select class='sweep-selector' id='sweepIds'></select>\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Rotation:\n          <input type=\"text\" id=\"sweepRotationX\" name=\"rotationX\" class=\"rotationbutton\">&nbsp;&nbsp;\n          <input type=\"text\" id=\"sweepRotationY\" name=\"rotationY\" class=\"rotationbutton\">&nbsp;&nbsp;\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Transition:\n          <select id=\"flyStyles\">\n            <option value='FLY'>Fly</option>\n            <option value='FADEOUT'>Fade to black</option>\n            <option value='INSTANT'>Instant</option>\n          </select>\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Transition Time:\n          <input type=\"text\" id=\"sweepTransitionTime\">&nbsp;&nbsp;\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <button id=\"moveToSweep\" class=\"sweepButton\">Move To Sweep</button>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Sweep enable --\x3e\n  <div class=\"controlPanel\">\n    <div class=\"controlPanelHeader\">Sweep - Enable</div>\n    <br>\n    <select class='sweep-selector' id='sweep-enable-selector'></select>\n    <br>\n    <input id='sweep-enable' type='checkbox' checked>Enabled</input>\n  </div>\n\n  \x3c!-- Tour Controls --\x3e\n  <div id=\"tour-controls\" class=\"controlPanel\">\n    <div class='controlPanelHeader'>Tour Controls</div>\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"tourStartBtn\">Start Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourStopBtn\">Stop Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><label for='tour-stepped'>Index to Step</td>\n        <td><input type=\"text\" id=\"tour-stepped\" name=\"tour-stepped\"></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourSteppedBtn\">Stepped Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourPrevBtn\">Prev</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourNextBtn\">Next</button></td>\n        <td></td>\n      </tr>\n    </table>\n    <br />\n  </div>\n\n  <div id='root'></div>\n</div>\n";const Xt=document.getElementById("showcase"),qt=new URLSearchParams(window.location.search),Jt={host:qt.get("host")||qt.get("apiHost")||window.location.origin,sdkKey:qt.get("sdkKey")||qt.get("applicationKey")||"u2mw9w1qe1sasr0sbiucrgceb",bundleVersion:qt.get("bundleVersion")||"",useDirectMessages:!(!qt.get("bundleVersion")&&!qt.get("dm")||"0"===qt.get("dm")),sdkVersion:qt.get("sdkVersion")||"2.0.1-0-g64e7e88",workshop:qt.get("workshop")||"",connectionDelay:parseInt(qt.get("delay")||"0",10),provider:qt.get("provider")||void 0};function Zt(){return Yt(this,void 0,void 0,(function*(){var e;if(Jt.connectionDelay>0&&(yield(e=Jt.connectionDelay,new Promise(((t,n)=>{setTimeout(t,e)})))),Jt.useDirectMessages){const e=Xt.contentWindow,t=e.MP_SDK;try{return yield t.connect(e,{provider:Jt.provider})}catch(n){return yield t.connect(e,Jt.sdkKey)}}if("local"===Jt.sdkVersion){const{connect:e}=yield a.e(562).then(a.bind(a,562));return yield e(Xt,{provider:Jt.provider})}try{return yield window.MP_SDK.connect(Xt,{provider:Jt.provider})}catch(e){return yield window.MP_SDK.connect(Xt,Jt.sdkKey,"")}}))}function en(){var e;return Yt(this,void 0,void 0,(function*(){try{Jt.useDirectMessages||"local"===Jt.sdkVersion||(yield(t=Jt.sdkVersion,new Promise((e=>{console.log("Loading SDK bootstrap version:",t);var n="https://static.matterport.com/showcase-sdk/"+t+"/sdk.js",r=document.createElement("script");r.type="text/javascript",r.src=n,r.onload=e,document.head.appendChild(r)}))));const e=yield Zt();window.SDK_INSTANCE=e,s(e,Xt),function(e){const t=document.getElementById("react-root");t&&(0,u.s)(t).render((0,c.jsx)("div",{children:(0,c.jsx)(Qt,{sdk:e})}))}(e)}catch(e){console.error(e)}var t;window.THREE=null===(e=Xt.contentWindow)||void 0===e?void 0:e.THREE}))}!function(){Yt(this,void 0,void 0,(function*(){if(!qt.get("m")&&!qt.get("model")){const e="No model specified. Specify a model using ?m=[modelSid]",t=document.getElementById("status");throw t.classList.add("error"),t.innerText=e,Error(e)}Jt.bundleVersion?function(e,t,n){const r=t.bundleVersion,a=r.startsWith("http");e.onload=n;let l="";l+=a?r+"/showcase.html":"https://static.matterport.com/showcase-sdk/bundle/"+r+"/showcase.html";const i=new URLSearchParams(window.location.search);i.set("applicationKey",t.sdkKey),i.set("apiHost",t.host),e.src=l+"?"+decodeURIComponent(i)}(Xt,Jt,en):function(e,t,n){e.onload=n;const r=t.workshop?"/work/":"/show/",a=new URLSearchParams(window.location.search);a.set("applicationKey",t.sdkKey),e.src=t.host+r+"?"+decodeURIComponent(a.toString())}(Xt,Jt,en)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bkdGLFNBQTRCeG5CLEVBQWlCcW5CLEVBQVEwQixHQUMxRCxNQUFNQyxFQUFzQjNCLEVBQU9HLGNBQzdCeUIsRUFBYUQsRUFBb0JFLFdBQVcsUUFDbERscEIsRUFBZ0I3QyxPQUFTNHJCLEVBQ3pCLElBQUkxNkIsRUFBTSxHQUdSQSxHQURFNDZCLEVBQ0tELEVBQXFCLGlCQUVyQixxREFBdURBLEVBQXNCLGlCQUd0RixNQUFNN0IsRUFBUyxJQUFJQyxnQkFBZ0J4OUQsT0FBTzJmLFNBQVMrQyxRQUNuRDY2QyxFQUFPMzRELElBQUksaUJBQWtCNjRELEVBQU9FLFFBQ3BDSixFQUFPMzRELElBQUksVUFBVzY0RCxFQUFPQyxNQUM3QnRuQixFQUFnQjNSLElBQU1BLEVBQU0sSUFBTTg2QixtQkFBbUJoQyxHRHFGbkRpQyxDQUFtQnBwQixHQUFpQnFuQixHQUFRYSxJQzVHekMsU0FBc0Jsb0IsRUFBaUJxbkIsRUFBUTBCLEdBQ3BEL29CLEVBQWdCN0MsT0FBUzRyQixFQUN6QixNQUFNTSxFQUFhaEMsRUFBT00sU0FBVyxTQUFXLFNBQzFDUixFQUFTLElBQUlDLGdCQUFnQng5RCxPQUFPMmYsU0FBUytDLFFBQ25ENjZDLEVBQU8zNEQsSUFBSSxpQkFBa0I2NEQsRUFBT0UsUUFDcEN2bkIsRUFBZ0IzUixJQUFNZzVCLEVBQU9DLEtBQU8rQixFQUFhLElBQU1GLG1CQUFtQmhDLEVBQU9sMEQsWUR3Ry9FcTJELENBQWF0cEIsR0FBaUJxbkIsR0FBUWEsT0FYMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb250cm9scy5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWxlY3Rvci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Db250cm9sUGFuZWwudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvQ29sbGVjdGlvbkluc3BlY3Rvci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Bc3NldC9SZWdpc3Rlci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Bc3NldC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Bc3NldC9Bc3NldENvbGxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Db252ZXJzaW9uV29ybGRUb1NjcmVlbi50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Db252ZXJzaW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0Zsb29yR2V0RGF0YS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9GbG9vck1vdmVUby50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9GbG9vclNob3dBbGwudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvUm93U3BhY2VyLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL09ic2VydmFibGVDb2xsZWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL09ic2VydmFibGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvRXZlbnQudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvRmxvb3IudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTGFiZWxHZXREYXRhLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0xhYmVsLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvYXBwLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9hc3NldC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvY2FtZXJhLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9mbG9vci50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvZ3JhcGgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL2xhYmVsLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9saW5rLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9tYXR0ZXJ0YWcudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL21vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL21vZGVsLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9wb2ludGVyLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9yb29tLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9zZW5zb3IudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3N3ZWVwLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy90YWcudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3RvdXIudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3NjZW5lLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy9zaGFyZS9LZXlzLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy9zaGFyZS9LZXlTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvc2hhcmUvUG9pbnRlckJ1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0xpbmtDcmVhdGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTGlua1BvbGljeS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9MaW5rLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01hdHRlcnRhZy9FZGl0SWNvbi50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9NYXR0ZXJ0YWcvUmVnaXN0ZXJJY29uLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01hdHRlcnRhZy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9NZWFzdXJlbWVudHNHZXREYXRhLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01lYXN1cmVtZW50cy9Ub2dnbGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTWVhc3VyZW1lbnRzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01vZGVsR2V0RGF0YS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Nb2RlbEdldERldGFpbHMudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTW9kZWwudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvUGx1Z2luTG9hZC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9QbHVnaW4udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvUG9pbnRlci9FZGl0VGV4dHVyZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Qb2ludGVyL1JlZ2lzdGVyVGV4dHVyZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Qb2ludGVyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1JlbmRlcmVyR2V0U2NyZWVuUG9zaXRpb24udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvUmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9SZW5kZXJlci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Sb29tLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1NjZW5lUGF0aC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9TY2VuZURlc2VyaWFsaXplLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1NjZW5lLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1NlbnNvckFkZFNvdXJjZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9TZW5zb3IudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU2V0dGluZ3NHZXQudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU2V0dGluZ3NVcGRhdGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU2V0dGluZ3MudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU3dlZXBEaXNhYmxlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1N3ZWVwRW5hYmxlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1N3ZWVwTW9kaWZ5TmVpZ2hib3JzLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1N3ZWVwLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1N3ZWVwR3JhcGgudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0FkZC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvQWxsb3dBY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0F0dGFjaC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvRWRpdEJpbGxib2FyZC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvRWRpdENvbG9yLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9FZGl0U3RlbS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvRWRpdEljb24udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0VkaXRPcGFjaXR5LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9Nb3ZlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9PcGVuLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9SZWdpc3RlckF0dGFjaG1lbnQudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL1JlZ2lzdGVyU2FuZGJveC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvUmVtb3ZlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9Ub2dnbGVTZXR0aW5nLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy90YWdTb3J0LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0ltcG9ydFRhZ3MudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RvdXJHZXREYXRhLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RvdXIudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVmlldy9BY3RpdmF0ZVZpZXcudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVmlldy9Ub2dnbGVMYXllci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9WaWV3L0xheWVyQ29udHJvbHMudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVmlldy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9WaWV3bW9kZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9SZWFjdFJvb3QudHN4Iiwid2VicGFjazovLy8uL2N3Zi9zcmMvdXRpbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJtcF93ZWJnbDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fTtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksYmE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBjYT1uZXcgU2V0LGRhPXt9O2Z1bmN0aW9uIGVhKGEsYil7ZmEoYSxiKTtmYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZmEoYSxiKXtkYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspY2EuYWRkKGJbYV0pfVxudmFyIGhhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGphPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxrYT1cbnt9LGxhPXt9O2Z1bmN0aW9uIG1hKGEpe2lmKGlhLmNhbGwobGEsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMTtpZihqYS50ZXN0KGEpKXJldHVybiBsYVthXT0hMDtrYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG9hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG5hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gcShhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgcShiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBwYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHFhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHBhLFxucWEpO3pbYl09bmV3IHEoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShwYSxxYSk7eltiXT1uZXcgcShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShwYSxxYSk7eltiXT1uZXcgcShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHEoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcmEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pb2EoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP21hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciBzYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx0YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx1YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikseGE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBHYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEhhPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBJYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SGEmJmFbSGFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixKYTtmdW5jdGlvbiBLYShhKXtpZih2b2lkIDA9PT1KYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtKYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrSmErYX12YXIgTGE9ITE7XG5mdW5jdGlvbiBNYShhLGIpe2lmKCFhfHxMYSlyZXR1cm5cIlwiO0xhPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e0xhPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/S2EoYSk6XCJcIn1cbmZ1bmN0aW9uIE5hKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBLYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIEthKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBLYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIEthKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1NYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1NYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1NYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIE9hKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdmE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdWE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRGE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQWE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQmE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgRWE6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOk9hKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgRmE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIE9hKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBQYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBPYShiKTtjYXNlIDg6cmV0dXJuIGI9PT13YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBRYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gU2EoYSl7dmFyIGI9UmEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFRhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1TYShhKSl9ZnVuY3Rpb24gVWEoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVJhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gVmEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gV2EoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFhhKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVFhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gWWEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZyYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gWmEoYSxiKXtZYShhLGIpO3ZhciBjPVFhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpPyRhKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJiRhKGEsYi50eXBlLFFhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uICRhKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8VmEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBiYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gY2IoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1FhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBkYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGViKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihiYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6UWEoYyl9fVxuZnVuY3Rpb24gZmIoYSxiKXt2YXIgYz1RYShiLnZhbHVlKSxkPVFhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gZ2IoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBoYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gaWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2hiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGpiLGtiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle2piPWpifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2piLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPWpiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIGxiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgbWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sbmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKG1iKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe25iLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7bWJbYl09bWJbYV19KX0pO2Z1bmN0aW9uIG9iKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxtYi5oYXNPd25Qcm9wZXJ0eShhKSYmbWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gcGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9b2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgcWI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHJiKGEsYil7aWYoYil7aWYocWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHNiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgdGI9bnVsbDtmdW5jdGlvbiB1YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHZiPW51bGwsd2I9bnVsbCx4Yj1udWxsO1xuZnVuY3Rpb24geWIoYSl7aWYoYT16YihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHZiKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9QWIoYiksdmIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gQmIoYSl7d2I/eGI/eGIucHVzaChhKTp4Yj1bYV06d2I9YX1mdW5jdGlvbiBDYigpe2lmKHdiKXt2YXIgYT13YixiPXhiO3hiPXdiPW51bGw7eWIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKXliKGJbYV0pfX1mdW5jdGlvbiBEYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEViKCl7fXZhciBGYj0hMTtmdW5jdGlvbiBHYihhLGIsYyl7aWYoRmIpcmV0dXJuIGEoYixjKTtGYj0hMDt0cnl7cmV0dXJuIERiKGEsYixjKX1maW5hbGx5e2lmKEZiPSExLG51bGwhPT13Ynx8bnVsbCE9PXhiKUViKCksQ2IoKX19XG5mdW5jdGlvbiBIYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPUFiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgSWI9ITE7aWYoaGEpdHJ5e3ZhciBKYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSmIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0liPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLEpiLEpiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixKYixKYil9Y2F0Y2goYSl7SWI9ITF9ZnVuY3Rpb24gS2IoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIExiPSExLE1iPW51bGwsTmI9ITEsT2I9bnVsbCxQYj17b25FcnJvcjpmdW5jdGlvbihhKXtMYj0hMDtNYj1hfX07ZnVuY3Rpb24gUWIoYSxiLGMsZCxlLGYsZyxoLGspe0xiPSExO01iPW51bGw7S2IuYXBwbHkoUGIsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXtRYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoTGIpe2lmKExiKXt2YXIgbD1NYjtMYj0hMTtNYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtOYnx8KE5iPSEwLE9iPWwpfX1mdW5jdGlvbiBTYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gVWIoYSl7aWYoU2IoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gVmIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9U2IoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gVWIoZSksYTtpZihmPT09ZClyZXR1cm4gVWIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBXYihhKXthPVZiKGEpO3JldHVybiBudWxsIT09YT9YYihhKTpudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj1YYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBZYj1iYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFpiPWJhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLCRiPWJhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGFjPWJhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxEPWJhLnVuc3RhYmxlX25vdyxiYz1iYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxjYz1iYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxkYz1iYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlYz1iYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxmYz1iYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxnYz1iYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksaGM9bnVsbCxpYz1udWxsO2Z1bmN0aW9uIGpjKGEpe2lmKGljJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaWMub25Db21taXRGaWJlclJvb3QpdHJ5e2ljLm9uQ29tbWl0RmliZXJSb290KGhjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBsYz1NYXRoLmNsejMyP01hdGguY2x6MzI6a2MsbWM9TWF0aC5sb2csbmM9TWF0aC5MTjI7ZnVuY3Rpb24ga2MoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0obWMoYSkvbmN8MCl8MH12YXIgb2M9NjQscGM9NDE5NDMwNDtcbmZ1bmN0aW9uIHFjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD1xYyhoKTooZiY9ZywwIT09ZiYmKGQ9cWMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXFjKGcpOjAhPT1mJiYoZD1xYyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLWxjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB0YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtbGMoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109c2MoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHVjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB2YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1mdW5jdGlvbiB3YyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtbGMoYik7YVtiXT1jfVxuZnVuY3Rpb24geGMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLWxjKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1mdW5jdGlvbiB5YyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1sYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgRT0wO2Z1bmN0aW9uIHpjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9XG52YXIgQWMsQmMsQ2MsRGMsRWMsRmM9ITEsR2M9W10sSGM9bnVsbCxJYz1udWxsLEpjPW51bGwsS2M9bmV3IE1hcCxMYz1uZXcgTWFwLE1jPVtdLE5jPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIE9jKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6SGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkljPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkpjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpLYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpMYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFBjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9emIoYiksbnVsbCE9PWImJkJjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFFjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIEhjPVBjKEhjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBJYz1QYyhJYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gSmM9UGMoSmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtLYy5zZXQoZixQYyhLYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsTGMuc2V0KGYsUGMoTGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUmMoYSl7dmFyIGI9U2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1TYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1UYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtFYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Q2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gVGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVVjKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3RiPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt0Yj1udWxsfWVsc2UgcmV0dXJuIGI9emIoYyksbnVsbCE9PWImJkJjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFZjKGEsYixjKXtUYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gV2MoKXtGYz0hMTtudWxsIT09SGMmJlRjKEhjKSYmKEhjPW51bGwpO251bGwhPT1JYyYmVGMoSWMpJiYoSWM9bnVsbCk7bnVsbCE9PUpjJiZUYyhKYykmJihKYz1udWxsKTtLYy5mb3JFYWNoKFZjKTtMYy5mb3JFYWNoKFZjKX1cbmZ1bmN0aW9uIFhjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxGY3x8KEZjPSEwLGJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soYmEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksV2MpKSl9XG5mdW5jdGlvbiBZYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBYYyhiLGEpfWlmKDA8R2MubGVuZ3RoKXtYYyhHY1swXSxhKTtmb3IodmFyIGM9MTtjPEdjLmxlbmd0aDtjKyspe3ZhciBkPUdjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09SGMmJlhjKEhjLGEpO251bGwhPT1JYyYmWGMoSWMsYSk7bnVsbCE9PUpjJiZYYyhKYyxhKTtLYy5mb3JFYWNoKGIpO0xjLmZvckVhY2goYik7Zm9yKGM9MDtjPE1jLmxlbmd0aDtjKyspZD1NY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8TWMubGVuZ3RoJiYoYz1NY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylSYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJk1jLnNoaWZ0KCl9dmFyIFpjPXNhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO1xuZnVuY3Rpb24gJGMoYSxiLGMsZCl7dmFyIGU9RSxmPVpjLnRyYW5zaXRpb247WmMudHJhbnNpdGlvbj1udWxsO3RyeXtFPTEsYWQoYSxiLGMsZCl9ZmluYWxseXtFPWUsWmMudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBiZChhLGIsYyxkKXt2YXIgZT1FLGY9WmMudHJhbnNpdGlvbjtaYy50cmFuc2l0aW9uPW51bGw7dHJ5e0U9NCxhZChhLGIsYyxkKX1maW5hbGx5e0U9ZSxaYy50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gYWQoYSxiLGMsZCl7dmFyIGU9VWMoYSxiLGMsZCk7aWYobnVsbD09PWUpY2QoYSxiLGQsZGQsYyksT2MoYSxkKTtlbHNlIGlmKFFjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKE9jKGEsZCksYiY0JiYtMTxOYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9emIoZSk7bnVsbCE9PWYmJkFjKGYpO2Y9VWMoYSxiLGMsZCk7bnVsbD09PWYmJmNkKGEsYixkLGRkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGNkKGEsYixkLG51bGwsYyl9dmFyIGRkPW51bGw7XG5mdW5jdGlvbiBVYyhhLGIsYyxkKXtkZD1udWxsO2E9dWIoZCk7YT1TYyhhKTtpZihudWxsIT09YSlpZihiPVNiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVRiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtkZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goYmMoKSl7Y2FzZSBjYzpyZXR1cm4gMTtjYXNlIGRjOnJldHVybiA0O2Nhc2UgZWM6Y2FzZSBmYzpyZXR1cm4gMTY7Y2FzZSBnYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIgZmQ9bnVsbCxnZD1udWxsLGhkPW51bGw7ZnVuY3Rpb24gaWQoKXtpZihoZClyZXR1cm4gaGQ7dmFyIGEsYj1nZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBmZD9mZC52YWx1ZTpmZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBoZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gamQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24ga2QoKXtyZXR1cm4hMH1mdW5jdGlvbiBsZCgpe3JldHVybiExfVxuZnVuY3Rpb24gbWQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/a2Q6bGQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1sZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1rZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1rZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDprZH0pO3JldHVybiBifVxudmFyIG5kPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LG9kPW1kKG5kKSxwZD1BKHt9LG5kLHt2aWV3OjAsZGV0YWlsOjB9KSxxZD1tZChwZCkscmQsc2QsdGQsdmQ9QSh7fSxwZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp1ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT10ZCYmKHRkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyhyZD1hLnNjcmVlblgtdGQuc2NyZWVuWCxzZD1hLnNjcmVlblktdGQuc2NyZWVuWSk6c2Q9cmQ9MCx0ZD1hKTtyZXR1cm4gcmR9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTpzZH19KSx3ZD1tZCh2ZCkseGQ9QSh7fSx2ZCx7ZGF0YVRyYW5zZmVyOjB9KSx5ZD1tZCh4ZCksemQ9QSh7fSxwZCx7cmVsYXRlZFRhcmdldDowfSksQWQ9bWQoemQpLEJkPUEoe30sbmQse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLENkPW1kKEJkKSxEZD1BKHt9LG5kLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksRWQ9bWQoRGQpLEZkPUEoe30sbmQse2RhdGE6MH0pLEdkPW1kKEZkKSxIZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxJZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sSmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIEtkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9SmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB1ZCgpe3JldHVybiBLZH1cbnZhciBMZD1BKHt9LHBkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUhkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWpkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9JZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnVkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9qZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2pkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksTWQ9bWQoTGQpLE5kPUEoe30sdmQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksT2Q9bWQoTmQpLFBkPUEoe30scGQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp1ZH0pLFFkPW1kKFBkKSxSZD1BKHt9LG5kLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFNkPW1kKFJkKSxUZD1BKHt9LHZkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksVWQ9bWQoVGQpLFZkPVs5LDEzLDI3LDMyXSxXZD1oYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csWGQ9bnVsbDtoYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoWGQ9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgWWQ9aGEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFYZCxaZD1oYSYmKCFXZHx8WGQmJjg8WGQmJjExPj1YZCksJGQ9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksYWU9ITE7XG5mdW5jdGlvbiBiZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PVZkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGNlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGRlPSExO2Z1bmN0aW9uIGVlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBjZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7YWU9ITA7cmV0dXJuICRkO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PSRkJiZhZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBmZShhLGIpe2lmKGRlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFXZCYmYmUoYSxiKT8oYT1pZCgpLGhkPWdkPWZkPW51bGwsZGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIFpkJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBnZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBoZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBpZShhLGIsYyxkKXtCYihkKTtiPWplKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgb2QoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIga2U9bnVsbCxsZT1udWxsO2Z1bmN0aW9uIG1lKGEpe25lKGEsMCl9ZnVuY3Rpb24gb2UoYSl7dmFyIGI9cGUoYSk7aWYoVWEoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiBxZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciByZT0hMTtpZihoYSl7dmFyIHNlO2lmKGhhKXt2YXIgdGU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZighdGUpe3ZhciB1ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3VlLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7dGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHVlLm9uaW5wdXR9c2U9dGV9ZWxzZSBzZT0hMTtyZT1zZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiB2ZSgpe2tlJiYoa2UuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsd2UpLGxlPWtlPW51bGwpfWZ1bmN0aW9uIHdlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZvZShsZSkpe3ZhciBiPVtdO2llKGIsbGUsYSx1YihhKSk7R2IobWUsYil9fVxuZnVuY3Rpb24geGUoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8odmUoKSxrZT1iLGxlPWMsa2UuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsd2UpKTpcImZvY3Vzb3V0XCI9PT1hJiZ2ZSgpfWZ1bmN0aW9uIHllKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIG9lKGxlKX1mdW5jdGlvbiB6ZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIG9lKGIpfWZ1bmN0aW9uIEFlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIG9lKGIpfWZ1bmN0aW9uIEJlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgQ2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6QmU7XG5mdW5jdGlvbiBEZShhLGIpe2lmKENlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighaWEuY2FsbChiLGUpfHwhQ2UoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBFZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBGZShhLGIpe3ZhciBjPUVlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUVlKGMpfX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0dlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIEhlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVZhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVZhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIEllKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBKZShhKXt2YXIgYj1IZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmR2UoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJkllKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUZlKGMsZik7dmFyIGc9RmUoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBLZT1oYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLExlPW51bGwsTWU9bnVsbCxOZT1udWxsLE9lPSExO1xuZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O09lfHxudWxsPT1MZXx8TGUhPT1WYShkKXx8KGQ9TGUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmSWUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxOZSYmRGUoTmUsZCl8fChOZT1kLGQ9amUoTWUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgb2QoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PUxlKSkpfVxuZnVuY3Rpb24gUWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgUmU9e2FuaW1hdGlvbmVuZDpRZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpRZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlFlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sU2U9e30sVGU9e307XG5oYSYmKFRlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFJlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFJlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFJlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFJlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gVWUoYSl7aWYoU2VbYV0pcmV0dXJuIFNlW2FdO2lmKCFSZVthXSlyZXR1cm4gYTt2YXIgYj1SZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBUZSlyZXR1cm4gU2VbYV09YltjXTtyZXR1cm4gYX12YXIgVmU9VWUoXCJhbmltYXRpb25lbmRcIiksV2U9VWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWGU9VWUoXCJhbmltYXRpb25zdGFydFwiKSxZZT1VZShcInRyYW5zaXRpb25lbmRcIiksWmU9bmV3IE1hcCwkZT1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gYWYoYSxiKXtaZS5zZXQoYSxiKTtlYShiLFthXSl9Zm9yKHZhciBiZj0wO2JmPCRlLmxlbmd0aDtiZisrKXt2YXIgY2Y9JGVbYmZdLGRmPWNmLnRvTG93ZXJDYXNlKCksZWY9Y2ZbMF0udG9VcHBlckNhc2UoKStjZi5zbGljZSgxKTthZihkZixcIm9uXCIrZWYpfWFmKFZlLFwib25BbmltYXRpb25FbmRcIik7YWYoV2UsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTthZihYZSxcIm9uQW5pbWF0aW9uU3RhcnRcIik7YWYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTthZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7YWYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2FmKFllLFwib25UcmFuc2l0aW9uRW5kXCIpO2ZhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZmEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtmYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuZmEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZWEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtlYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2VhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2VhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmVhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBmZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGdmPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGZmKSk7XG5mdW5jdGlvbiBoZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztSYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gbmUoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtoZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO2hmKGUsaCxsKTtmPWt9fX1pZihOYil0aHJvdyBhPU9iLE5iPSExLE9iPW51bGwsYTt9XG5mdW5jdGlvbiBGKGEsYil7dmFyIGM9YltqZl07dm9pZCAwPT09YyYmKGM9YltqZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChrZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIGxmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtrZihjLGEsZCxiKX12YXIgbWY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBuZihhKXtpZighYVttZl0pe2FbbWZdPSEwO2NhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihnZi5oYXMoYil8fGxmKGIsITEsYSksbGYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YlttZl18fChiW21mXT0hMCxsZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBrZihhLGIsYyxkKXtzd2l0Y2goZWQoYikpe2Nhc2UgMTp2YXIgZT0kYzticmVhaztjYXNlIDQ6ZT1iZDticmVhaztkZWZhdWx0OmU9YWR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUlifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGNkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9U2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUdiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXViKGMpLGc9W107XG5hOnt2YXIgaD1aZS5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9b2Qsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09amQoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9TWQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUFkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1BZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az13ZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxueWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1RZDticmVhaztjYXNlIFZlOmNhc2UgV2U6Y2FzZSBYZTprPUNkO2JyZWFrO2Nhc2UgWWU6az1TZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az1xZDticmVhaztjYXNlIFwid2hlZWxcIjprPVVkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9RWQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1PZH12YXIgdj0wIT09KGImNCksQz0hdiYmXCJzY3JvbGxcIj09PWEsdD12P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Y9W107Zm9yKHZhciByPWQseDtudWxsIT09XG5yOyl7eD1yO3ZhciBCPXguc3RhdGVOb2RlOzU9PT14LnRhZyYmbnVsbCE9PUImJih4PUIsbnVsbCE9PXQmJihCPUhiKHIsdCksbnVsbCE9QiYmdi5wdXNoKG9mKHIsQix4KSkpKTtpZihDKWJyZWFrO3I9ci5yZXR1cm59MDx2Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnZ9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09dGImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihTYyhuKXx8bltwZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9TYyhuKTpudWxsLG51bGwhPT1cbm4mJihDPVNiKG4pLG4hPT1DfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dj13ZDtCPVwib25Nb3VzZUxlYXZlXCI7dD1cIm9uTW91c2VFbnRlclwiO3I9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl2PU9kLEI9XCJvblBvaW50ZXJMZWF2ZVwiLHQ9XCJvblBvaW50ZXJFbnRlclwiLHI9XCJwb2ludGVyXCI7Qz1udWxsPT1rP2g6cGUoayk7eD1udWxsPT1uP2g6cGUobik7aD1uZXcgdihCLHIrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1DO2gucmVsYXRlZFRhcmdldD14O0I9bnVsbDtTYyhlKT09PWQmJih2PW5ldyB2KHQscitcImVudGVyXCIsbixjLGUpLHYudGFyZ2V0PXgsdi5yZWxhdGVkVGFyZ2V0PUMsQj12KTtDPUI7aWYoayYmbiliOnt2PWs7dD1uO3I9MDtmb3IoeD12O3g7eD1xZih4KSlyKys7eD0wO2ZvcihCPXQ7QjtCPXFmKEIpKXgrKztmb3IoOzA8ci14Oyl2PXFmKHYpLHItLTtmb3IoOzA8eC1yOyl0PVxucWYodCkseC0tO2Zvcig7ci0tOyl7aWYodj09PXR8fG51bGwhPT10JiZ2PT09dC5hbHRlcm5hdGUpYnJlYWsgYjt2PXFmKHYpO3Q9cWYodCl9dj1udWxsfWVsc2Ugdj1udWxsO251bGwhPT1rJiZyZihnLGgsayx2LCExKTtudWxsIT09biYmbnVsbCE9PUMmJnJmKGcsQyxuLHYsITApfX19YTp7aD1kP3BlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIE89cWU7ZWxzZSBpZihoZShoKSlpZihyZSlPPUFlO2Vsc2V7Tz15ZTt2YXIgVD14ZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKE89emUpO2lmKE8mJihPPU8oYSxkKSkpe2llKGcsTyxjLGUpO2JyZWFrIGF9VCYmVChhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKFQ9aC5fd3JhcHBlclN0YXRlKSYmXG5ULmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJiRhKGgsXCJudW1iZXJcIixoLnZhbHVlKX1UPWQ/cGUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKGhlKFQpfHxcInRydWVcIj09PVQuY29udGVudEVkaXRhYmxlKUxlPVQsTWU9ZCxOZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOk5lPU1lPUxlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOk9lPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpPZT0hMTtQZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKEtlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6UGUoZyxjLGUpfXZhciB6YTtpZihXZCliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgZGU/YmUoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoWmQmJlwia29cIiE9PWMubG9jYWxlJiYoZGV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmZGUmJih6YT1pZCgpKTooZmQ9ZSxnZD1cInZhbHVlXCJpbiBmZD9mZC52YWx1ZTpmZC50ZXh0Q29udGVudCxkZT0hMCkpLFQ9amUoZCxMKSwwPFQubGVuZ3RoJiYoTD1uZXcgR2QoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOlR9KSx6YT9MLmRhdGE9emE6KHphPWNlKGMpLG51bGwhPT16YSYmKEwuZGF0YT16YSkpKSk7aWYoemE9WWQ/ZWUoYSxjKTpmZShhLGMpKWQ9amUoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IEdkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9emEpfW5lKGcsYil9KX1mdW5jdGlvbiBvZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIGplKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9SGIoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQob2YoYSxmLGUpKSxmPUhiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKG9mKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gcWYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHJmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9SGIoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQob2YoYyxrLGgpKSk6ZXx8KGs9SGIoYyxmKSxudWxsIT1rJiZnLnB1c2gob2YoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgc2Y9L1xcclxcbj8vZyx0Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gdWYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZShzZixcIlxcblwiKS5yZXBsYWNlKHRmLFwiXCIpfWZ1bmN0aW9uIHZmKGEsYixjKXtiPXVmKGIpO2lmKHVmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiB3Zigpe31cbnZhciB4Zj1udWxsO2Z1bmN0aW9uIHlmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIHpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEFmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxCZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxEZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBCZj9mdW5jdGlvbihhKXtyZXR1cm4gQmYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKENmKX06emY7ZnVuY3Rpb24gQ2YoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtZYyhiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7WWMoYil9ZnVuY3Rpb24gRmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIEdmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBIZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxJZj1cIl9fcmVhY3RGaWJlciRcIitIZixKZj1cIl9fcmVhY3RQcm9wcyRcIitIZixwZj1cIl9fcmVhY3RDb250YWluZXIkXCIrSGYsamY9XCJfX3JlYWN0RXZlbnRzJFwiK0hmLEtmPVwiX19yZWFjdExpc3RlbmVycyRcIitIZixMZj1cIl9fcmVhY3RIYW5kbGVzJFwiK0hmO1xuZnVuY3Rpb24gU2MoYSl7dmFyIGI9YVtJZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbcGZdfHxjW0lmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUdmKGEpO251bGwhPT1hOyl7aWYoYz1hW0lmXSlyZXR1cm4gYzthPUdmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6YihhKXthPWFbSWZdfHxhW3BmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gcGUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gQWIoYSl7cmV0dXJuIGFbSmZdfHxudWxsfXZhciBNZj1bXSxOZj0tMTtmdW5jdGlvbiBPZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEcoYSl7MD5OZnx8KGEuY3VycmVudD1NZltOZl0sTWZbTmZdPW51bGwsTmYtLSl9ZnVuY3Rpb24gSChhLGIpe05mKys7TWZbTmZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgUGY9e30sST1PZihQZiksUWY9T2YoITEpLFJmPVBmO2Z1bmN0aW9uIFNmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gUGY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBUZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIFVmKCl7RyhRZik7RyhJKX1mdW5jdGlvbiBWZihhLGIsYyl7aWYoSS5jdXJyZW50IT09UGYpdGhyb3cgRXJyb3IocCgxNjgpKTtIKEksYik7SChRZixjKX1mdW5jdGlvbiBXZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFBhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIFhmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxQZjtSZj1JLmN1cnJlbnQ7SChJLGEpO0goUWYsUWYuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gWWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1XZihhLGIsUmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxHKFFmKSxHKEkpLEgoSSxhKSk6RyhRZik7SChRZixjKX12YXIgWmY9bnVsbCwkZj0hMSxhZz0hMTtmdW5jdGlvbiBiZyhhKXtudWxsPT09WmY/WmY9W2FdOlpmLnB1c2goYSl9ZnVuY3Rpb24gY2coYSl7JGY9ITA7YmcoYSl9XG5mdW5jdGlvbiBkZygpe2lmKCFhZyYmbnVsbCE9PVpmKXthZz0hMDt2YXIgYT0wLGI9RTt0cnl7dmFyIGM9WmY7Zm9yKEU9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1aZj1udWxsOyRmPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1aZiYmKFpmPVpmLnNsaWNlKGErMSkpLFliKGNjLGRnKSxlO31maW5hbGx5e0U9YixhZz0hMX19cmV0dXJuIG51bGx9dmFyIGVnPXNhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGZnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBnZz1PZihudWxsKSxoZz1udWxsLGlnPW51bGwsamc9bnVsbDtmdW5jdGlvbiBrZygpe2pnPWlnPWhnPW51bGx9XG5mdW5jdGlvbiBsZyhhKXt2YXIgYj1nZy5jdXJyZW50O0coZ2cpO2EuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIG1nKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gbmcoYSxiKXtoZz1hO2pnPWlnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYob2c9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gcGcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKGpnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PWlnKXtpZihudWxsPT09aGcpdGhyb3cgRXJyb3IocCgzMDgpKTtpZz1hO2hnLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBpZz1pZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIHFnPW51bGwscmc9ITE7ZnVuY3Rpb24gc2coYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHRnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHVnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiYoYz1jLnNoYXJlZCxudWxsIT09SiYmMCE9PShhLm1vZGUmMSkmJjA9PT0oSyYyKT8oYT1jLmludGVybGVhdmVkLG51bGw9PT1hPyhiLm5leHQ9YixudWxsPT09cWc/cWc9W2NdOnFnLnB1c2goYykpOihiLm5leHQ9YS5uZXh0LGEubmV4dD1iKSxjLmludGVybGVhdmVkPWIpOihhPWMucGVuZGluZyxudWxsPT09YT9iLm5leHQ9YjooYi5uZXh0PWEubmV4dCxhLm5leHQ9YiksYy5wZW5kaW5nPWIpKX1mdW5jdGlvbiB3ZyhhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO3ljKGEsYyl9fVxuZnVuY3Rpb24geGcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIHlnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7cmc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgdz1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHU9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmdSk9PT11KXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHY9aDt1PWI7eT1jO3N3aXRjaCh2LnRhZyl7Y2FzZSAxOm49di5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXt3PW4uY2FsbCh5LHcsdSk7YnJlYWsgYX13PW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49di5wYXlsb2FkO3U9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHksdyx1KTpuO2lmKG51bGw9PT11fHx2b2lkIDA9PT11KWJyZWFrIGE7dz1BKHt9LHcsdSk7YnJlYWsgYTtjYXNlIDI6cmc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQsdT1lLmVmZmVjdHMsbnVsbD09PXU/ZS5lZmZlY3RzPVtoXTp1LnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTp1LHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9dyk6bT1tLm5leHQ9eSxnfD11O1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgdT1oLGg9dS5uZXh0LHUubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9dSxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXcpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO3pnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9d319XG5mdW5jdGlvbiBBZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBCZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBDZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgRmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/U2IoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TSgpLGU9RGcoYSksZj11ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTt2ZyhhLGYpO2I9RWcoYSxlLGQpO251bGwhPT1iJiZ3ZyhiLGEsZSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TSgpLGU9RGcoYSksZj11ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO3ZnKGEsZik7Yj1FZyhhLGUsZCk7bnVsbCE9PWImJndnKGIsYSxlKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1NKCksZD1EZyhhKSxlPXVnKGMsXG5kKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTt2ZyhhLGUpO2I9RWcoYSxkLGMpO251bGwhPT1iJiZ3ZyhiLGEsZCl9fTtmdW5jdGlvbiBHZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFEZShjLGQpfHwhRGUoZSxmKTohMH1cbmZ1bmN0aW9uIEhnKGEsYixjKXt2YXIgZD0hMSxlPVBmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXBnKGYpOihlPVRmKGIpP1JmOkkuY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1NmKGEsZSk6UGYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1GZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIElnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZGZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIEpnKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Qmc7c2coYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1wZyhmKTooZj1UZihiKT9SZjpJLmN1cnJlbnQsZS5jb250ZXh0PVNmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihDZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZGZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx5ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX12YXIgS2c9W10sTGc9MCxNZz1udWxsLE5nPTAsT2c9W10sUGc9MCxRZz1udWxsLFJnPTEsU2c9XCJcIjtmdW5jdGlvbiBUZyhhLGIpe0tnW0xnKytdPU5nO0tnW0xnKytdPU1nO01nPWE7Tmc9Yn1cbmZ1bmN0aW9uIFVnKGEsYixjKXtPZ1tQZysrXT1SZztPZ1tQZysrXT1TZztPZ1tQZysrXT1RZztRZz1hO3ZhciBkPVJnO2E9U2c7dmFyIGU9MzItbGMoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItbGMoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztSZz0xPDwzMi1sYyhiKStlfGM8PGV8ZDtTZz1mK2F9ZWxzZSBSZz0xPDxmfGM8PGV8ZCxTZz1hfWZ1bmN0aW9uIFZnKGEpe251bGwhPT1hLnJldHVybiYmKFRnKGEsMSksVWcoYSwxLDApKX1mdW5jdGlvbiBXZyhhKXtmb3IoO2E9PT1NZzspTWc9S2dbLS1MZ10sS2dbTGddPW51bGwsTmc9S2dbLS1MZ10sS2dbTGddPW51bGw7Zm9yKDthPT09UWc7KVFnPU9nWy0tUGddLE9nW1BnXT1udWxsLFNnPU9nWy0tUGddLE9nW1BnXT1udWxsLFJnPU9nWy0tUGddLE9nW1BnXT1udWxsfXZhciBYZz1udWxsLFlnPW51bGwsTj0hMSxaZz1udWxsO1xuZnVuY3Rpb24gJGcoYSxiKXt2YXIgYz1haCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIGJoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLFhnPWEsWWc9RmYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLFhnPWEsWWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PVFnP3tpZDpSZyxvdmVyZmxvdzpTZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPWFoKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLFhnPWEsWWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBjaChhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIGRoKGEpe2lmKE4pe3ZhciBiPVlnO2lmKGIpe3ZhciBjPWI7aWYoIWJoKGEsYikpe2lmKGNoKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1GZihjLm5leHRTaWJsaW5nKTt2YXIgZD1YZztiJiZiaChhLGIpPyRnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLE49ITEsWGc9YSl9fWVsc2V7aWYoY2goYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtOPSExO1hnPWF9fX1mdW5jdGlvbiBlaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47WGc9YX1cbmZ1bmN0aW9uIGZoKGEpe2lmKGEhPT1YZylyZXR1cm4hMTtpZighTilyZXR1cm4gZWgoYSksTj0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiF5ZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9WWcpKXtpZihjaChhKSl7Zm9yKGE9WWc7YTspYT1GZihhLm5leHRTaWJsaW5nKTt0aHJvdyBFcnJvcihwKDQxOCkpO31mb3IoO2I7KSRnKGEsYiksYj1GZihiLm5leHRTaWJsaW5nKX1laChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe1lnPUZmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlxuXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31ZZz1udWxsfX1lbHNlIFlnPVhnP0ZmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIGdoKCl7WWc9WGc9bnVsbDtOPSExfWZ1bmN0aW9uIGhoKGEpe251bGw9PT1aZz9aZz1bYV06WmcucHVzaChhKX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09QmcmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIGpoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIGtoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiBsaChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1taChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPW5oKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT12YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09RmEmJmtoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9aWgoYSxiLGMpLGQucmV0dXJuPWEsZDtkPW9oKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPWloKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9cGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPXFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdyhhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPW5oKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHRhOnJldHVybiBjPW9oKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9aWgoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHVhOnJldHVybiBiPXBoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEZhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHcoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGJiKGIpfHxJYShiKSlyZXR1cm4gYj1xaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtqaChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHUoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2UgdWE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBGYTpyZXR1cm4gZT1jLl9pbml0LHUoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihiYihjKXx8SWEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO2poKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB1YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEZhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihiYihkKXx8SWEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO2poKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG49bnVsbCxtPWcscj1nPTAseD1udWxsO251bGwhPT1tJiZyPGgubGVuZ3RoO3IrKyl7bS5pbmRleD5yPyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD11KGUsbSxoW3JdLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyxyKTtudWxsPT09bj9sPXQ6bi5zaWJsaW5nPXQ7bj10O209eH1pZihyPT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxOJiZUZyhlLHIpLGw7aWYobnVsbD09PW0pe2Zvcig7cjxoLmxlbmd0aDtyKyspbT13KGUsaFtyXSxrKSxudWxsIT09bSYmKGc9ZihtLGcsciksbnVsbD09PW4/bD1tOm4uc2libGluZz1tLG49bSk7TiYmVGcoZSxyKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7cjxoLmxlbmd0aDtyKyspeD15KG0sZSxyLGhbcl0sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1cbngua2V5P3I6eC5rZXkpLGc9Zih4LGcsciksbnVsbD09PW4/bD14Om4uc2libGluZz14LG49eCk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtOJiZUZyhlLHIpO3JldHVybiBsfWZ1bmN0aW9uIHYoZSxnLGgsayl7dmFyIGw9SWEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciBtPWw9bnVsbCxuPWcscj1nPTAseD1udWxsLHQ9aC5uZXh0KCk7bnVsbCE9PW4mJiF0LmRvbmU7cisrLHQ9aC5uZXh0KCkpe24uaW5kZXg+cj8oeD1uLG49bnVsbCk6eD1uLnNpYmxpbmc7dmFyIHY9dShlLG4sdC52YWx1ZSxrKTtpZihudWxsPT09dil7bnVsbD09PW4mJihuPXgpO2JyZWFrfWEmJm4mJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih2LGcscik7bnVsbD09PW0/bD12Om0uc2libGluZz12O209djtuPXh9aWYodC5kb25lKXJldHVybiBjKGUsXG5uKSxOJiZUZyhlLHIpLGw7aWYobnVsbD09PW4pe2Zvcig7IXQuZG9uZTtyKyssdD1oLm5leHQoKSl0PXcoZSx0LnZhbHVlLGspLG51bGwhPT10JiYoZz1mKHQsZyxyKSxudWxsPT09bT9sPXQ6bS5zaWJsaW5nPXQsbT10KTtOJiZUZyhlLHIpO3JldHVybiBsfWZvcihuPWQoZSxuKTshdC5kb25lO3IrKyx0PWgubmV4dCgpKXQ9eShuLGUscix0LnZhbHVlLGspLG51bGwhPT10JiYoYSYmbnVsbCE9PXQuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09dC5rZXk/cjp0LmtleSksZz1mKHQsZyxyKSxudWxsPT09bT9sPXQ6bS5zaWJsaW5nPXQsbT10KTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO04mJlRnKGUscik7cmV0dXJuIGx9ZnVuY3Rpb24gQyhhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT12YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB0YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT12YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09RmEmJmtoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1paChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09dmE/KGQ9cWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPW9oKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPWloKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB1YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXBoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgRmE6cmV0dXJuIGw9Zi5faW5pdCxDKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGJiKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKElhKGYpKXJldHVybiB2KGEsZCxmLGgpO2poKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9bmgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gQ312YXIgcmg9bGgoITApLHNoPWxoKCExKSx0aD17fSx1aD1PZih0aCksdmg9T2YodGgpLHdoPU9mKHRoKTtmdW5jdGlvbiB4aChhKXtpZihhPT09dGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiB5aChhLGIpe0god2gsYik7SCh2aCxhKTtIKHVoLHRoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmliKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1pYihiLGEpfUcodWgpO0godWgsYil9ZnVuY3Rpb24gemgoKXtHKHVoKTtHKHZoKTtHKHdoKX1cbmZ1bmN0aW9uIEFoKGEpe3hoKHdoLmN1cnJlbnQpO3ZhciBiPXhoKHVoLmN1cnJlbnQpO3ZhciBjPWliKGIsYS50eXBlKTtiIT09YyYmKEgodmgsYSksSCh1aCxjKSl9ZnVuY3Rpb24gQmgoYSl7dmguY3VycmVudD09PWEmJihHKHVoKSxHKHZoKSl9dmFyIFA9T2YoMCk7XG5mdW5jdGlvbiBDaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgRGg9W107XG5mdW5jdGlvbiBFaCgpe2Zvcih2YXIgYT0wO2E8RGgubGVuZ3RoO2ErKylEaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO0RoLmxlbmd0aD0wfXZhciBGaD1zYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEdoPXNhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEhoPTAsUT1udWxsLFI9bnVsbCxTPW51bGwsSWg9ITEsSmg9ITEsS2g9MCxMaD0wO2Z1bmN0aW9uIFUoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBNaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFDZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gTmgoYSxiLGMsZCxlLGYpe0hoPWY7UT1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7RmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9PaDpQaDthPWMoZCxlKTtpZihKaCl7Zj0wO2Rve0poPSExO0toPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1M9Uj1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtGaC5jdXJyZW50PVFoO2E9YyhkLGUpfXdoaWxlKEpoKX1GaC5jdXJyZW50PVJoO2I9bnVsbCE9PVImJm51bGwhPT1SLm5leHQ7SGg9MDtTPVI9UT1udWxsO0loPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBTaCgpe3ZhciBhPTAhPT1LaDtLaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Uz9RLm1lbW9pemVkU3RhdGU9Uz1hOlM9Uy5uZXh0PWE7cmV0dXJuIFN9ZnVuY3Rpb24gVWgoKXtpZihudWxsPT09Uil7dmFyIGE9US5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ui5uZXh0O3ZhciBiPW51bGw9PT1TP1EubWVtb2l6ZWRTdGF0ZTpTLm5leHQ7aWYobnVsbCE9PWIpUz1iLFI9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Uj1hO2E9e21lbW9pemVkU3RhdGU6Ui5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpSLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ui5iYXNlUXVldWUscXVldWU6Ui5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1TP1EubWVtb2l6ZWRTdGF0ZT1TPWE6Uz1TLm5leHQ9YX1yZXR1cm4gU31cbmZ1bmN0aW9uIFZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gV2goYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1SLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChIaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciB3PXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXcsZz1kKTprPWsubmV4dD13O1EubGFuZXN8PW07emd8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7Q2UoZCxiLm1lbW9pemVkU3RhdGUpfHwob2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsUS5sYW5lc3w9Zix6Z3w9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIFhoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtDZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChvZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIFloKCl7fVxuZnVuY3Rpb24gWmgoYSxiKXt2YXIgYz1RLGQ9VWgoKSxlPWIoKSxmPSFDZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLG9nPSEwKTtkPWQucXVldWU7JGgoYWkuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UyYmUy5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Sil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gZGkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1RLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LFEudXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gY2koYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtlaShiKSYmRWcoYSwxLC0xKX1mdW5jdGlvbiBhaShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtlaShiKSYmRWcoYSwxLC0xKX0pfWZ1bmN0aW9uIGVpKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUNlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIGZpKGEpe3ZhciBiPVRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6VmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1naS5iaW5kKG51bGwsUSxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gYmkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9US51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxRLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIGhpKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBpaShhLGIsYyxkKXt2YXIgZT1UaCgpO1EuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBqaShhLGIsYyxkKXt2YXIgZT1VaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1SKXt2YXIgZz1SLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJk1oKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWJpKGIsYyxmLGQpO3JldHVybn19US5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsZixkKX1mdW5jdGlvbiBraShhLGIpe3JldHVybiBpaSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiAkaChhLGIpe3JldHVybiBqaSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiBsaShhLGIpe3JldHVybiBqaSg0LDIsYSxiKX1mdW5jdGlvbiBtaShhLGIpe3JldHVybiBqaSg0LDQsYSxiKX1cbmZ1bmN0aW9uIG5pKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gb2koYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBqaSg0LDQsbmkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gcGkoKXt9ZnVuY3Rpb24gcWkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiByaShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBzaShhLGIpe3ZhciBjPUU7RT0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0U9YyxHaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIHRpKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiB1aShhLGIsYyl7dmFyIGQ9RGcoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmkoYSk/d2koYixjKTooeGkoYSxiLGMpLGM9TSgpLGE9RWcoYSxkLGMpLG51bGwhPT1hJiZ5aShhLGIsZCkpfVxuZnVuY3Rpb24gZ2koYSxiLGMpe3ZhciBkPURnKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHZpKGEpKXdpKGIsZSk7ZWxzZXt4aShhLGIsZSk7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihDZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9Yz1NKCk7YT1FZyhhLGQsYyk7bnVsbCE9PWEmJnlpKGEsYixkKX19ZnVuY3Rpb24gdmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1RfHxudWxsIT09YiYmYj09PVF9XG5mdW5jdGlvbiB3aShhLGIpe0poPUloPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24geGkoYSxiLGMpe251bGwhPT1KJiYwIT09KGEubW9kZSYxKSYmMD09PShLJjIpPyhhPWIuaW50ZXJsZWF2ZWQsbnVsbD09PWE/KGMubmV4dD1jLG51bGw9PT1xZz9xZz1bYl06cWcucHVzaChiKSk6KGMubmV4dD1hLm5leHQsYS5uZXh0PWMpLGIuaW50ZXJsZWF2ZWQ9Yyk6KGE9Yi5wZW5kaW5nLG51bGw9PT1hP2MubmV4dD1jOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLnBlbmRpbmc9Yyl9ZnVuY3Rpb24geWkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9Yzt5YyhhLGMpfX1cbnZhciBSaD17cmVhZENvbnRleHQ6cGcsdXNlQ2FsbGJhY2s6VSx1c2VDb250ZXh0OlUsdXNlRWZmZWN0OlUsdXNlSW1wZXJhdGl2ZUhhbmRsZTpVLHVzZUluc2VydGlvbkVmZmVjdDpVLHVzZUxheW91dEVmZmVjdDpVLHVzZU1lbW86VSx1c2VSZWR1Y2VyOlUsdXNlUmVmOlUsdXNlU3RhdGU6VSx1c2VEZWJ1Z1ZhbHVlOlUsdXNlRGVmZXJyZWRWYWx1ZTpVLHVzZVRyYW5zaXRpb246VSx1c2VNdXRhYmxlU291cmNlOlUsdXNlU3luY0V4dGVybmFsU3RvcmU6VSx1c2VJZDpVLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sT2g9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7VGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpwZyx1c2VFZmZlY3Q6a2ksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGlpKDQxOTQzMDgsXG40LG5pLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaWkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBpaSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9dWkuYmluZChudWxsLFEsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuVGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6ZmksdXNlRGVidWdWYWx1ZTpwaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWZpKGEpLGM9YlswXSxkPWJbMV07a2koZnVuY3Rpb24oKXt2YXIgYj1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2QoYSl9ZmluYWxseXtHaC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoITEpLGI9YVswXTthPXNpLmJpbmQobnVsbCxhWzFdKTtUaCgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVEsZT1UaCgpO2lmKE4pe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1KKXRocm93IEVycm9yKHAoMzQ5KSk7XG4wIT09KEhoJjMwKXx8ZGkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjtraShhaS5iaW5kKG51bGwsZCxmLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9VGgoKSxiPUouaWRlbnRpZmllclByZWZpeDtpZihOKXt2YXIgYz1TZzt2YXIgZD1SZztjPShkJn4oMTw8MzItbGMoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9S2grKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPUxoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxQaD17cmVhZENvbnRleHQ6cGcsdXNlQ2FsbGJhY2s6cWksdXNlQ29udGV4dDpwZyx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpvaSxcbnVzZUluc2VydGlvbkVmZmVjdDpsaSx1c2VMYXlvdXRFZmZlY3Q6bWksdXNlTWVtbzpyaSx1c2VSZWR1Y2VyOldoLHVzZVJlZjpoaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBXaChWaCl9LHVzZURlYnVnVmFsdWU6cGksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1XaChWaCksYz1iWzBdLGQ9YlsxXTskaChmdW5jdGlvbigpe3ZhciBiPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7ZChhKX1maW5hbGx5e0doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1XaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6dGksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxRaD17cmVhZENvbnRleHQ6cGcsdXNlQ2FsbGJhY2s6cWksdXNlQ29udGV4dDpwZyx1c2VFZmZlY3Q6JGgsXG51c2VJbXBlcmF0aXZlSGFuZGxlOm9pLHVzZUluc2VydGlvbkVmZmVjdDpsaSx1c2VMYXlvdXRFZmZlY3Q6bWksdXNlTWVtbzpyaSx1c2VSZWR1Y2VyOlhoLHVzZVJlZjpoaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBYaChWaCl9LHVzZURlYnVnVmFsdWU6cGksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1YaChWaCksYz1iWzBdLGQ9YlsxXTskaChmdW5jdGlvbigpe3ZhciBiPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7ZChhKX1maW5hbGx5e0doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1YaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6dGksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtcbmZ1bmN0aW9uIHppKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPU5hKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBBaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gQ2koYSxiLGMpe2M9dWcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGl8fChEaT0hMCxFaT1kKTtBaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIEZpKGEsYixjKXtjPXVnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0FpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtBaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PUdpP0dpPW5ldyBTZXQoW3RoaXNdKTpHaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gSGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBCaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPUlpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIEppKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEtpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9dWcoLTEsMSksYi50YWc9Mix2ZyhjLGIpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIExpLE1pLE5pLE9pO1xuTGk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O01pPWZ1bmN0aW9uKCl7fTtcbk5pPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTt4aCh1aC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVdhKGEsZSk7ZD1XYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWRiKGEsZSk7ZD1kYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPXdmKX1yYihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGRhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihkYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRihcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07T2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBQaShhLGIpe2lmKCFOKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBWKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO1dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFYoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFRmKGIudHlwZSkmJlVmKCksVihiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO3poKCk7RyhRZik7RyhJKTtFaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClmaChiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PVpnJiYoUmkoWmcpLFpnPW51bGwpKTtNaShhLGIpO1YoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkJoKGIpO3ZhciBlPXhoKHdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKU5pKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtWKGIpO3JldHVybiBudWxsfWE9eGgodWguY3VycmVudCk7aWYoZmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbSWZdPWI7ZFtKZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RihcImNhbmNlbFwiLGQpO0YoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8ZmYubGVuZ3RoO2UrKylGKGZmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixcbmQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WGEoZCxmKTtGKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplYihkLGYpLEYoXCJpbnZhbGlkXCIsZCl9cmIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKHZmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKHZmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZGEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PVxuZyYmRihcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpUYShkKTthYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlRhKGQpO2diKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPXdmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9aGIoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTpcbihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtJZl09YjthW0pmXT1kO0xpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXNiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpGKFwiY2FuY2VsXCIsYSk7RihcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGZmLmxlbmd0aDtlKyspRihmZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixcbmEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpYYShhLGQpO2U9V2EoYSxkKTtGKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplYihhLGQpO2U9ZGIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXJiKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3BiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZrYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZsYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmbGIoYSxcblwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGRhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkYoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZyYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlRhKGEpO2FiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VGEoYSk7Z2IoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1FhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/Y2IoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmNiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJlxuKGEub25jbGljaz13Zil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9VihiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpT2koYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz14aCh3aC5jdXJyZW50KTt4aCh1aC5jdXJyZW50KTtpZihmaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW0lmXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9WGcsbnVsbCE9PWEpc3dpdGNoKGc9MCE9PShhLm1vZGUmMSksYS50YWcpe2Nhc2UgMzp2ZihkLm5vZGVWYWx1ZSxcbmMsZyk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzW3ZvaWQgMF0mJnZmKGQubm9kZVZhbHVlLGMsZyl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbSWZdPWIsYi5zdGF0ZU5vZGU9ZH1WKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RyhQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihOJiZudWxsIT09WWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSl7Zm9yKGQ9WWc7ZDspZD1GZihkLm5leHRTaWJsaW5nKTtnaCgpO2IuZmxhZ3N8PTk4NTYwO3JldHVybiBifWlmKG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtkPWZoKGIpO2lmKG51bGw9PT1hKXtpZighZCl0aHJvdyBFcnJvcihwKDMxOCkpO2Q9Yi5tZW1vaXplZFN0YXRlO2Q9bnVsbCE9PWQ/ZC5kZWh5ZHJhdGVkOm51bGw7aWYoIWQpdGhyb3cgRXJyb3IocCgzMTcpKTtkW0lmXT1ifWVsc2UgZ2goKSwwPT09XG4oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7VihiKTtyZXR1cm4gbnVsbH1udWxsIT09WmcmJihSaShaZyksWmc9bnVsbCk7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT9maChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7ZCYmIWMmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oUC5jdXJyZW50JjEpPzA9PT1XJiYoVz0zKTpTaSgpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtWKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxNaShhLGIpLG51bGw9PT1hJiZuZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxWKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gbGcoYi50eXBlLl9jb250ZXh0KSxWKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gVGYoYi50eXBlKSYmVWYoKSxWKGIpLG51bGw7Y2FzZSAxOTpHKFApO1xuZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFYoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClQaShmLCExKTtlbHNle2lmKDAhPT1XfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9Q2goYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtQaShmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2NixnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsXG5mLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0goUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09Zi50YWlsJiZEKCk+VGkmJihiLmZsYWdzfD0xMjgsZD0hMCxQaShmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1DaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLFxubnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksUGkoZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIU4pcmV0dXJuIFYoYiksbnVsbH1lbHNlIDIqRCgpLWYucmVuZGVyaW5nU3RhcnRUaW1lPlRpJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLFBpKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9RCgpLGIuc2libGluZz1udWxsLGM9UC5jdXJyZW50LEgoUCxkP2MmMXwyOmMmMSksYjtWKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gVWkoKSxkPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KFZpJjEwNzM3NDE4MjQpJiYoVihiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlYoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9dmFyIFdpPXNhLlJlYWN0Q3VycmVudE93bmVyLG9nPSExO2Z1bmN0aW9uIFhpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/c2goYixudWxsLGMsZCk6cmgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBZaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7bmcoYixlKTtkPU5oKGEsYixjLGQsZixlKTtjPVNoKCk7aWYobnVsbCE9PWEmJiFvZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtOJiZjJiZWZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGkoYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYWooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsYmooYSxiLGYsZCxlKTthPW9oKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6RGU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiBaaShhLGIsZSl9Yi5mbGFnc3w9MTthPW1oKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gYmooYSxiLGMsZCxlKXtpZihudWxsIT09YSYmRGUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKG9nPSExLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKG9nPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsWmkoYSxiLGUpO3JldHVybiBjaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbH0sSChlaixWaSksVml8PWM7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbH0sZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjLEgoZWosVmkpLFZpfD1kO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEgoZWosVmkpLFZpfD1hLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpcbmQ9YyxIKGVqLFZpKSxWaXw9ZDtYaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBmaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBjaihhLGIsYyxkLGUpe3ZhciBmPVRmKGMpP1JmOkkuY3VycmVudDtmPVNmKGIsZik7bmcoYixlKTtjPU5oKGEsYixjLGQsZixlKTtkPVNoKCk7aWYobnVsbCE9PWEmJiFvZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtOJiZkJiZWZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZ2ooYSxiLGMsZCxlKXtpZihUZihjKSl7dmFyIGY9ITA7WGYoYil9ZWxzZSBmPSExO25nKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLEhnKGIsYyxkKSxKZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1wZyhsKToobD1UZihjKT9SZjpJLmN1cnJlbnQsbD1TZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyx3PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTt3fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmSWcoYixnLGQsbCk7cmc9ITE7dmFyIHU9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9dTt5ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8dSE9PWt8fFFmLmN1cnJlbnR8fHJnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKENnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD1yZ3x8R2coYixjLGgsZCx1LGssbCkpPyh3fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7dGcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpmZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3c9Yi5wZW5kaW5nUHJvcHM7dT1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1wZyhrKTooaz1UZihjKT9SZjpJLmN1cnJlbnQsaz1TZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXd8fHUhPT1rKSYmSWcoYixnLGQsayk7cmc9ITE7dT1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT11O3lnKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09d3x8dSE9PW58fFFmLmN1cnJlbnR8fHJnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKENnKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD1yZ3x8R2coYixjLGwsZCx1LG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9XG5rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGhqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGhqKGEsYixjLGQsZSxmKXtmaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmWWYoYixjLCExKSxaaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtXaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPXJoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9cmgoYixudWxsLGgsZikpOlhpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJllmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaWooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9WZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZWZihhLGIuY29udGV4dCwhMSk7eWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gamooYSxiLGMsZCxlKXtnaCgpO2hoKGUpO2IuZmxhZ3N8PTI1NjtYaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIga2o9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBsaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGx9fVxuZnVuY3Rpb24gbWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtIKFAsZSYxKTtpZihudWxsPT09YSl7ZGgoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2U9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxlPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZX0sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5lKTpmPW5qKGUsZCwwLG51bGwpLGE9cWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9bGooYyksYi5tZW1vaXplZFN0YXRlPWtqLGEpOm9qKGIsZSl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2g9ZS5kZWh5ZHJhdGVkO2lmKG51bGwhPT1oKXtpZihnKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxwaihhLGIsYyxFcnJvcihwKDQyMikpKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9bmooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9cWgoZixlLGMsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZyaChiLGEuY2hpbGQsXG5udWxsLGMpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1saihjKTtiLm1lbW9pemVkU3RhdGU9a2o7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpYj1waihhLGIsYyxudWxsKTtlbHNlIGlmKFwiJCFcIj09PWguZGF0YSliPXBqKGEsYixjLEVycm9yKHAoNDE5KSkpO2Vsc2UgaWYoZD0wIT09KGMmYS5jaGlsZExhbmVzKSxvZ3x8ZCl7ZD1KO2lmKG51bGwhPT1kKXtzd2l0Y2goYyYtYyl7Y2FzZSA0OmY9MjticmVhaztjYXNlIDE2OmY9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6Zj0zMjticmVhaztjYXNlIDUzNjg3MDkxMjpmPVxuMjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6Zj0wfWQ9MCE9PShmJihkLnN1c3BlbmRlZExhbmVzfGMpKT8wOmY7MCE9PWQmJmQhPT1lLnJldHJ5TGFuZSYmKGUucmV0cnlMYW5lPWQsRWcoYSxkLC0xKSl9U2koKTtiPXBqKGEsYixjLEVycm9yKHAoNDIxKSkpfWVsc2VcIiQ/XCI9PT1oLmRhdGE/KGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj1xai5iaW5kKG51bGwsYSksaC5fcmVhY3RSZXRyeT1iLGI9bnVsbCk6KGM9ZS50cmVlQ29udGV4dCxZZz1GZihoLm5leHRTaWJsaW5nKSxYZz1iLE49ITAsWmc9bnVsbCxudWxsIT09YyYmKE9nW1BnKytdPVJnLE9nW1BnKytdPVNnLE9nW1BnKytdPVFnLFJnPWMuaWQsU2c9Yy5vdmVyZmxvdyxRZz1iKSxiPW9qKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLGIuZmxhZ3N8PTQwOTYpO3JldHVybiBifWlmKGYpcmV0dXJuIGQ9cmooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsXG5mLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/bGooYyk6e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1raixkO2M9c2ooYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD1yaihhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/bGooYyk6e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1raixkO2M9c2ooYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9XG5mdW5jdGlvbiBvaihhLGIpe2I9bmooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHNqKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1taChlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYxKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGQ9Yi5kZWxldGlvbnMsbnVsbD09PWQ/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGEpKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gcmooYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGU7YT1hLmNoaWxkO3ZhciBnPWEuc2libGluZyxoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjEpJiZiLmNoaWxkIT09YT8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsYi5kZWxldGlvbnM9bnVsbCk6KGM9bWgoYSxoKSxjLnN1YnRyZWVGbGFncz1hLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWc/ZD1taChnLGQpOihkPXFoKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24gcGooYSxiLGMsZCl7bnVsbCE9PWQmJmhoKGQpO3JoKGIsYS5jaGlsZCxudWxsLGMpO2E9b2ooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7bWcoYS5yZXR1cm4sYixjKX1mdW5jdGlvbiB1aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24gdmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtYaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ0aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXRqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SChQLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1DaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3VqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09Q2goYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXVqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnVqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIFppKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt6Z3w9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9bWgoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPW1oKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB3aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6aWooYik7Z2goKTticmVhaztjYXNlIDU6QWgoYik7YnJlYWs7Y2FzZSAxOlRmKGIudHlwZSkmJlhmKGIpO2JyZWFrO2Nhc2UgNDp5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0goZ2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBIKFAsUC5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBtaihhLGIsYyk7SChQLFAuY3VycmVudCYxKTthPVppKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9SChQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4gdmooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0goUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxkaihhLGIsYyl9cmV0dXJuIFppKGEsYixjKX1cbmZ1bmN0aW9uIHhqKGEsYil7V2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFRmKGIudHlwZSkmJlVmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiB6aCgpLEcoUWYpLEcoSSksRWgoKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBCaChiKSxudWxsO2Nhc2UgMTM6RyhQKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7Z2goKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRyhQKSxudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGxnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIFVpKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIHlqPSExLHpqPSExLEFqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFg9bnVsbDtmdW5jdGlvbiBCaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe0NqKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIERqKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe0NqKGEsYixkKX19dmFyIEVqPSExO1xuZnVuY3Rpb24gRmooYSxiKXthPUhlKCk7aWYoSWUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goTyl7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCx3PWEsdT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7dyE9PWN8fDAhPT1lJiYzIT09dy5ub2RlVHlwZXx8KGg9ZytlKTt3IT09Znx8MCE9PWQmJjMhPT13Lm5vZGVUeXBlfHwoaz1nK2QpOzM9PT13Lm5vZGVUeXBlJiYoZys9dy5ub2RlVmFsdWUubGVuZ3RoKTtcbmlmKG51bGw9PT0oeT13LmZpcnN0Q2hpbGQpKWJyZWFrO3U9dzt3PXl9Zm9yKDs7KXtpZih3PT09YSlicmVhayBiO3U9PT1jJiYrK2w9PT1lJiYoaD1nKTt1PT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9dTt1PXcucGFyZW50Tm9kZX13PXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDt4Zj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtmb3IoWD1iO251bGwhPT1YOylpZihiPVgsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsWD1hO2Vsc2UgZm9yKDtudWxsIT09WDspe2I9WDt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztjYXNlIDE6aWYobnVsbCE9PVxubil7dmFyIHY9bi5tZW1vaXplZFByb3BzLEM9bi5tZW1vaXplZFN0YXRlLHQ9Yi5zdGF0ZU5vZGUscj10LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/djpmZyhiLnR5cGUsdiksQyk7dC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1yfWJyZWFrO2Nhc2UgMzp2YXIgeD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKDE9PT14Lm5vZGVUeXBlKXgudGV4dENvbnRlbnQ9XCJcIjtlbHNlIGlmKDk9PT14Lm5vZGVUeXBlKXt2YXIgQj14LmJvZHk7bnVsbCE9QiYmKEIudGV4dENvbnRlbnQ9XCJcIil9YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChPKXtDaihiLGIucmV0dXJuLE8pfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtYPWE7YnJlYWt9WD1iLnJldHVybn1uPUVqO0VqPSExO3JldHVybiBufVxuZnVuY3Rpb24gR2ooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmRGooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gSGooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBKaihhLGIsYyl7aWYoaWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBpYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7aWMub25Db21taXRGaWJlclVubW91bnQoaGMsYil9Y2F0Y2goZyl7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YT1hLm5leHQ7ZG97dmFyIGU9ZCxmPWUuZGVzdHJveTtlPWUudGFnO3ZvaWQgMCE9PWYmJigwIT09KGUmMik/RGooYixjLGYpOjAhPT0oZSY0KSYmRGooYixjLGYpKTtkPWQubmV4dH13aGlsZShkIT09YSl9YnJlYWs7Y2FzZSAxOkJqKGIsYyk7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGcpe0NqKGIsXG5jLGcpfWJyZWFrO2Nhc2UgNTpCaihiLGMpO2JyZWFrO2Nhc2UgNDpLaihhLGIsYyl9fWZ1bmN0aW9uIExqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxMaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW0lmXSxkZWxldGUgYltKZl0sZGVsZXRlIGJbamZdLGRlbGV0ZSBiW0tmXSxkZWxldGUgYltMZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIE1qKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gTmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8TWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIE9qKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE1qKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO312YXIgYz1iO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7Yy5mbGFncyYzMiYmKGxiKGIsXCJcIiksYy5mbGFncyY9LTMzKTtjPU5qKGEpO1BqKGEsYyxiKTticmVhaztjYXNlIDM6Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztjPU5qKGEpO1FqKGEsYyxiKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1cbmZ1bmN0aW9uIFFqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz13ZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFBqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylQaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBLaihhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHAoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEpqKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDE4PT09ZC50YWcpZz8oaD1mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/RWYoaC5wYXJlbnROb2RlLGspOjE9PT1oLm5vZGVUeXBlJiZFZihoLGspLFljKGgpKTpFZihmLGQuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEpqKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiZcbihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFJqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6R2ooMyxiLGIucmV0dXJuKTtIaigzLGIpO0dqKDUsYixiLnJldHVybik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmWWEoYyxkKTtzYihhLGUpO2I9c2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3BiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9rYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/bGIoYyxoKTpyYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6WmEoYyxcbmQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmZiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/Y2IoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2NiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpjYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX1jW0pmXT1kfX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpudWxsIT09YSYmYS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmWWMoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6U2ooYik7XG5yZXR1cm47Y2FzZSAxOTpTaihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IocCgxNjMpKTt9ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQWopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1Uai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIFVqKGEsYil7Zm9yKFg9YjtudWxsIT09WDspe2I9WDt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7S2ooYSxlLGIpO3ZhciBmPWUuYWx0ZXJuYXRlO251bGwhPT1mJiYoZi5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChMKXtDaihlLGIsTCl9fWM9Yi5jaGlsZDtpZigwIT09KGIuc3VidHJlZUZsYWdzJjEyODU0KSYmbnVsbCE9PWMpYy5yZXR1cm49YixYPWM7ZWxzZSBmb3IoO251bGwhPT1YOyl7Yj1YO3RyeXt2YXIgZz1iLmZsYWdzO2cmMzImJmxiKGIuc3RhdGVOb2RlLFwiXCIpO2lmKGcmNTEyKXt2YXIgaD1iLmFsdGVybmF0ZTtpZihudWxsIT09aCl7dmFyIGs9aC5yZWY7bnVsbCE9PWsmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygaz9rKG51bGwpOmsuY3VycmVudD1udWxsKX19aWYoZyY4MTkyKXN3aXRjaChiLnRhZyl7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1cbmIuYWx0ZXJuYXRlO2lmKG51bGw9PT1sfHxudWxsPT09bC5tZW1vaXplZFN0YXRlKVZqPUQoKX1icmVhaztjYXNlIDIyOnZhciBtPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsdz1iLmFsdGVybmF0ZSx1PW51bGwhPT13JiZudWxsIT09dy5tZW1vaXplZFN0YXRlO2M9YjthOntkPWM7ZT1tO2Zvcih2YXIgeT1udWxsLG49ZDs7KXtpZig1PT09bi50YWcpe2lmKG51bGw9PT15KXt5PW47dmFyIHY9bi5zdGF0ZU5vZGU7aWYoZSl7dmFyIEM9di5zdHlsZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQy5zZXRQcm9wZXJ0eT9DLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOkMuZGlzcGxheT1cIm5vbmVcIn1lbHNle3ZhciB0PW4uc3RhdGVOb2RlLHI9bi5tZW1vaXplZFByb3BzLnN0eWxlLHg9dm9pZCAwIT09ciYmbnVsbCE9PXImJnIuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP3IuZGlzcGxheTpudWxsO3Quc3R5bGUuZGlzcGxheT1vYihcImRpc3BsYXlcIix4KX19fWVsc2UgaWYoNj09PVxubi50YWcpbnVsbD09PXkmJihuLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZT9cIlwiOm4ubWVtb2l6ZWRQcm9wcyk7ZWxzZSBpZigoMjIhPT1uLnRhZyYmMjMhPT1uLnRhZ3x8bnVsbD09PW4ubWVtb2l6ZWRTdGF0ZXx8bj09PWQpJiZudWxsIT09bi5jaGlsZCl7bi5jaGlsZC5yZXR1cm49bjtuPW4uY2hpbGQ7Y29udGludWV9aWYobj09PWQpYnJlYWs7Zm9yKDtudWxsPT09bi5zaWJsaW5nOyl7aWYobnVsbD09PW4ucmV0dXJufHxuLnJldHVybj09PWQpYnJlYWsgYTt5PT09biYmKHk9bnVsbCk7bj1uLnJldHVybn15PT09biYmKHk9bnVsbCk7bi5zaWJsaW5nLnJldHVybj1uLnJldHVybjtuPW4uc2libGluZ319aWYobSYmIXUmJjAhPT0oYy5tb2RlJjEpKXtYPWM7Zm9yKHZhciBCPWMuY2hpbGQ7bnVsbCE9PUI7KXtmb3IoYz1YPUI7bnVsbCE9PVg7KXtkPVg7dmFyIE89ZC5jaGlsZDtzd2l0Y2goZC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpHaig0LGQsZC5yZXR1cm4pO2JyZWFrO1xuY2FzZSAxOkJqKGQsZC5yZXR1cm4pO3ZhciBUPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBULmNvbXBvbmVudFdpbGxVbm1vdW50KXt2YXIgemE9ZC5yZXR1cm47dHJ5e1QucHJvcHM9ZC5tZW1vaXplZFByb3BzLFQuc3RhdGU9ZC5tZW1vaXplZFN0YXRlLFQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChMKXtDaihkLHphLEwpfX1icmVhaztjYXNlIDU6QmooZCxkLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ZC5tZW1vaXplZFN0YXRlKXtXaihjKTtjb250aW51ZX19bnVsbCE9PU8/KE8ucmV0dXJuPWQsWD1PKTpXaihjKX1CPUIuc2libGluZ319fXN3aXRjaChnJjQxMDIpe2Nhc2UgMjpPaihiKTtiLmZsYWdzJj0tMzticmVhaztjYXNlIDY6T2ooYik7Yi5mbGFncyY9LTM7UmooYi5hbHRlcm5hdGUsYik7YnJlYWs7Y2FzZSA0MDk2OmIuZmxhZ3MmPS00MDk3O2JyZWFrO2Nhc2UgNDEwMDpiLmZsYWdzJj0tNDA5NztSaihiLmFsdGVybmF0ZSxiKTtcbmJyZWFrO2Nhc2UgNDpSaihiLmFsdGVybmF0ZSxiKX19Y2F0Y2goTCl7Q2ooYixiLnJldHVybixMKX1jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47WD1jO2JyZWFrfVg9Yi5yZXR1cm59fX1mdW5jdGlvbiBYaihhLGIsYyl7WD1hO1lqKGEsYixjKX1cbmZ1bmN0aW9uIFlqKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVg7KXt2YXIgZT1YLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHx5ajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8emo7aD15ajt2YXIgbD16ajt5aj1nO2lmKCh6aj1rKSYmIWwpZm9yKFg9ZTtudWxsIT09WDspZz1YLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP1pqKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFg9ayk6WmooZSk7Zm9yKDtudWxsIT09ZjspWD1mLFlqKGYsYixjKSxmPWYuc2libGluZztYPWU7eWo9aDt6aj1sfWFrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFg9Zik6YWsoYSxiLGMpfX1cbmZ1bmN0aW9uIGFrKGEpe2Zvcig7bnVsbCE9PVg7KXt2YXIgYj1YO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6emp8fEhqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIXpqKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOmZnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJkFnKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1BZyhiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHc9bS5kZWh5ZHJhdGVkO251bGwhPT13JiZZYyh3KX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9emp8fGIuZmxhZ3MmNTEyJiZJaihiKX1jYXRjaCh1KXtDaihiLGIucmV0dXJuLHUpfX1pZihiPT09YSl7WD1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtYPWM7YnJlYWt9WD1iLnJldHVybn19ZnVuY3Rpb24gV2ooYSl7Zm9yKDtudWxsIT09WDspe3ZhciBiPVg7aWYoYj09PWEpe1g9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1g9YzticmVha31YPWIucmV0dXJufX1cbmZ1bmN0aW9uIFpqKGEpe2Zvcig7bnVsbCE9PVg7KXt2YXIgYj1YO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e0hqKDQsYil9Y2F0Y2goayl7Q2ooYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtDaihiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtJaihiKX1jYXRjaChrKXtDaihiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtJaihiKX1jYXRjaChrKXtDaihiLGcsayl9fX1jYXRjaChrKXtDaihiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtYPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtYPWg7YnJlYWt9WD1iLnJldHVybn19XG52YXIgYms9TWF0aC5jZWlsLGNrPXNhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGs9c2EuUmVhY3RDdXJyZW50T3duZXIsZWs9c2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLEo9bnVsbCxZPW51bGwsWj0wLFZpPTAsZWo9T2YoMCksVz0wLGZrPW51bGwsemc9MCxnaz0wLGhrPTAsaWs9bnVsbCxqaz1udWxsLFZqPTAsVGk9SW5maW5pdHksRGk9ITEsRWk9bnVsbCxHaT1udWxsLGtrPSExLGxrPW51bGwsbWs9MCxuaz0wLG9rPW51bGwscGs9LTEscWs9MDtmdW5jdGlvbiBNKCl7cmV0dXJuIDAhPT0oSyY2KT9EKCk6LTEhPT1waz9wazpwaz1EKCl9XG5mdW5jdGlvbiBEZyhhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1lZy50cmFuc2l0aW9uKXJldHVybiAwPT09cWsmJihhPW9jLG9jPDw9MSwwPT09KG9jJjQxOTQyNDApJiYob2M9NjQpLHFrPWEpLHFrO2E9RTtpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6ZWQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBFZyhhLGIsYyl7aWYoNTA8bmspdGhyb3cgbms9MCxvaz1udWxsLEVycm9yKHAoMTg1KSk7dmFyIGQ9cmsoYSxiKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDt3YyhkLGIsYyk7aWYoMD09PShLJjIpfHxkIT09SilkPT09SiYmKDA9PT0oSyYyKSYmKGdrfD1iKSw0PT09VyYmc2soZCxaKSksdGsoZCxjKSwxPT09YiYmMD09PUsmJjA9PT0oYS5tb2RlJjEpJiYoVGk9RCgpKzUwMCwkZiYmZGcoKSk7cmV0dXJuIGR9XG5mdW5jdGlvbiByayhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiB0ayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3RjKGEsYik7dmFyIGQ9cmMoYSxhPT09Sj9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZaYihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJlpiKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9jZyh1ay5iaW5kKG51bGwsYSkpOmJnKHVrLmJpbmQobnVsbCxhKSksRGYoZnVuY3Rpb24oKXswPT09SyYmZGcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaCh6YyhkKSl7Y2FzZSAxOmM9Y2M7YnJlYWs7Y2FzZSA0OmM9ZGM7YnJlYWs7Y2FzZSAxNjpjPWVjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9Z2M7YnJlYWs7ZGVmYXVsdDpjPWVjfWM9dmsoYyx3ay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gd2soYSxiKXtwaz0tMTtxaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKHhrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD1yYyhhLGE9PT1KP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPXlrKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPXprKCk7aWYoSiE9PWF8fFohPT1iKVRpPUQoKSs1MDAsQWsoYSxiKTtkbyB0cnl7QmsoKTticmVha31jYXRjaChoKXtDayhhLGgpfXdoaWxlKDEpO2tnKCk7Y2suY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KEo9bnVsbCxaPTAsYj1XKX1pZigwIT09Yil7Mj09PWImJihlPXVjKGEpLDAhPT1lJiYoZD1lLGI9RGsoYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9ZmssQWsoYSwwKSxzayhhLGQpLHRrKGEsRCgpKSxjO2lmKDY9PT1iKXNrKGEsZCk7ZWxzZXtlPVxuYS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhRWsoZSkmJihiPXlrKGEsZCksMj09PWImJihmPXVjKGEpLDAhPT1mJiYoZD1mLGI9RGsoYSxmKSkpLDE9PT1iKSl0aHJvdyBjPWZrLEFrKGEsMCksc2soYSxkKSx0ayhhLEQoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOkZrKGEsamspO2JyZWFrO2Nhc2UgMzpzayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1Wais1MDAtRCgpLDEwPGIpKXtpZigwIT09cmMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtNKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT16ZihGay5iaW5kKG51bGwsYSxqayksYik7YnJlYWt9RmsoYSxqayk7YnJlYWs7Y2FzZSA0OnNrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1kKWJyZWFrO2I9XG5hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtbGMoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUQoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9emYoRmsuYmluZChudWxsLGEsamspLGQpO2JyZWFrfUZrKGEsamspO2JyZWFrO2Nhc2UgNTpGayhhLGprKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19dGsoYSxEKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/d2suYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gRGsoYSxiKXt2YXIgYz1pazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihBayhhLGIpLmZsYWdzfD0yNTYpO2E9eWsoYSxiKTsyIT09YSYmKGI9amssams9YyxudWxsIT09YiYmUmkoYikpO3JldHVybiBhfVxuZnVuY3Rpb24gUmkoYSl7bnVsbD09PWprP2prPWE6amsucHVzaC5hcHBseShqayxhKX1mdW5jdGlvbiBFayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUNlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gc2soYSxiKXtiJj1+aGs7YiY9fmdrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtbGMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIHVrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3hrKCk7dmFyIGI9cmMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIHRrKGEsRCgpKSxudWxsO3ZhciBjPXlrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9dWMoYSk7MCE9PWQmJihiPWQsYz1EayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPWZrLEFrKGEsMCksc2soYSxiKSx0ayhhLEQoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7RmsoYSxqayk7dGsoYSxEKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gR2soYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoVGk9RCgpKzUwMCwkZiYmZGcoKSl9fWZ1bmN0aW9uIEhrKGEpe251bGwhPT1sayYmMD09PWxrLnRhZyYmMD09PShLJjYpJiZ4aygpO3ZhciBiPUs7S3w9MTt2YXIgYz1lay50cmFuc2l0aW9uLGQ9RTt0cnl7aWYoZWsudHJhbnNpdGlvbj1udWxsLEU9MSxhKXJldHVybiBhKCl9ZmluYWxseXtFPWQsZWsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmRnKCl9fWZ1bmN0aW9uIFVpKCl7Vmk9ZWouY3VycmVudDtHKGVqKX1cbmZ1bmN0aW9uIEFrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEFmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7V2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJlVmKCk7YnJlYWs7Y2FzZSAzOnpoKCk7RyhRZik7RyhJKTtFaCgpO2JyZWFrO2Nhc2UgNTpCaChkKTticmVhaztjYXNlIDQ6emgoKTticmVhaztjYXNlIDEzOkcoUCk7YnJlYWs7Y2FzZSAxOTpHKFApO2JyZWFrO2Nhc2UgMTA6bGcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6VWkoKX1jPWMucmV0dXJufUo9YTtZPWE9bWgoYS5jdXJyZW50LG51bGwpO1o9Vmk9YjtXPTA7Zms9bnVsbDtoaz1naz16Zz0wO2prPWlrPW51bGw7aWYobnVsbCE9PXFnKXtmb3IoYj1cbjA7YjxxZy5sZW5ndGg7YisrKWlmKGM9cWdbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9cWc9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIENrKGEsYil7ZG97dmFyIGM9WTt0cnl7a2coKTtGaC5jdXJyZW50PVJoO2lmKEloKXtmb3IodmFyIGQ9US5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1JaD0hMX1IaD0wO1M9Uj1RPW51bGw7Smg9ITE7S2g9MDtkay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vz0xO2ZrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCx3PW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXd8fDExPT09d3x8MTU9PT13KSl7dmFyIHU9bS5hbHRlcm5hdGU7dT8obS51cGRhdGVRdWV1ZT11LnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT11Lm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXUubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PUppKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O0tpKHksZyxoLGYsYik7eS5tb2RlJjEmJkhpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB2PW5ldyBTZXQ7di5hZGQoayk7Yi51cGRhdGVRdWV1ZT12fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7SGkoZixsLGIpO1NpKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoTiYmaC5tb2RlJjEpe3ZhciBDPUppKGcpO2lmKG51bGwhPT1DKXswPT09KEMuZmxhZ3MmNjU1MzYpJiYoQy5mbGFnc3w9MjU2KTtLaShDLGcsaCxmLGIpO2hoKGspO2JyZWFrIGF9fWY9azs0IT09VyYmKFc9Mik7bnVsbD09PWlrP2lrPVtmXTppay5wdXNoKGYpO2s9emkoayxoKTtoPWc7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5mbGFnc3w9NjU1MzY7XG5iJj0tYjtoLmxhbmVzfD1iO3ZhciB0PUNpKGgsayxiKTt4ZyhoLHQpO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgcj1oLnR5cGUseD1oLnN0YXRlTm9kZTtpZigwPT09KGguZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUdpfHwhR2kuaGFzKHgpKSkpe2guZmxhZ3N8PTY1NTM2O2ImPS1iO2gubGFuZXN8PWI7dmFyIEI9RmkoaCxmLGIpO3hnKGgsQik7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9SWsoYyl9Y2F0Y2goTyl7Yj1PO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gemsoKXt2YXIgYT1jay5jdXJyZW50O2NrLmN1cnJlbnQ9Umg7cmV0dXJuIG51bGw9PT1hP1JoOmF9XG5mdW5jdGlvbiBTaSgpe2lmKDA9PT1XfHwzPT09V3x8Mj09PVcpVz00O251bGw9PT1KfHwwPT09KHpnJjI2ODQzNTQ1NSkmJjA9PT0oZ2smMjY4NDM1NDU1KXx8c2soSixaKX1mdW5jdGlvbiB5ayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD16aygpO0o9PT1hJiZaPT09Ynx8QWsoYSxiKTtkbyB0cnl7SmsoKTticmVha31jYXRjaChlKXtDayhhLGUpfXdoaWxlKDEpO2tnKCk7Sz1jO2NrLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO0o9bnVsbDtaPTA7cmV0dXJuIFd9ZnVuY3Rpb24gSmsoKXtmb3IoO251bGwhPT1ZOylLayhZKX1mdW5jdGlvbiBCaygpe2Zvcig7bnVsbCE9PVkmJiEkYigpOylLayhZKX1mdW5jdGlvbiBLayhhKXt2YXIgYj1MayhhLmFsdGVybmF0ZSxhLFZpKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/SWsoYSk6WT1iO2RrLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIElrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPVFpKGMsYixWaSksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz14aihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1c9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVcmJihXPTUpfWZ1bmN0aW9uIEZrKGEsYil7dmFyIGM9RSxkPWVrLnRyYW5zaXRpb247dHJ5e2VrLnRyYW5zaXRpb249bnVsbCxFPTEsTWsoYSxiLGMpfWZpbmFsbHl7ZWsudHJhbnNpdGlvbj1kLEU9Y31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIE1rKGEsYixjKXtkbyB4aygpO3doaWxlKG51bGwhPT1sayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGQ9YS5maW5pc2hlZFdvcmssZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihkPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1kLmxhbmVzfGQuY2hpbGRMYW5lczt4YyhhLGYpO2E9PT1KJiYoWT1KPW51bGwsWj0wKTswPT09KGQuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGQuZmxhZ3MmMjA2NCl8fGtrfHwoa2s9ITAsdmsoZWMsZnVuY3Rpb24oKXt4aygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShkLmZsYWdzJjE1OTkwKTtpZigwIT09KGQuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1lay50cmFuc2l0aW9uO2VrLnRyYW5zaXRpb249bnVsbDt2YXIgZz1cbkU7RT0xO3ZhciBoPUs7S3w9NDtkay5jdXJyZW50PW51bGw7RmooYSxkKTtVaihhLGQsZSk7SmUoeGYpO3hmPW51bGw7YS5jdXJyZW50PWQ7WGooZCxhLGUpO2FjKCk7Sz1oO0U9Zztlay50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9ZDtrayYmKGtrPSExLGxrPWEsbWs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKEdpPW51bGwpO2pjKGQuc3RhdGVOb2RlLGMpO3RrKGEsRCgpKTtpZihudWxsIT09Yilmb3IoYz1hLm9uUmVjb3ZlcmFibGVFcnJvcixkPTA7ZDxiLmxlbmd0aDtkKyspYyhiW2RdKTtpZihEaSl0aHJvdyBEaT0hMSxhPUVpLEVpPW51bGwsYTswIT09KG1rJjEpJiYwIT09YS50YWcmJnhrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PW9rP25rKys6KG5rPTAsb2s9YSk6bms9MDtkZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24geGsoKXtpZihudWxsIT09bGspe3ZhciBhPXpjKG1rKSxiPWVrLnRyYW5zaXRpb24sYz1FO3RyeXtlay50cmFuc2l0aW9uPW51bGw7RT0xNj5hPzE2OmE7aWYobnVsbD09PWxrKXZhciBkPSExO2Vsc2V7YT1saztsaz1udWxsO21rPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihYPWEuY3VycmVudDtudWxsIT09WDspe3ZhciBmPVgsZz1mLmNoaWxkO2lmKDAhPT0oWC5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoWD1sO251bGwhPT1YOyl7dmFyIG09WDtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6R2ooOCxtLGYpfXZhciB3PW0uY2hpbGQ7aWYobnVsbCE9PXcpdy5yZXR1cm49bSxYPXc7ZWxzZSBmb3IoO251bGwhPT1YOyl7bT1YO3ZhciB1PW0uc2libGluZyx5PW0ucmV0dXJuO0xqKG0pO2lmKG09PT1cbmwpe1g9bnVsbDticmVha31pZihudWxsIT09dSl7dS5yZXR1cm49eTtYPXU7YnJlYWt9WD15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB2PW4uY2hpbGQ7aWYobnVsbCE9PXYpe24uY2hpbGQ9bnVsbDtkb3t2YXIgQz12LnNpYmxpbmc7di5zaWJsaW5nPW51bGw7dj1DfXdoaWxlKG51bGwhPT12KX19WD1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFg9ZztlbHNlIGI6Zm9yKDtudWxsIT09WDspe2Y9WDtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkdqKDksZixmLnJldHVybil9dmFyIHQ9Zi5zaWJsaW5nO2lmKG51bGwhPT10KXt0LnJldHVybj1mLnJldHVybjtYPXQ7YnJlYWsgYn1YPWYucmV0dXJufX12YXIgcj1hLmN1cnJlbnQ7Zm9yKFg9cjtudWxsIT09WDspe2c9WDt2YXIgeD1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbngpeC5yZXR1cm49ZyxYPXg7ZWxzZSBiOmZvcihnPXI7bnVsbCE9PVg7KXtoPVg7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6SGooOSxoKX19Y2F0Y2goTyl7Q2ooaCxoLnJldHVybixPKX1pZihoPT09Zyl7WD1udWxsO2JyZWFrIGJ9dmFyIEI9aC5zaWJsaW5nO2lmKG51bGwhPT1CKXtCLnJldHVybj1oLnJldHVybjtYPUI7YnJlYWsgYn1YPWgucmV0dXJufX1LPWU7ZGcoKTtpZihpYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGljLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7aWMub25Qb3N0Q29tbWl0RmliZXJSb290KGhjLGEpfWNhdGNoKE8pe31kPSEwfXJldHVybiBkfWZpbmFsbHl7RT1jLGVrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gTmsoYSxiLGMpe2I9emkoYyxiKTtiPUNpKGEsYiwxKTt2ZyhhLGIpO2I9TSgpO2E9cmsoYSwxKTtudWxsIT09YSYmKHdjKGEsMSxiKSx0ayhhLGIpKX1cbmZ1bmN0aW9uIENqKGEsYixjKXtpZigzPT09YS50YWcpTmsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7TmsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09R2l8fCFHaS5oYXMoZCkpKXthPXppKGMsYSk7YT1GaShiLGEsMSk7dmcoYixhKTthPU0oKTtiPXJrKGIsMSk7bnVsbCE9PWImJih3YyhiLDEsYSksdGsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gSWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPU0oKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Sj09PWEmJihaJmMpPT09YyYmKDQ9PT1XfHwzPT09VyYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5EKCktVmo/QWsoYSwwKTpoa3w9Yyk7dGsoYSxiKX1mdW5jdGlvbiBPayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXBjLHBjPDw9MSwwPT09KHBjJjEzMDAyMzQyNCkmJihwYz00MTk0MzA0KSkpO3ZhciBjPU0oKTthPXJrKGEsYik7bnVsbCE9PWEmJih3YyhhLGIsYyksdGsoYSxjKSl9ZnVuY3Rpb24gcWooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO09rKGEsYyl9XG5mdW5jdGlvbiBUaihhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtPayhhLGMpfXZhciBMaztcbkxrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8UWYuY3VycmVudClvZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIG9nPSExLHdqKGEsYixjKTtvZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIG9nPSExLE4mJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmVWcoYixOZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9U2YoYixJLmN1cnJlbnQpO25nKGIsYyk7ZT1OaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9U2goKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj9cbihiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9bnVsbCxUZihkKT8oZj0hMCxYZihiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLHNnKGIpLGUudXBkYXRlcj1GZyxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIsSmcoYixkLGEsYyksYj1oaihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxOJiZmJiZWZyhiKSxYaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVBrKGQpO2E9ZmcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9Y2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWdqKG51bGwsYixcbmQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1ZaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPSRpKG51bGwsYixkLGZnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LGQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmZnKGQsZSksY2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmZnKGQsZSksZ2ooYSxiLGQsZSxjKTtjYXNlIDM6YTp7aWooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O3RnKGEsYik7eWcoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsXG5jYWNoZTpnLmNhY2hlLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPWYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9RXJyb3IocCg0MjMpKTtiPWpqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUVycm9yKHAoNDI0KSk7Yj1qaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoWWc9RmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxYZz1iLE49ITAsWmc9bnVsbCxjPXNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle2doKCk7aWYoZD09PWUpe2I9WmkoYSxiLGMpO2JyZWFrIGF9WGkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQWgoYiksbnVsbD09PWEmJmRoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sXG55ZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmeWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxmaihhLGIpLFhpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmZGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBtaihhLGIsYyk7Y2FzZSA0OnJldHVybiB5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1yaChiLG51bGwsZCxjKTpYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmZnKGQsZSksWWkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPVxuYi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7Zz1lLnZhbHVlO0goZ2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihDZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVFmLmN1cnJlbnQpe2I9WmkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9dWcoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PVxuYztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7bWcoZi5yZXR1cm4sYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO21nKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31YaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxubmcoYixjKSxlPXBnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFhpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1mZyhkLGIucGVuZGluZ1Byb3BzKSxlPWZnKGQudHlwZSxlKSwkaShhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGJqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6ZmcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLFRmKGQpPyhhPSEwLFhmKGIpKTphPSExLG5nKGIsYyksSGcoYixkLGUpLEpnKGIsZCxlLGMpLGhqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gdmooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGRqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gdmsoYSxiKXtyZXR1cm4gWWIoYSxiKX1cbmZ1bmN0aW9uIFFrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIGFoKGEsYixjLGQpe3JldHVybiBuZXcgUWsoYSxiLGMsZCl9ZnVuY3Rpb24gYWooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIFBrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QmEpcmV0dXJuIDExO2lmKGE9PT1FYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPWFoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdmE6cmV0dXJuIHFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2Ugd2E6Zz04O2V8PTg7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1haCgxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9YWgoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBEYTpyZXR1cm4gYT1haCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1EYSxhLmxhbmVzPWYsYTtjYXNlIEdhOnJldHVybiBuaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgQWE6Zz05O2JyZWFrIGE7Y2FzZSBCYTpnPTExO1xuYnJlYWsgYTtjYXNlIEVhOmc9MTQ7YnJlYWsgYTtjYXNlIEZhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1haChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9YWgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIG5qKGEsYixjLGQpe2E9YWgoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9R2E7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXt9O3JldHVybiBhfWZ1bmN0aW9uIG5oKGEsYixjKXthPWFoKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHBoKGEsYixjKXtiPWFoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gUmsoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz12YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz12YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz12YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gU2soYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IFJrKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9YWgoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGx9O3NnKGYpO3JldHVybiBhfWZ1bmN0aW9uIFRrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dWEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBVayhhKXtpZighYSlyZXR1cm4gUGY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihTYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFRmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoVGYoYykpcmV0dXJuIFdmKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIFZrKGEsYixjLGQsZSxmLGcsaCxrKXthPVNrKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PVVrKG51bGwpO2M9YS5jdXJyZW50O2Q9TSgpO2U9RGcoYyk7Zj11ZyhkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO3ZnKGMsZik7YS5jdXJyZW50LmxhbmVzPWU7d2MoYSxlLGQpO3RrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gV2soYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9TSgpLGc9RGcoZSk7Yz1VayhjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXVnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3ZnKGUsYik7YT1FZyhlLGcsZik7bnVsbCE9PWEmJndnKGEsZSxnKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIFhrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gWWsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIFprKGEsYil7WWsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJllrKGEsYil9ZnVuY3Rpb24gJGsoKXtyZXR1cm4gbnVsbH12YXIgYWw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIGJsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxuY2wucHJvdG90eXBlLnJlbmRlcj1ibC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO1drKGEsYixudWxsLG51bGwpfTtjbC5wcm90b3R5cGUudW5tb3VudD1ibC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO0hrKGZ1bmN0aW9uKCl7V2sobnVsbCxhLG51bGwsbnVsbCl9KTtiW3BmXT1udWxsfX07ZnVuY3Rpb24gY2woYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5jbC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9RGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPE1jLmxlbmd0aCYmMCE9PWImJmI8TWNbY10ucHJpb3JpdHk7YysrKTtNYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZSYyhhKX19O2Z1bmN0aW9uIGRsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBlbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gZmwoKXt9XG5mdW5jdGlvbiBnbChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1YayhnKTtmLmNhbGwoYSl9fXZhciBnPVZrKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLGZsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3BmXT1nLmN1cnJlbnQ7bmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO0hrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1YayhrKTtoLmNhbGwoYSl9fXZhciBrPVNrKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixmbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVtwZl09ay5jdXJyZW50O25mKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtIayhmdW5jdGlvbigpe1drKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBobChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YayhnKTtoLmNhbGwoYSl9fVdrKGIsZyxhLGUpfWVsc2UgZz1nbChjLGIsYSxlLGQpO3JldHVybiBYayhnKX1BYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXFjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKHljKGIsY3wxKSx0ayhiLEQoKSksMD09PShLJjYpJiYoVGk9RCgpKzUwMCxkZygpKSl9YnJlYWs7Y2FzZSAxMzp2YXIgZD1NKCk7SGsoZnVuY3Rpb24oKXtyZXR1cm4gRWcoYSwxLGQpfSk7WmsoYSwxKX19O0JjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPU0oKTtFZyhhLDEzNDIxNzcyOCxiKTtaayhhLDEzNDIxNzcyOCl9fTtcbkNjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPU0oKSxjPURnKGEpO0VnKGEsYyxiKTtaayhhLGMpfX07RGM9ZnVuY3Rpb24oKXtyZXR1cm4gRX07RWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1FO3RyeXtyZXR1cm4gRT1hLGIoKX1maW5hbGx5e0U9Y319O1xudmI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpaYShhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9QWIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1VhKGQpO1phKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpmYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmY2IoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtEYj1HaztFYj1IaztcbnZhciBpbD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbemIscGUsQWIsQmIsQ2IsR2tdfSxqbD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6U2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4wLjAtZmM0NmRiYTY3LTIwMjIwMzI5XCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciBrbD17YnVuZGxlVHlwZTpqbC5idW5kbGVUeXBlLHZlcnNpb246amwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOmpsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6amwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6c2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVdiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpqbC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG4kayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMC4wLWZjNDZkYmE2Ny0yMDIyMDMyOVwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIGxsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighbGwuaXNEaXNhYmxlZCYmbGwuc3VwcG9ydHNGaWJlcil0cnl7aGM9bGwuaW5qZWN0KGtsKSxpYz1sbH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9aWw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFkbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBUayhhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIWRsKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9YWw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPVNrKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbcGZdPWIuY3VycmVudDtuZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBibChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9V2IoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gSGsoYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWVsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGhsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFkbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9YWw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPVZrKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbcGZdPWIuY3VycmVudDtuZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IGNsKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWVsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGhsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWVsKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhIayhmdW5jdGlvbigpe2hsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtwZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPUdrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZWwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIGhsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4wLjAtZmM0NmRiYTY3LTIwMjIwMzI5XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4wLjAtZmM0NmRiYTY3LTIwMjIwMzI5XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuaW5kZXguanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJjc3MvXCIgKyAoY2h1bmtJZCA9PT0gOTAxID8gXCJzZGt0ZXN0XCIgOiBjaHVua0lkKSArIFwiLmNzc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ5MDE6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmttcF93ZWJnbFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmttcF93ZWJnbFwiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiLyogZXNsaW50LWRpc2FibGUgKi9cblxudmFyIGZpbHRlckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyLXBhbmVscycpO1xuZmlsdGVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChlKSA9PiB7XG4gIGNvbnN0IGVsdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb250cm9sUGFuZWxIZWFkZXInKTtcbiAgZm9yIChjb25zdCBlbHQgb2YgZWx0cykge1xuICAgIGlmICghZmlsdGVyRWxlbWVudC52YWx1ZSB8fCBlbHQudGV4dENvbnRlbnQubWF0Y2goXG4gICAgICBuZXcgUmVnRXhwKGAke2ZpbHRlckVsZW1lbnQudmFsdWV9YCwgJ2knKSlcbiAgICApIHtcbiAgICAgIGVsdC5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbHQucGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciBzdGF0dXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXR1cycpO1xuZnVuY3Rpb24gcmVwb3J0KHByZWZpeCwgbWVzc2FnZSkge1xuICB2YXIgbXNnID0gKG1lc3NhZ2UpID8gbWVzc2FnZSA6ICcnO1xuICBzdGF0dXNFbGVtZW50LmNsYXNzTmFtZSA9IChwcmVmaXg9PT0nRXJyb3I6ICcpID8gJ2Vycm9yJyA6ICcnO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhdHVzIHNwYW4nKS50ZXh0Q29udGVudCA9IHByZWZpeCArIG1lc3NhZ2U7XG4gIGlmIChwcmVmaXggPT09ICdFcnJvcjogJykge1xuICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcG9ydEVycm9yKG1lc3NhZ2UpIHtcbiAgcmVwb3J0KCdFcnJvcjogJywgbWVzc2FnZSk7XG59XG5mdW5jdGlvbiByZXBvcnRDb21wbGV0aW9uKG1lc3NhZ2UpIHtcbiAgcmVwb3J0KCdPSzogJywgbWVzc2FnZSk7XG59XG5mdW5jdGlvbiByZXBvcnRCdXN5KCkge1xuICByZXBvcnQoJ1dvcmtpbmcgLi4uJyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgd2hpbGUgKHNlbGVjdG9yLmxhc3RDaGlsZCkge1xuICAgIHNlbGVjdG9yLnJlbW92ZUNoaWxkKHNlbGVjdG9yLmxhc3RDaGlsZCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uQ29ubmVjdChzaG93Y2FzZSwgc2hvd2Nhc2VFbGVtZW50KSB7XG4gIGNvbnNvbGUubG9nKFwiU0hPV0NBU0UgSVMgQ09OTkVDVEVEXCIpO1xuXG4gIHNldHVwTWF0dGVydGFnQ29udHJvbHMoc2hvd2Nhc2UpO1xuXG4gIGNvbnN0IHN3ZWVwQ29sbGVjdGlvbiA9IHt9O1xuICBjb25zdCBzd2VlcFNlbGVjdG9ycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N3ZWVwLXNlbGVjdG9yJyk7XG4gIFtdLnNsaWNlLmNhbGwoc3dlZXBTZWxlY3RvcnMpLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgY2xlYXJTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgc2hvd2Nhc2UuU3dlZXAuZGF0YS5zdWJzY3JpYmUoe1xuICAgICAgb25BZGRlZChpbmRleCwgaXRlbSkge1xuICAgICAgICBzd2VlcENvbGxlY3Rpb25baW5kZXhdID0gaXRlbTtcbiAgICAgIH0sXG4gICAgICBvblJlbW92ZWQoaW5kZXgpIHtcbiAgICAgICAgZGVsZXRlIHN3ZWVwQ29sbGVjdGlvbltpbmRleF07XG4gICAgICB9LFxuICAgICAgb25Db2xsZWN0aW9uVXBkYXRlZChjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvci5oYXNDaGlsZE5vZGVzKCkpIHJldHVybjtcbiAgICAgICAgZm9yIChjb25zdCBzd2VlcElkIGluIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgb3B0aW9uLnZhbHVlID0gc3dlZXBJZDtcbiAgICAgICAgICBvcHRpb24udGV4dCA9IHN3ZWVwSWQ7XG4gICAgICAgICAgc2VsZWN0b3IuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuXG4gIHZhciBjYW1lcmFQb3NlO1xuICB2YXIgdGFncyA9IHt9O1xuXG4gIHNob3djYXNlLk1hdHRlcnRhZy5kYXRhLnN1YnNjcmliZSh7XG4gICAgb25Db2xsZWN0aW9uVXBkYXRlZChjb2xsZWN0aW9uKSB7XG4gICAgICB0YWdzID0gY29sbGVjdGlvbjtcbiAgICB9LFxuICB9KTtcbiAgc2hvd2Nhc2VcbiAgICAub24oc2hvd2Nhc2UuTW9kZWwuRXZlbnQuTU9ERUxfTE9BREVELCBmdW5jdGlvbiAobW9kZWxEYXRhKSB7XG4gICAgICByZXBvcnRDb21wbGV0aW9uKCdNb2RlbCBzdWNjZXNzZnVsbHkgbG9hZGVkJyk7XG4gICAgfSlcbiAgICAub24oc2hvd2Nhc2UuTW9kZS5FdmVudC5DSEFOR0VfU1RBUlQsIGZ1bmN0aW9uIChvbGRNb2RlLCBuZXdNb2RlKSB7XG4gICAgICByZXBvcnRDb21wbGV0aW9uKCdtb3ZlZCB0byBtb2RlOiAnICsgbmV3TW9kZSArICcgZnJvbSAnICsgb2xkTW9kZSk7XG4gICAgfSlcbiAgICAub24oc2hvd2Nhc2UuQ2FtZXJhLkV2ZW50Lk1PVkUsIGZ1bmN0aW9uIChwb3NlKSB7XG4gICAgICBjYW1lcmFQb3NlID0gcG9zZTtcbiAgICB9KVxuICAgIC5vbihzaG93Y2FzZS5NYXR0ZXJ0YWcuRXZlbnQuQ0xJQ0ssIChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHRhZ0lkKSB7XG4gICAgICAgIHZhciBjbGlja2VkVGFnID0gdGFnc1t0YWdJZF07XG4gICAgICAgIHZhciBkaXNjV29ybGRQb3NpdGlvbiA9IHt9O1xuICAgICAgICB2YXIgc2NyZWVuUG9zaXRpb24gPSB7fTtcbiAgICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmdldERpc2NQb3NpdGlvbihjbGlja2VkVGFnLCBkaXNjV29ybGRQb3NpdGlvbik7XG4gICAgICAgIHNob3djYXNlLkNvbnZlcnNpb24ud29ybGRUb1NjcmVlbihkaXNjV29ybGRQb3NpdGlvbiwgY2FtZXJhUG9zZSwge1xuICAgICAgICAgIHc6IHNob3djYXNlRWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICBoOiBzaG93Y2FzZUVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICB9LCBzY3JlZW5Qb3NpdGlvbik7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQnLCB0YWdJZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd3aXRoIGEgd29ybGQgcG9zaXRpb24gb2YnLCBkaXNjV29ybGRQb3NpdGlvbik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhbmQgYSBzY3JlZW4gcG9zaXRpb24gb2YnLCBzY3JlZW5Qb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSkoKSk7XG5cbiAgLy8gTW92ZSBpbiBhIGRpcmVjdGlvblxuICBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZCdXR0b24nKSkuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1kaXJlY3Rpb24nKTtcbiAgICAgIHJlcG9ydEJ1c3koKTtcbiAgICAgIHNob3djYXNlLkNhbWVyYS5tb3ZlSW5EaXJlY3Rpb24oc2hvd2Nhc2UuQ2FtZXJhLkRpcmVjdGlvblt2YWx1ZV0pXG4gICAgICAudGhlbihmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICByZXBvcnRDb21wbGV0aW9uKCBtZXNzYWdlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uWCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3NpdGlvblgnKTtcbiAgICB2YXIgcG9zaXRpb25aID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc2l0aW9uWicpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJlcG9ydEJ1c3koKTtcbiAgICAgIHNob3djYXNlLkNhbWVyYS5wYW4oe1xuICAgICAgICB4OiBwYXJzZUZsb2F0KHBvc2l0aW9uWC52YWx1ZSkgfHwgMCxcbiAgICAgICAgejogcGFyc2VGbG9hdChwb3NpdGlvbloudmFsdWUpIHx8IDAsXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgIHJlcG9ydENvbXBsZXRpb24oXCJDYW1lcmEucGFuIGNvbXBsZXRlXCIpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgLy8gUm90YXRlIGluIGEgc2luZ2xlIGRpcmVjdGlvblxuICBbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbHRVcCcpLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aWx0RG93bicpLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3RhdGVMZWZ0JyksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0ZVJpZ2h0JyldLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgIHZhciBhbmdsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3RhdGlvbicpO1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWRpcmVjdGlvbicpO1xuICAgICAgcmVwb3J0QnVzeSgpO1xuICAgICAgc2hvd2Nhc2UuQ2FtZXJhLnJvdGF0ZUluRGlyZWN0aW9uKHNob3djYXNlLkNhbWVyYS5EaXJlY3Rpb25bZGlyZWN0aW9uXSwgcGFyc2VGbG9hdChhbmdsZS52YWx1ZSkpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbihcIlJvdGF0aW9uIGNvbXBsZXRlOiBcIiApO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBzaG93Y2FzZS5DYW1lcmEucm90YXRlSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBhbmdsZSkge1xuICAgIHJldHVybiBzaG93Y2FzZS5DYW1lcmEucm90YXRlKFxuICAgICAgZGlyZWN0aW9uID09PSBzaG93Y2FzZS5DYW1lcmEuRGlyZWN0aW9uWydSSUdIVCddID8gYW5nbGUgOiAoZGlyZWN0aW9uID09PSBzaG93Y2FzZS5DYW1lcmEuRGlyZWN0aW9uWydMRUZUJ10gPyAtYW5nbGUgOiAwKSxcbiAgICAgIGRpcmVjdGlvbiA9PT0gc2hvd2Nhc2UuQ2FtZXJhLkRpcmVjdGlvblsnVVAnXSA/IGFuZ2xlIDogIChkaXJlY3Rpb24gPT09IHNob3djYXNlLkNhbWVyYS5EaXJlY3Rpb25bJ0RPV04nXSA/IC1hbmdsZSA6IDApKTtcbiAgfTtcblxuICAvLyBSb3RhdGUgYWxvbmcgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXNcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZyZWVSb3RhdGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm90YXRpb25YID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uWCcpO1xuICAgIHZhciByb3RhdGlvblkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm90YXRpb25ZJyk7XG4gICAgdmFyIHJvdGF0aW9uU3BlZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm90YXRpb25TcGVlZCcpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciB4ID0gcm90YXRpb25YLnZhbHVlIHx8IDA7XG4gICAgICB2YXIgeSA9IHJvdGF0aW9uWS52YWx1ZSB8fCAwO1xuICAgICAgcmVwb3J0QnVzeSgpO1xuICAgICAgc2hvd2Nhc2UuQ2FtZXJhLnJvdGF0ZShwYXJzZUZsb2F0KHgpLCBwYXJzZUZsb2F0KHkpLCB7IHNwZWVkOiBwYXJzZUZsb2F0KHJvdGF0aW9uU3BlZWQudmFsdWUpIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbignRnJlZSByb3RhdGlvbiBjb21wbGV0ZTonKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmVwb3J0RXJyb3IoIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JpZW50JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJvdGF0aW9uWCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3RhdGlvblgnKTtcbiAgICB2YXIgcm90YXRpb25ZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uWScpO1xuICAgIHZhciByb3RhdGlvblNwZWVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uU3BlZWQnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgeCA9IHJvdGF0aW9uWC52YWx1ZSB8fCAwO1xuICAgICAgdmFyIHkgPSByb3RhdGlvblkudmFsdWUgfHwgMDtcbiAgICAgIHJlcG9ydEJ1c3koKTtcbiAgICAgIHNob3djYXNlLkNhbWVyYS5zZXRSb3RhdGlvbih7eDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KX0sIHsgc3BlZWQ6IHBhcnNlRmxvYXQocm90YXRpb25TcGVlZC52YWx1ZSkgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICByZXBvcnRDb21wbGV0aW9uKGAgT3JpZW50IGNvbXBsZXRlOiBgKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmVwb3J0RXJyb3IoIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyBDaGFuZ2UgbW9kZXNcbiAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kZUJ1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24pIHtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBmbHlTdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RlU3R5bGVzJyk7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9IHNob3djYXNlLk1vZGUuVHJhbnNpdGlvblR5cGVbZmx5U3R5bGUudmFsdWVdO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICByZXBvcnRCdXN5KCk7XG4gICAgICBzaG93Y2FzZS5Nb2RlLm1vdmVUbyhzaG93Y2FzZS5Nb2RlLk1vZGVbdmFsdWVdLCB7XG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgIHJlcG9ydENvbXBsZXRpb24obWVzc2FnZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3ZlVG9Td2VlcCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzd2VlcElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3ZWVwSWRzJyk7XG4gICAgdmFyIGZseVN0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZseVN0eWxlcycpO1xuICAgIHZhciBzd2VlcFJvdGF0aW9uWCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2VlcFJvdGF0aW9uWCcpO1xuICAgIHZhciBzd2VlcFJvdGF0aW9uWSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2VlcFJvdGF0aW9uWScpO1xuICAgIHZhciBzd2VlcFRyYW5zaXRpb25UaW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3ZWVwVHJhbnNpdGlvblRpbWUnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgc3dlZXAgPSBzd2VlcElkLnZhbHVlO1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSBzaG93Y2FzZS5Td2VlcC5UcmFuc2l0aW9uW2ZseVN0eWxlLnZhbHVlXTtcbiAgICAgIHZhciByb3RhdGlvbiA9IHtcbiAgICAgICAgeDogc3dlZXBSb3RhdGlvblgudmFsdWUgfHwgMCxcbiAgICAgICAgeTogc3dlZXBSb3RhdGlvblkudmFsdWUgfHwgMCxcbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2l0aW9uVGltZSA9IHN3ZWVwVHJhbnNpdGlvblRpbWUudmFsdWU7XG4gICAgICByZXBvcnRCdXN5KCk7XG4gICAgICBzaG93Y2FzZS5Td2VlcC5tb3ZlVG8oc3dlZXAsIHtcbiAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uVGltZTogdHJhbnNpdGlvblRpbWUsXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoc3dlZXBJZCkge1xuICAgICAgICAgIHJlcG9ydENvbXBsZXRpb24oJ21vdmVkIHRvIHN3ZWVwICcgKyBzd2VlcElkKVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dldFBvc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zZVN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgdmFyIHBvc2VPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zZScpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXBvc2VTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcG9zZVN1YnNjcmlwdGlvbiA9IHNob3djYXNlLkNhbWVyYS5wb3NlLnN1YnNjcmliZSh7XG4gICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAocG9zZSkge1xuICAgICAgICAgICAgcG9zZU91dHB1dC5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShwb3NlKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc2VTdWJzY3JpcHRpb24uY2FuY2VsKCk7XG4gICAgICAgIHBvc2VTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH0oKSk7XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NjcmVlbnNob3QnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY3JlZW5zaG90LXByZXZpZXcnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBzaG93Y2FzZS5SZW5kZXJlci50YWtlU2NyZWVuU2hvdCh1bmRlZmluZWQsIHtcbiAgICAgICAgbWF0dGVydGFnczogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHNzVXJsKSB7XG4gICAgICAgIHByZXZpZXcuc2V0QXR0cmlidXRlKCdzcmMnLCBzc1VybCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlcXVpcmVjdGFuZ2xlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NyZWVuc2hvdC1wcmV2aWV3Jyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc2hvd2Nhc2UuUmVuZGVyZXIudGFrZUVxdWlyZWN0YW5ndWxhcigpXG4gICAgICAudGhlbihmdW5jdGlvbiAoc3NVcmwpIHtcbiAgICAgICAgcHJldmlldy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNzVXJsKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgc2hvd2Nhc2UuU3dlZXAuY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRTd2VlcCkge1xuICAgIGlmIChjdXJyZW50U3dlZXAuc2lkID09PSAnJykge1xuICAgICAgY29uc29sZS5sb2coJ05vdCBjdXJyZW50bHkgc3RhdGlvbmVkIGF0IGEgc3dlZXAgcG9zaXRpb24nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coY3VycmVudFN3ZWVwKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFBvcHVsYXRlIGFsbCBvZiB0aGUgbWF0dGVydGFnIHNlbGVjdG9yc1xuICBwb3B1bGF0ZU1hdHRlcnRhZ1NlbGVjdG9ycyhzaG93Y2FzZSk7XG5cbiAgLy8gVE9VUlNcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdXJTdGFydEJ0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgc2hvd2Nhc2UuVG91ci5zdGFydCgpO1xuICB9KTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdXJTdG9wQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBzaG93Y2FzZS5Ub3VyLnN0b3AoKTtcbiAgfSk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b3VyUHJldkJ0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgc2hvd2Nhc2UuVG91ci5wcmV2KCk7XG4gIH0pO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG91ck5leHRCdG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIHNob3djYXNlLlRvdXIubmV4dCgpO1xuICB9KTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdXJTdGVwcGVkQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5kZXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG91ci1zdGVwcGVkJyk7XG4gICAgc2hvd2Nhc2UuVG91ci5zdGVwKHBhcnNlSW50KGluZGV4LnZhbHVlLCAxMCkpO1xuICB9KTtcblxuICB2YXIgcG9pbnRlclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnZXRQb2ludGVyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvaW50ZXJPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9pbnRlcicpO1xuICAgIGlmICghcG9pbnRlclN1YnNjcmlwdGlvbikge1xuICAgICAgcG9pbnRlclN1YnNjcmlwdGlvbiA9IHNob3djYXNlLlBvaW50ZXIuaW50ZXJzZWN0aW9uLnN1YnNjcmliZShmdW5jdGlvbiAobW91c2UpIHtcbiAgICAgICAgcG9pbnRlck91dHB1dC5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShtb3VzZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlclN1YnNjcmlwdGlvbi5jYW5jZWwoKTtcbiAgICAgIHBvaW50ZXJTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH1cbiAgfSk7XG5cbiAgc2hvd2Nhc2UuQ2FtZXJhLnpvb20uc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGV2ZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudC16b29tLWxldmVsJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh6b29tKSB7XG4gICAgICBsZXZlbC5pbm5lclRleHQgPSB6b29tLmxldmVsLnRvRml4ZWQoNSk7XG4gICAgfVxuICB9KCkpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd6b29tLWJ5JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlbHRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3pvb20tYnktdmFsJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3djYXNlLkNhbWVyYS56b29tQnkoZGVsdGEudmFsdWUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChuZXdab29tKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbignWm9vbWVkIGJ5ICcgKyBkZWx0YS52YWx1ZSArICcgdG8gJyArIG5ld1pvb20pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd6b29tLXRvJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxldmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3pvb20tdG8tdmFsJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3djYXNlLkNhbWVyYS56b29tVG8obGV2ZWwudmFsdWUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChuZXdab29tKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbignWm9vbWVkIHRvICcgKyBuZXdab29tKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnem9vbS1yZXNldCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHNob3djYXNlLkNhbWVyYS56b29tUmVzZXQoKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXBvcnRDb21wbGV0aW9uKCdyZXNldCB6b29tJyk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgYWRkU3dlZXBUb2dnbGUoc2hvd2Nhc2UsIHN3ZWVwQ29sbGVjdGlvbik7XG59XG5cbmZ1bmN0aW9uIGFkZFN3ZWVwVG9nZ2xlKHNob3djYXNlLCBzd2VlcENvbGxlY3Rpb24pIHtcbiAgdmFyIHN3ZWVwU2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dlZXAtZW5hYmxlLXNlbGVjdG9yJyk7XG4gIHZhciBjdXJyZW50RW5hYmxlbWVudE1hcCA9IHt9O1xuICB2YXIgZW5hYmxlU3dlZXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dlZXAtZW5hYmxlJyk7XG5cbiAgc3dlZXBTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnRFbmFibGVtZW50ID0gc3dlZXBDb2xsZWN0aW9uW3N3ZWVwU2VsZWN0b3IudmFsdWVdLmVuYWJsZWQ7XG4gICAgZW5hYmxlU3dlZXAuY2hlY2tlZCA9IGN1cnJlbnRFbmFibGVtZW50O1xuICB9KTtcblxuICBmdW5jdGlvbiBvbkVuYWJsZWRDaGFuZ2UoKSB7XG4gICAgY3VycmVudEVuYWJsZW1lbnRNYXBbc3dlZXBTZWxlY3Rvci52YWx1ZV0gPSBlbmFibGVTd2VlcC5jaGVja2VkO1xuXG4gICAgaWYgKGVuYWJsZVN3ZWVwLmNoZWNrZWQpIHtcbiAgICAgIHNob3djYXNlLlN3ZWVwLmVuYWJsZShzd2VlcFNlbGVjdG9yLnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd2Nhc2UuU3dlZXAuZGlzYWJsZShzd2VlcFNlbGVjdG9yLnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBlbmFibGVTd2VlcC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkVuYWJsZWRDaGFuZ2UpO1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZU1hdHRlcnRhZ1NlbGVjdG9ycyhzaG93Y2FzZSkge1xuICBzaG93Y2FzZS5NYXR0ZXJ0YWcuZGF0YS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0YWdTZWxlY3RvcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21hdHRlcnRhZy1zZWxlY3RvcicpKTtcbiAgICB0YWdTZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIHdoaWxlIChzZWxlY3Rvci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgc2VsZWN0b3IucmVtb3ZlQ2hpbGQoc2VsZWN0b3IubGFzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgdGFnU2VsZWN0b3JPcHRpb25zTWFwID0ge307XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVPcHRpb24odGFnKSB7XG4gICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHRpb24udmFsdWUgPSB0YWcuc2lkO1xuICAgICAgb3B0aW9uLnRleHQgPSB0YWcubGFiZWwgfHwgJyhubyBsYWJlbCknO1xuXG4gICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgb25BZGRlZChpbmRleCwgdGFnKSB7XG4gICAgICAgIHRhZ1NlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAgIHZhciBvcHRpb24gPSBjcmVhdGVPcHRpb24odGFnKTtcbiAgICAgICAgICB0YWdTZWxlY3Rvck9wdGlvbnNNYXBbaW5kZXhdID0gdGFnU2VsZWN0b3JPcHRpb25zTWFwW2luZGV4XSB8fCBbXTtcbiAgICAgICAgICB0YWdTZWxlY3Rvck9wdGlvbnNNYXBbaW5kZXhdLnB1c2gob3B0aW9uKTtcbiAgICAgICAgICBsZXQgbmV4dENoaWxkID0gc2VsZWN0b3IuZmlyc3RDaGlsZDtcbiAgICAgICAgICB3aGlsZSAobmV4dENoaWxkICYmIG9wdGlvbi50ZXh0LmxvY2FsZUNvbXBhcmUobmV4dENoaWxkLnRleHQpID4gMCkge1xuICAgICAgICAgICAgbmV4dENoaWxkID0gbmV4dENoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3Rvci5pbnNlcnRCZWZvcmUob3B0aW9uLCBuZXh0Q2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvblJlbW92ZWQoaW5kZXgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0YWdTZWxlY3Rvck9wdGlvbnNNYXBbaW5kZXhdIHx8IFtdO1xuICAgICAgICBvcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgIG9wdGlvbi5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG9wdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgdGFnU2VsZWN0b3JPcHRpb25zTWFwW2luZGV4XTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZWQoaW5kZXgsIHRhZykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRhZ1NlbGVjdG9yT3B0aW9uc01hcFtpbmRleF0gfHwgW107XG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgb3B0aW9uLnRleHQgPSB0YWcubGFiZWw7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9O1xuICB9KCkpO1xufVxuXG5cbmZ1bmN0aW9uIHNldHVwTWF0dGVydGFnQ29udHJvbHMoc2hvd2Nhc2UpIHtcbiAgY29uc3Qgc2VsZWN0ZWRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF0dGVydGFnLXNlbGVjdG9yJyk7XG4gIHNldHVwTWF0dGVydGFnUHJldmVudChzaG93Y2FzZSwgc2VsZWN0ZWRUYWcpO1xuXG4gIC8vIGFkZFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1hZGQtdGl0bGUnKTtcbiAgICBjb25zdCBkZXNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1hZGQtZGVzYycpO1xuICAgIGNvbnN0IHBvc1ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1wb3MteCcpO1xuICAgIGNvbnN0IHBvc1kgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1wb3MteScpO1xuICAgIGNvbnN0IHBvc1ogPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1wb3MteicpO1xuICAgIGNvbnN0IG5vcm1YID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1hZGQtbm9ybS14Jyk7XG4gICAgY29uc3Qgbm9ybVkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1ub3JtLXknKTtcbiAgICBjb25zdCBub3JtWiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctYWRkLW5vcm0teicpO1xuICAgIGNvbnN0IG1lZGlhVHlwZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctYWRkLW10eXBlJyk7XG4gICAgY29uc3QgbWVkaWFTcmMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1tc3JjJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmFkZCh7XG4gICAgICAgIGxhYmVsOiB0aXRsZS52YWx1ZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGRlc2MudmFsdWUsXG4gICAgICAgIGFuY2hvclBvc2l0aW9uOiB7XG4gICAgICAgICAgeDogcGFyc2VGbG9hdChwb3NYLnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHBvc1kudmFsdWUpLFxuICAgICAgICAgIHo6IHBhcnNlRmxvYXQocG9zWi52YWx1ZSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZW1WZWN0b3I6IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KG5vcm1YLnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KG5vcm1ZLnZhbHVlKSxcbiAgICAgICAgICB6OiBwYXJzZUZsb2F0KG5vcm1aLnZhbHVlKSxcbiAgICAgICAgfSxcbiAgICAgICAgbWVkaWE6IG1lZGlhVHlwZS52YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiB7XG4gICAgICAgICAgdHlwZTptZWRpYVR5cGUudmFsdWUsXG4gICAgICAgICAgc3JjOiBtZWRpYVNyYy52YWx1ZSxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyBtb3ZlXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHBvc1ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLW1vdmUtcG9zLXgnKTtcbiAgICBjb25zdCBwb3NZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLXBvcy15Jyk7XG4gICAgY29uc3QgcG9zWiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbW92ZS1wb3MteicpO1xuICAgIGNvbnN0IG5vcm1YID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLW5vcm0teCcpO1xuICAgIGNvbnN0IG5vcm1ZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLW5vcm0teScpO1xuICAgIGNvbnN0IG5vcm1aID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLW5vcm0teicpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3djYXNlLk1hdHRlcnRhZy5lZGl0UG9zaXRpb24oc2VsZWN0ZWRUYWcudmFsdWUsIHtcbiAgICAgICAgYW5jaG9yUG9zaXRpb246IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHBvc1gudmFsdWUpLFxuICAgICAgICAgIHk6IHBhcnNlRmxvYXQocG9zWS52YWx1ZSksXG4gICAgICAgICAgejogcGFyc2VGbG9hdChwb3NaLnZhbHVlKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RlbVZlY3Rvcjoge1xuICAgICAgICAgIHg6IHBhcnNlRmxvYXQobm9ybVgudmFsdWUpLFxuICAgICAgICAgIHk6IHBhcnNlRmxvYXQobm9ybVkudmFsdWUpLFxuICAgICAgICAgIHo6IHBhcnNlRmxvYXQobm9ybVoudmFsdWUpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyByZW1vdmVcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hdHRlcnRhZy1yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcucmVtb3ZlKHNlbGVjdGVkVGFnLnZhbHVlKTtcbiAgfSk7XG5cbiAgLy8gcG9wdWxhdGUgbWVkaWEgdHlwZSBzZWxlY3RvcnNcbiAgdmFyIHRhZ01lZGlhdHlwZVNlbGVjdG9ycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ210YWctbWVkaWEtdHlwZScpO1xuICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHRhZ01lZGlhdHlwZVNlbGVjdG9ycykge1xuICAgIGNsZWFyU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIHZhciBkZWZhdWx0T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgZGVmYXVsdE9wdGlvbi52YWx1ZSA9ICcnO1xuICAgIGRlZmF1bHRPcHRpb24udGV4dCA9IFwiKHNlbGVjdClcIlxuICAgIHNlbGVjdG9yLmFwcGVuZENoaWxkKGRlZmF1bHRPcHRpb24pO1xuICAgIGZvciAodmFyIG1lZGlhVHlwZSBpbiBzaG93Y2FzZS5NYXR0ZXJ0YWcuTWVkaWFUeXBlKSB7XG4gICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHRpb24udmFsdWUgPSBzaG93Y2FzZS5NYXR0ZXJ0YWcuTWVkaWFUeXBlW21lZGlhVHlwZV07XG4gICAgICBvcHRpb24udGV4dCA9IG1lZGlhVHlwZTtcbiAgICAgIHNlbGVjdG9yLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLy8gTWF0dGVydGFnIEVkaXRcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hdHRlcnRhZy1lZGl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGFnRWRpdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1lZGl0LXRpdGxlJyk7XG4gICAgdmFyIHRhZ0VkaXRNZWRpYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctZWRpdC1tZWRpYScpO1xuICAgIHZhciB0YWdFZGl0RGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctZWRpdC1kZXNjJyk7XG4gICAgdmFyIHRhZ01lZGlhdHlwZVNlbGVjdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1lZGl0LW1lZGlhdHlwZScpXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmVwb3J0QnVzeSgpO1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmVkaXRCaWxsYm9hcmQoc2VsZWN0ZWRUYWcudmFsdWUsIHtcbiAgICAgICAgLy8gZG9uJ3Qgc2VuZCBlbXB0eSBzdHJpbmcgaWYgaW5wdXQgZmllbGQgd2FzIGVtcHR5XG4gICAgICAgIGxhYmVsOiB0YWdFZGl0VGl0bGUudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBkZXNjcmlwdGlvbjogdGFnRWRpdERlc2MudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBtZWRpYTogdGFnTWVkaWF0eXBlU2VsZWN0b3IudmFsdWUgIT09ICcnID8ge1xuICAgICAgICAgIHNyYzogdGFnRWRpdE1lZGlhLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IHRhZ01lZGlhdHlwZVNlbGVjdG9yLnZhbHVlLFxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRhZ0xhYmVsID0gc2VsZWN0ZWRUYWcub3B0aW9uc1tzZWxlY3RlZFRhZy5zZWxlY3RlZEluZGV4XS5pbm5lclRleHQ7XG4gICAgICAgICAgICByZXBvcnRDb21wbGV0aW9uKGBlZGl0ZWQgWyR7dGFnTGFiZWx9XSwgKFNJRD0ke3NlbGVjdGVkVGFnLnZhbHVlfSlgKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIC8vIGNvbG9yXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctZWRpdC1jb2xvcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWNvbG9yLXInKTtcbiAgICBjb25zdCBnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1jb2xvci1nJyk7XG4gICAgY29uc3QgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctY29sb3ItYicpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcuZWRpdENvbG9yKHNlbGVjdGVkVGFnLnZhbHVlLCB7XG4gICAgICAgIHI6IHBhcnNlRmxvYXQoci52YWx1ZSksXG4gICAgICAgIGc6IHBhcnNlRmxvYXQoZy52YWx1ZSksXG4gICAgICAgIGI6IHBhcnNlRmxvYXQoYi52YWx1ZSksXG4gICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIC8vIHN0ZW1cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1lZGl0LXN0ZW0nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzdGVtSGVpZ2h0RWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0ZW0taGVpZ2h0Jyk7XG4gICAgY29uc3Qgc3RlbVZpc2libGVFbHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RlbS12aXNpYmxlJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHN0ZW1IZWlnaHQgPSBwYXJzZUZsb2F0KHN0ZW1IZWlnaHRFbHQudmFsdWUpO1xuICAgICAgY29uc3Qgc3RlbVZpc2libGUgPSBzdGVtVmlzaWJsZUVsdC5jaGVja2VkO1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmVkaXRTdGVtKHNlbGVjdGVkVGFnLnZhbHVlLCB7XG4gICAgICAgIHN0ZW1IZWlnaHQsIHN0ZW1WaXNpYmxlXG4gICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIC8vIE1hdHRlcnRhZyBPcGFjaXR5XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctb3BhY2l0eS1lZGl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGFnRWRpdE9wYWNpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF0dGVydGFnLW9wYWNpdHknKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmVkaXRPcGFjaXR5KHNlbGVjdGVkVGFnLnZhbHVlLCBwYXJzZUZsb2F0KHRhZ0VkaXRPcGFjaXR5LnZhbHVlKSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyBNYXR0ZXJ0YWcgSW5qZWN0XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmplY3RIVE1MJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgd2lkZ2V0VyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctaHRtbC13Jyk7XG4gICAgY29uc3Qgd2lkZ2V0SCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctaHRtbC1oJyk7XG4gICAgY29uc3Qgd2lkZ2V0U291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luamVjdGVkSFRNTCcpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcuaW5qZWN0SFRNTChzZWxlY3RlZFRhZy52YWx1ZSwgd2lkZ2V0U291cmNlLnZhbHVlLCB7XG4gICAgICAgIGdsb2JhbFZhcmlhYmxlTWFwOiB7XG4gICAgICAgICAgb246ICdvbicsXG4gICAgICAgICAgb2ZmOiAnb2ZmJyxcbiAgICAgICAgICBzZW5kOiAnc2VuZCcsXG4gICAgICAgICAgdGFnOiAndGFnJyxcbiAgICAgICAgfSxcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIHc6IHdpZGdldFcudmFsdWUgfHwgMCxcbiAgICAgICAgICBoOiB3aWRnZXRILnZhbHVlIHx8IDAsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocG0pIHtcbiAgICAgICAgICBmdW5jdGlvbiBnZW5Db2xvcigpIHtcbiAgICAgICAgICAgIGxldCByZ2IgPSAnJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgICAgICAgIHJnYiArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcjJyArIHJnYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZGlyZWN0bHkgY29tbXVuaWNhdGUgd2l0aCB0aGUgaWZyYW1lIHRoYXQgd2FzIGp1c3QgaW5qZWN0ZWRcbiAgICAgICAgICBwbS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3BhZ2UgcmVjZWl2ZWQnLCBlKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbG9yID0gZ2VuQ29sb3IoKTtcbiAgICAgICAgICAgIHBtLnNlbmQoJ3VwZGF0ZS5idXR0b24nLCBuZXdDb2xvciwgbmV3Q29sb3IudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgLy8gTWF0dGVydGFnIE5hdmlnYXRpb25cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hdmlnYXRlVG9UYWcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmF2aWdhdGlvblR5cGVTZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctbmF2aWdhdGlvbi10eXBlJyk7XG4gICAgdmFyIGZvcmNlTmF2aWdhdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctbmF2aWdhdGlvbi1mb3JjZScpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXBvcnRCdXN5KCk7XG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcubmF2aWdhdGVUb1RhZyhzZWxlY3RlZFRhZy52YWx1ZSwgc2hvd2Nhc2UuTWF0dGVydGFnLlRyYW5zaXRpb25bbmF2aWdhdGlvblR5cGVTZWxlY3Rvci52YWx1ZV0sIGZvcmNlTmF2aWdhdGlvbi5jaGVja2VkKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgdmFyIHRhZ0xhYmVsID0gc2VsZWN0ZWRUYWcub3B0aW9uc1tzZWxlY3RlZFRhZy5zZWxlY3RlZEluZGV4XS5pbm5lclRleHQ7XG4gICAgICAgICAgICByZXBvcnRDb21wbGV0aW9uKCdtb3ZlZCB0byBbJyArIHRhZ0xhYmVsICsgJ10sIChTSUQ9JyArIHNlbGVjdGVkVGFnLnZhbHVlICsgJyknKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xufVxuXG5mdW5jdGlvbiBzZXR1cE1hdHRlcnRhZ1ByZXZlbnQoc2hvd2Nhc2UsIHNlbGVjdGVkVGFnKSB7XG4gIHZhciBjdXJyZW50TG9ja3MgPSB7fTtcbiAgICB2YXIgbG9ja0JpbGxib2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbG9jay1iYicpO1xuICAgIHZhciBsb2NrTmF2aWdhdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbG9jay1uYXYnKTtcblxuICAgIGZ1bmN0aW9uIGdldExvY2tzKCkge1xuICAgICAgdmFyIGN1cnJlbnRMb2NrID0gY3VycmVudExvY2tzW3NlbGVjdGVkVGFnLnZhbHVlXTtcbiAgICAgIC8vIHNldCBkZWZhdWx0IGZvciB0aGUgbG9ja3MgaWYgdGhleSBhcmVuJ3QgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgaWYgKCFjdXJyZW50TG9jaykge1xuICAgICAgICBjdXJyZW50TG9jayA9IHtcbiAgICAgICAgICBiaWxsYm9hcmQ6IHRydWUsXG4gICAgICAgICAgbmF2aWdhdGlvbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRMb2Nrc1tzZWxlY3RlZFRhZy52YWx1ZV0gPSBjdXJyZW50TG9jaztcblxuICAgICAgcmV0dXJuIGN1cnJlbnRMb2NrO1xuICAgIH1cblxuICAgIHNlbGVjdGVkVGFnLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHNldCB0aGUgY2hlY2tib3hlcyB0byB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGVcbiAgICAgIHZhciBjdXJyZW50TG9jayA9IGdldExvY2tzKCk7XG4gICAgICBsb2NrQmlsbGJvYXJkLmNoZWNrZWQgPSBjdXJyZW50TG9jay5iaWxsYm9hcmQ7XG4gICAgICBsb2NrTmF2aWdhdGlvbi5jaGVja2VkID0gY3VycmVudExvY2submF2aWdhdGlvbjtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uTG9ja3NDaGFuZ2UoKSB7XG4gICAgICAvLyB1cGRhdGUgdGhlIHN0YXRlIG9mIHRoZSBsb2Nrc1xuICAgICAgdmFyIGN1cnJlbnRMb2NrID0gZ2V0TG9ja3MoKTtcbiAgICAgIGN1cnJlbnRMb2NrLmJpbGxib2FyZCA9IGxvY2tCaWxsYm9hcmQuY2hlY2tlZDtcbiAgICAgIGN1cnJlbnRMb2NrLm5hdmlnYXRpb24gPSBsb2NrTmF2aWdhdGlvbi5jaGVja2VkO1xuXG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcucHJldmVudEFjdGlvbihzZWxlY3RlZFRhZy52YWx1ZSwge1xuICAgICAgICBvcGVuaW5nOiAhY3VycmVudExvY2suYmlsbGJvYXJkLFxuICAgICAgICBuYXZpZ2F0aW5nOiAhY3VycmVudExvY2submF2aWdhdGlvbixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvY2tCaWxsYm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Mb2Nrc0NoYW5nZSk7XG4gICAgbG9ja05hdmlnYXRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Mb2Nrc0NoYW5nZSk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IElPYnNlcnZhYmxlTWFwLCBJU3Vic2NyaXB0aW9uIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IENoYW5nZUV2ZW50LCBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RvclByb3BzPFQ+IHtcbiAgY29sbGVjdGlvbjogSU9ic2VydmFibGVNYXA8VD47XG4gIG9uQ2hhbmdlZD8oa2V5OiBzdHJpbmcsIHZhbHVlOiBUIHwgdW5kZWZpbmVkKTogdm9pZDtcbiAgZmlsdGVyPyhpdGVtOiBUKTogYm9vbGVhbjtcbiAgc29ydD8oaXRlbTE6IFQsIGl0ZW0yOiBUKTogbnVtYmVyO1xuICAvKiogdGhlIHN0cmluZyB0byBzaG93IGZvciBlYWNoIG9wdGlvbiBpbiB0aGUgc2VsZWN0b3IgKi9cbiAgb3B0aW9uTGFiZWw/KGl0ZW06IFQpOiBzdHJpbmc7XG4gIC8qKiB0aGUgc3RyaW5nIHRvIHNob3cgaW4gdGhlIG9wdGlvbidzIGhvdmVyIHRleHQgKi9cbiAgaG92ZXJMYWJlbD8oaXRlbTogVCk6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFNlbGVjdG9yU3RhdGU8VD4ge1xuICBhdmFpbGFibGVPcHRpb25zOiBNYXA8c3RyaW5nLCBUPjtcbiAgc2VsZWN0ZWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIHNlbGVjdG9yIHRoYXQgd2F0Y2hlcyBhbiBTREsgQ29sbGVjdGlvbiBmb3IgY2hhbmdlcyBhbmQgd2lsbCBwb3B1bGF0ZSBpdHMgb3B0aW9ucyBhcyB0aGUgQ29sbGVjdGlvbiBjaGFuZ2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uU2VsZWN0PFQ+IGV4dGVuZHMgQ29tcG9uZW50PFNlbGVjdG9yUHJvcHM8VD4sIFNlbGVjdG9yU3RhdGU8VD4+IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IElTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgb3B0aW9uTWFwID0gbmV3IE1hcDxzdHJpbmcsIFQ+KCk7XG4gIHByaXZhdGUgb25DaGFuZ2VkOiAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzZWxlY3RSZWY6IFJlZk9iamVjdDxIVE1MU2VsZWN0RWxlbWVudD47XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFNlbGVjdG9yUHJvcHM8VD4pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZWQgPSAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdGhpcy5vblZhbHVlQ2hhbmdlZChldmVudCk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IHRoaXMub3B0aW9uTWFwLFxuICAgICAgc2VsZWN0ZWQ6ICcnLFxuICAgIH07XG4gICAgdGhpcy5zZWxlY3RSZWYgPSBjcmVhdGVSZWYoKTtcbiAgfVxuXG4gIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXM7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHMuY29sbGVjdGlvbi5zdWJzY3JpYmUoe1xuICAgICAgICBvbkFkZGVkKGlkeCwgaXRlbSkge1xuICAgICAgICAgIGlmICghc2VsZWN0b3IucHJvcHMuZmlsdGVyIHx8IHNlbGVjdG9yLnByb3BzLmZpbHRlcihpdGVtKSkge1xuICAgICAgICAgICAgc2VsZWN0b3Iub3B0aW9uTWFwLnNldChpZHgsIGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25SZW1vdmVkKGlkeCkge1xuICAgICAgICAgIHNlbGVjdG9yLm9wdGlvbk1hcC5kZWxldGUoaWR4KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25VcGRhdGVkKGlkeCwgaXRlbSkge1xuICAgICAgICAgIGlmICghc2VsZWN0b3IucHJvcHMuZmlsdGVyIHx8IHNlbGVjdG9yLnByb3BzLmZpbHRlcihpdGVtKSkge1xuICAgICAgICAgICAgc2VsZWN0b3Iub3B0aW9uTWFwLnNldChpZHgsIGl0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rvci5vcHRpb25NYXAuZGVsZXRlKGlkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkNvbGxlY3Rpb25VcGRhdGVkKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBzZWxlY3Rvci5zZXRTdGF0ZSgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGNvbGxlY3Rpb25bc3RhdGUuc2VsZWN0ZWRdID8gc3RhdGUuc2VsZWN0ZWQgOiBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKVswXTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLnByb3BzLm9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IucHJvcHMub25DaGFuZ2VkKGtleSwgc2VsZWN0b3Iub3B0aW9uTWFwLmdldChrZXkpIGFzIFQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLnByb3BzLm9uQ2hhbmdlZCgnJywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBuZXcgTWFwKHNlbGVjdG9yLm9wdGlvbk1hcCksXG4gICAgICAgICAgICAgIHNlbGVjdGVkOiBrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6ICcnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25WYWx1ZUNoYW5nZWQoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50Pikge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZDogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZWQpIHtcbiAgICAgIGNvbnN0IGtleSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2VkKGtleSwgdGhpcy5vcHRpb25NYXAuZ2V0KGtleSkgYXMgVCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgLy8gc29ydCBiYXNlZCBvbiB0aGUga2V5ICh0aGUgaWQgb2YgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24pXG4gICAgY29uc3QgZW50cmllcyA9IFsuLi50aGlzLnN0YXRlLmF2YWlsYWJsZU9wdGlvbnMuZW50cmllcygpXTtcbiAgICBjb25zdCBzb3J0ZWRFbnRyaWVzID0gZW50cmllcy5zb3J0KChbLCBpdGVtMV0sIFssIGl0ZW0yXSkgPT4ge1xuICAgICAgaWYgKHRoaXMucHJvcHMuc29ydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zb3J0KGl0ZW0xLCBpdGVtMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8c2VsZWN0XG4gICAgICAgIHJlZj17dGhpcy5zZWxlY3RSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17J2NvbGxlY3Rpb24tc2VsZWN0b3InfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZWR9XG4gICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNlbGVjdGVkfVxuICAgICAgPlxuICAgICAgICB7c29ydGVkRW50cmllcy5sZW5ndGggPiAwID9cbiAgICAgICAgICB0aGlzLnJlbmRlck9wdGlvbnMoc29ydGVkRW50cmllcykgOlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+eycobm8gdmFsdWVzKSd9PC9vcHRpb24+fVxuICAgICAgPC9zZWxlY3Q+XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyT3B0aW9ucyhlbnRyaWVzOiBBcnJheTxbc3RyaW5nLCBUXT4pIHtcbiAgICByZXR1cm4gZW50cmllcy5tYXAoKFtrLCB2XSkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPG9wdGlvblxuICAgICAgICAgIGtleT17a31cbiAgICAgICAgICB2YWx1ZT17a31cbiAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5ob3ZlckxhYmVsICYmIHRoaXMucHJvcHMuaG92ZXJMYWJlbCh2KX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnByb3BzLm9wdGlvbkxhYmVsID8gdGhpcy5wcm9wcy5vcHRpb25MYWJlbCh2KSA6IGt9XG4gICAgICAgIDwvb3B0aW9uPlxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzLCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaGVhZGVyOiBzdHJpbmc7XG59XG5cbmNvbnN0IGNvbnRyb2xQYW5lbFN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBvdmVyZmxvd1k6ICdhdXRvJyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBDb250cm9sUGFuZWwocHJvcHM6IFByb3BzV2l0aENoaWxkcmVuPFByb3BzPik6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXtjb250cm9sUGFuZWxTdHlsZX0gY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9Pntwcm9wcy5oZWFkZXJ9PC9kaXY+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFNlbGVjdG9yUHJvcHMgfSBmcm9tICcuL0NvbGxlY3Rpb25TZWxlY3Rvcic7XG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VsZWN0IH0gZnJvbSAnLi9Db2xsZWN0aW9uU2VsZWN0b3InO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuXG50eXBlIFRyYW5zZm9ybXNGb3I8VD4gPSB7XG4gIFtLIGluICBrZXlvZiBUXTogKGl0ZW06IFRbS10pID0+IHVua25vd247XG59XG5cbnR5cGUgUHJvcHM8VD4gPSBTZWxlY3RvclByb3BzPFQ+ICYge1xuICBjb2xsZWN0aW9uOiBNcFNkay5JT2JzZXJ2YWJsZU1hcDxUPjtcbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqIGlmIHRoZSBvYmplY3QgdG8gaW5zZXBjdCBoYXMgZ2V0dGVycywgcHJvdmlkaW5nIHRoZWlyIGtleXMgaGVyZSB3aWxsIGVudW1lcmF0ZSBhbmQgaW5jbHVkZSB0aGVtIGluIHRoZSBvdXRwdXQgKi9cbiAgYWRkaXRpb25hbFByb3BlcnRpZXM/OiBBcnJheTxrZXlvZiBUPjtcbiAgcHJvcGVydHlUcmFuc2Zvcm1zPzogUGFydGlhbDxUcmFuc2Zvcm1zRm9yPFQ+Pjtcbn07XG5cbi8qKlxuICogSW5wc2VjdCBhbiBTREsgQ29sbGVjdGlvbiBieSBzaG93aW5nIHRoZSBzZWxlY3RlZCBpdGVtJ3MgY29udGVudHMgaW4gYSB0ZXh0YXJlYS5cbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9ucyBvZiB0aGUgYENvbGxlY3Rpb25TZWxlY3RgIGFuZCBhY2NlcHRzIGFsbCB0aGUgc2FtZSBwcm9wcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbGxlY3Rpb25JbnNwZWN0b3I8VD4ocHJvcHM6IFByb3BzPFQ+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbc2VsZWN0ZWRJdGVtLCBzZWxlY3RJdGVtXSA9IHVzZVN0YXRlPFQgfCBudWxsPigpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlZCA9IHVzZUNhbGxiYWNrKChpZDogc3RyaW5nLCBpdGVtOiBUIHwgbnVsbCkgPT4ge1xuICAgIGlmICghaXRlbSkge1xuICAgICAgc2VsZWN0SXRlbShudWxsKTtcbiAgICAgIHByb3BzLm9uQ2hhbmdlZD8uKCcnLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB7IC4uLml0ZW0gfTtcbiAgICAgIChwcm9wcy5hZGRpdGlvbmFsUHJvcGVydGllcyB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gaXRlbVtrZXldO1xuICAgICAgfSk7XG5cbiAgICAgIHNlbGVjdEl0ZW0ob3V0cHV0KTtcbiAgICAgIHByb3BzLm9uQ2hhbmdlZD8uKGlkLCBpdGVtKTtcbiAgICB9XG4gIH0sIFtwcm9wc10pO1xuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZU91dHB1dChpdGVtOiBUKTogc3RyaW5nIHtcbiAgICBjb25zdCBvdXRwdXQgPSB7IC4uLml0ZW0gfSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICBpZiAocHJvcHMucHJvcGVydHlUcmFuc2Zvcm1zKSB7XG4gICAgICAvLyB0eXBlc2NyaXB0IG1ha2VzIGl0IFJFRUVFRUFBQUFMTEwgaGFyZCB0byBkbyBhbiBPYmplY3QuZW50cmllcyBmb3IgYW4gb2JqZWN0IHRoYXQgZG9lc24ndCBoYXZlIFwic3RhbmRhcmRcIiBzdHJpbmcga2V5cy4uLlxuICAgICAgY29uc3QgdHJhbnNmb3JtUmVjb3JkID0gcHJvcHMucHJvcGVydHlUcmFuc2Zvcm1zIGFzIFJlY29yZDxzdHJpbmcsIFRyYW5zZm9ybXNGb3I8VD5ba2V5b2YgVF0+O1xuICAgICAgZm9yIChjb25zdCBba2V5LCB0cmFuc2Zvcm1dIG9mIE9iamVjdC5lbnRyaWVzPFRyYW5zZm9ybXNGb3I8VD5ba2V5b2YgVF0+KHRyYW5zZm9ybVJlY29yZCkpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSB0cmFuc2Zvcm0oaXRlbVtrZXkgYXMga2V5b2YgVF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvdXRwdXQpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YCR7cHJvcHMubGFiZWx9IC0gU2VsZWN0b3JgfT5cbiAgICAgIDxkaXY+XG4gICAgICAgIHtwcm9wcy5sYWJlbCArICc6J31cbiAgICAgICAgPENvbGxlY3Rpb25TZWxlY3RcbiAgICAgICAgICBjb2xsZWN0aW9uPXtwcm9wcy5jb2xsZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlZD17b25DaGFuZ2VkfVxuICAgICAgICAgIHNvcnQ9e3Byb3BzLnNvcnR9XG4gICAgICAgICAgb3B0aW9uTGFiZWw9e3Byb3BzLm9wdGlvbkxhYmVsfVxuICAgICAgICAgIGhvdmVyTGFiZWw9e3Byb3BzLmhvdmVyTGFiZWx9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzgwJScgfX1cbiAgICAgICAgICByZWFkT25seVxuICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZEl0ZW0gPyBzZXJpYWxpemVPdXRwdXQoc2VsZWN0ZWRJdGVtKSA6ICcnfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9Db250cm9sUGFuZWw+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBvblJlZ2lzdGVyKGlkOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZ2lzdGVyKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgaWRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgc3JjSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgcmVnaXN0ZXIgPSB1c2VDYWxsYmFjayhhc3luYyAoaWQ6IHN0cmluZywgc3JjOiBzdHJpbmcpID0+IHtcbiAgICBhd2FpdCBwcm9wcy5zZGsuQXNzZXQucmVnaXN0ZXJUZXh0dXJlKGlkLCBzcmMpO1xuICAgIHByb3BzLm9uUmVnaXN0ZXIoaWQsIHNyYyk7XG4gIH0sIFtwcm9wc10pO1xuXG4gIGNvbnN0IHJlZ2lzdGVyVGV4dHVyZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoaWRJbnB1dC5jdXJyZW50ICYmIHNyY0lucHV0LmN1cnJlbnQpIHtcbiAgICAgIHJlZ2lzdGVyKGlkSW5wdXQuY3VycmVudC52YWx1ZSwgc3JjSW5wdXQuY3VycmVudC52YWx1ZSk7XG4gICAgfVxuICB9LCBbcmVnaXN0ZXJdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxJY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIENocm9tZTogICdpbWFnZXMvY2hyb21lLnBuZycsXG4gICAgICBGaXJlZm94OiAnaW1hZ2VzL2ZpcmVmb3gucG5nJyxcbiAgICAgIEVkZ2U6ICAgICdpbWFnZXMvZWRnZS5wbmcnLFxuICAgIH07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5pdGlhbEljb25zKSB7XG4gICAgICByZWdpc3RlcihrZXksIGluaXRpYWxJY29uc1trZXldKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdhc3NldC1pZCc+aWQ6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2lkSW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSdhc3NldC1pZCcgdHlwZT0nc3RyaW5nJy8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdhc3NldC1zcmMnPnNyYzogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17c3JjSW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSdhc3NldC1zcmMnIHR5cGU9J3N0cmluZycvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSdhc3NldC1yZWdpc3Rlcicgb25DbGljaz17cmVnaXN0ZXJUZXh0dXJlfT5SZWdpc3RlcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5pbXBvcnQgeyBBc3NldENvbGxlY3Rpb25BZGFwdGVyIH0gZnJvbSAnLi9Bc3NldENvbGxlY3Rpb24nO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi4vQ29udHJvbFBhbmVsJztcbmltcG9ydCB7IFJlZ2lzdGVyIH0gZnJvbSAnLi9SZWdpc3Rlcic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIGFzc2V0czogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgc2V0QXNzZXRzOiBSZWFjdC5EaXNwYXRjaDxSZWFjdC5TZXRTdGF0ZUFjdGlvbjxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj47XG4gIHNldFNlbGVjdGVkQXNzZXQoYXNzZXRJZDogc3RyaW5nKTogdm9pZDtcbn1cblxuY29uc3QgYXNzZXRDb2xsZWN0aW9uID0gbmV3IEFzc2V0Q29sbGVjdGlvbkFkYXB0ZXIoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIEFzc2V0KHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3Qgb25SZWdpc3RlciA9IHVzZUNhbGxiYWNrKChpZDogc3RyaW5nLCBzcmM6IHN0cmluZykgPT4ge1xuICAgIHByb3BzLnNldEFzc2V0cygoY3VycmVudEFzc2V0cykgPT4gKHtcbiAgICAgIC4uLmN1cnJlbnRBc3NldHMsXG4gICAgICBbaWRdOiBzcmMsXG4gICAgfSkpO1xuICAgIGFzc2V0Q29sbGVjdGlvbi5hZGQoaWQsIHsgaWQsIHNyYyB9KTtcbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29sbGVjdGlvbkluc3BlY3RvclxuICAgICAgICBjb2xsZWN0aW9uPXthc3NldENvbGxlY3Rpb259XG4gICAgICAgIGxhYmVsPXsnQXNzZXQnfVxuICAgICAgICBvbkNoYW5nZWQ9e3Byb3BzLnNldFNlbGVjdGVkQXNzZXR9XG4gICAgICAvPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J0Fzc2V0IC0gUmVnaXN0ZXInfT5cbiAgICAgICAgPFJlZ2lzdGVyIHNkaz17cHJvcHMuc2RrfSBvblJlZ2lzdGVyPXtvblJlZ2lzdGVyfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cblxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBBc3NldCA9IHtcbiAgaWQ6IHN0cmluZztcbiAgc3JjOiBzdHJpbmc7XG59O1xuLyoqXG4gKiBTaW5jZSB3ZSBkb250JyBleHBvc2UgYSBjb2xsZWN0aW9uIG9mIG1wU2RrLkFzc2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NldENvbGxlY3Rpb25BZGFwdGVyIHtcbiAgcHJpdmF0ZSBvYnNlcnZlcnMgPSBuZXcgU2V0PE1wU2RrLklNYXBPYnNlcnZlcjxBc3NldD4+KCk7XG4gIHByaXZhdGUgYXNzZXRzOiBNcFNkay5EaWN0aW9uYXJ5PEFzc2V0PiA9IHtcbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmFzc2V0cykge1xuICAgICAgICB5aWVsZCBba2V5LCB0aGlzLmFzc2V0c1trZXldXTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cbiAgcHVibGljIHN1YnNjcmliZShvYnNlcnZlcjogTXBTZGsuSU1hcE9ic2VydmVyPEFzc2V0Pik6IE1wU2RrLklTdWJzY3JpcHRpb24ge1xuICAgIHRoaXMub2JzZXJ2ZXJzLmFkZChvYnNlcnZlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgICB0aGlzLm9ic2VydmVycy5kZWxldGUob2JzZXJ2ZXIpO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFkZChpZDogc3RyaW5nLCBhc3NldDogQXNzZXQpOiB2b2lkIHtcbiAgICB0aGlzLmFzc2V0c1tpZF0gPSBhc3NldDtcbiAgICBmb3IgKGNvbnN0IG9ic2VydmVyIG9mIHRoaXMub2JzZXJ2ZXJzKSB7XG4gICAgICBvYnNlcnZlci5vbkFkZGVkPy4oaWQsIGFzc2V0LCB0aGlzLmFzc2V0cyk7XG4gICAgICBvYnNlcnZlci5vbkNvbGxlY3Rpb25VcGRhdGVkPy4odGhpcy5hc3NldHMpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29udmVyc2lvbldvcmxkVG9TY3JlZW4ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgeElucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeklucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBleGVjdXRlID0gdXNlQ2FsbGJhY2soKGVsZW1lbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBjb21wdXRlVmFsdWUgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgheElucHV0RWxlbWVudC5jdXJyZW50IHx8ICF5SW5wdXRFbGVtZW50LmN1cnJlbnQgfHwgIXpJbnB1dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNkayAgPSBwcm9wcy5zZGs7XG4gICAgICBjb25zdCB4ID0geElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICAgIGNvbnN0IHkgPSB5SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgICAgY29uc3QgeiA9IHpJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICAgIGlmICgheCB8fCAheSB8fCAheikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwb3NlOiBhbnkgPSBudWxsO1xuICAgICAgYXdhaXQgc2RrLkNhbWVyYS5wb3NlLndhaXRVbnRpbChmdW5jdGlvbihwb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgcG9zZSA9IHBvc2VDYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2hvd2Nhc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvd2Nhc2UnKSBhcyBIVE1MSUZyYW1lRWxlbWVudDtcbiAgICAgIGNvbnN0IHNob3djYXNlU2l6ZSA9IHtcbiAgICAgICB3OiBzaG93Y2FzZS5jbGllbnRXaWR0aCxcbiAgICAgICBoOiBzaG93Y2FzZS5jbGllbnRIZWlnaHQsXG4gICAgICB9O1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAocHJvcHMuc2RrLkNvbnZlcnNpb24ud29ybGRUb1NjcmVlbih7eDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KSwgejogcGFyc2VGbG9hdCh6KX0sIHBvc2UsIHNob3djYXNlU2l6ZSkpO1xuICAgICAgICByZXN1bHQueCA9IE1hdGgudHJ1bmMocmVzdWx0LngpO1xuICAgICAgICByZXN1bHQueSA9IE1hdGgudHJ1bmMocmVzdWx0LnkpO1xuXG4gICAgICAgIHNldE1lc3NhZ2UoYHN1Y2Nlc3MgeDoke3Jlc3VsdC54fSB5OiR7cmVzdWx0Lnl9YCk7XG4gICAgICB9XG4gICAgICBjYXRjaChlKSB7XG4gICAgICAgIHNldE1lc3NhZ2UoYGVycm9yYCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbXB1dGVWYWx1ZSgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2V4ZWN1dGV9PndvcmxkVG9TY3JlZW48L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdjb252ZXJzaW9uLXdvcmxkdG9zY3JlZW4teCcgY2xhc3NOYW1lPVwic21hbGwtaW5wdXRcIiBwbGFjZWhvbGRlcj0neCcgcmVmPXt4SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD0nY29udmVyc2lvbi13b3JsZHRvc2NyZWVuLXknIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3knIHJlZj17eUlucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J2NvbnZlcnNpb24td29ybGR0b3NjcmVlbi16JyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSd6JyByZWY9e3pJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgICA8ZGl2IGlkPSdzZXR0aW5ncy11cGRhdGUtbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb252ZXJzaW9uV29ybGRUb1NjcmVlbiB9IGZyb20gJy4vQ29udmVyc2lvbldvcmxkVG9TY3JlZW4nO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29udmVyc2lvbihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BDb252ZXJzaW9uYH08L2Rpdj5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDxDb252ZXJzaW9uV29ybGRUb1NjcmVlbiBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkaywgRmxvb3IgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuY29uc3QgdGV4dEFyZWFTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgaGVpZ2h0OiA1MCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBGbG9vckdldERhdGEocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbZmxvb3JzLCBzZXRGbG9vcnNdID0gdXNlU3RhdGU8Rmxvb3IuRmxvb3JzfG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNka0Zsb29ycyA9IGF3YWl0IHByb3BzLnNkay5GbG9vci5nZXREYXRhKCk7XG4gICAgc2V0Rmxvb3JzKHNka0Zsb29ycyk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoZmxvb3JzKTtcblxuICByZXR1cm4gKFxuICAgIDx0cj5cbiAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjYWxsYmFja30+Z2V0RGF0YTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSB2YWx1ZT17c2VyaWFsaXplZH0gcmVhZE9ubHk9e3RydWV9Lz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZsb29yTW92ZVRvKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IFttb3ZlQ2FtZXJhT3B0aW9uQ2hhbmdlZCwgc2V0TW92ZUNhbWVyYU9wdGlvbkNoYW5nZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIGNvbnN0IGlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgY2hlY2tib3hFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgIGlmICghaW5wdXRFbGVtZW50LmN1cnJlbnQgfHwgIWNoZWNrYm94RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdDogc3RyaW5nO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmbG9vckluZGV4ID0gcGFyc2VJbnQoaW5wdXRFbGVtZW50LmN1cnJlbnQudmFsdWUsIDEwKTtcbiAgICAgIGxldCBuZXdGbG9vcjtcbiAgICAgIGlmIChtb3ZlQ2FtZXJhT3B0aW9uQ2hhbmdlZCkge1xuICAgICAgICBuZXdGbG9vciA9IGF3YWl0ICgocHJvcHMuc2RrIGFzIGFueSkuRmxvb3IubW92ZVRvKGZsb29ySW5kZXgpKSBhcyBzdHJpbmd8dW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHN1cHByZXNzQ2FtZXJhID0gY2hlY2tib3hFbGVtZW50LmN1cnJlbnQuY2hlY2tlZDtcbiAgICAgICAgbmV3Rmxvb3IgPSBhd2FpdCAoKHByb3BzLnNkayBhcyBhbnkpLkZsb29yLm1vdmVUbyhmbG9vckluZGV4LCBzdXBwcmVzc0NhbWVyYSkpIGFzIHN0cmluZ3x1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IGBNb3ZlZCB0byBmbG9vciBpbmRleCAke25ld0Zsb29yfWA7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHJlc3VsdCA9IGBFcnJvciAke2V9YDtcbiAgICB9XG5cbiAgICBzZXRNZXNzYWdlKHJlc3VsdCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB0b2dnbGVNb3ZlQ2FtZXJhT3B0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE1vdmVDYW1lcmFPcHRpb25DaGFuZ2VkKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgbW92ZUNhbWVyYURlc2MgPSAhbW92ZUNhbWVyYU9wdGlvbkNoYW5nZWQgPyAnTW92ZSBjYW1lcmEodW5zZXQpJyA6ICdNb3ZlIGNhbWVyYShzZXQpJztcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5tb3ZlVG88L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9J2Zsb29yLW1vdmV0by1pbmRleCcgY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgcGxhY2Vob2xkZXI9J2luZGV4JyByZWY9e2lucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQgY29sU3Bhbj17MX0+XG4gICAgICAgICAgPGRpdj57bW92ZUNhbWVyYURlc2N9PC9kaXY+XG4gICAgICAgICAgPGlucHV0IGlkPSdmbG9vci1tb3ZldG8tbW92ZWNhbWVyYScgdHlwZT0nY2hlY2tib3gnIHJlZj17Y2hlY2tib3hFbGVtZW50fSBkZWZhdWx0Q2hlY2tlZCBvbkNoYW5nZT17dG9nZ2xlTW92ZUNhbWVyYU9wdGlvbn0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezJ9PlxuICAgICAgICAgIDxkaXYgaWQ9J3NldHRpbmdzLWdldC1tZXNzYWdlJz57bWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRmxvb3JTaG93QWxsKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoZWxlbWVudDogYW55KSA9PiB7XG4gICAgYXdhaXQgcHJvcHMuc2RrLkZsb29yLnNob3dBbGwoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPHRyPlxuICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5zaG93QWxsPC9idXR0b24+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGNzczogQ1NTUHJvcGVydGllcyA9IHtcbiAgaGVpZ2h0OiA1LFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFJvd1NwYWNlcigpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPHRyIHN0eWxlPXtjc3N9Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyAsIFN5bnRoZXRpY0V2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQgLCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgSU9ic2VydmFibGVNYXAsIERpY3Rpb25hcnkgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIENvbGxQcm9wczxUPiB7XG4gIG5hbWU6IHN0cmluZztcbiAgY29sbGVjdGlvbjogSU9ic2VydmFibGVNYXA8VD47XG59XG5cbmludGVyZmFjZSBFdmVudCB7XG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIHR5cGU6IHN0cmluZztcbiAgcGF5bG9hZDogYW55O1xufVxuXG5jb25zdCBldmVudExpc3RTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgd2lkdGg6ICcyMDBweCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYm9yZGVyQ29sb3I6ICdsaWdodGdyYXknLFxufTtcblxuY29uc3QgaW5wdXRTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgbWF4V2lkdGg6IDIwLFxufTtcblxuY29uc3Qgb2xTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgcGFkZGluZzogMixcbiAgaGVpZ2h0OiAnNTAlJyxcbiAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxufTtcblxuY29uc3QgdW5zdWJiZWRTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyMzksIDIzOSwgMjM5LCAwLjMpJyxcbn07XG5cbmNvbnN0IHRleHRBcmVhU3R5bGUgPSBmdW5jdGlvbihzaG93OiBib29sZWFuKTogQ1NTUHJvcGVydGllcyB7XG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiAzMixcbiAgICBkaXNwbGF5OiBzaG93ID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgfTtcbn07XG5cbi8qKlxuICogQSBjb21wb25lbnQgdGhhdCB3aWxsIHN1YnNjaWJlIHRvIFNESyBDb2xsZWN0aW9uIGFuZCByZXBvcnQgYWxsIG9mIHRoZSBldmVudHMgdGhhdCBoYXZlIG9jY3VycmVkIG9uIHRoYXQgY29sbGVjdGlvblxuICogV2hlbiB1bnN1YnNjcmliZWQsIHRoZSBldmVudCBsaXN0IGlzIHVubW9kaWZpZWQuIFdoZW4gKHJlKXN1YnNjcmliaW5nLCB0aGUgZXZlbnQgbGlzdCBpcyBjbGVhcmVkIGFuZCByZS1yZW5kZXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gT2JzZXJ2YWJsZUNvbGxlY3Rpb248VD4ocHJvcHM6IENvbGxQcm9wczxUPik6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgWyBldmVudExpc3QsIHNldEV2ZW50TGlzdCBdID0gdXNlU3RhdGU8RXZlbnRbXT4oW10pO1xuICBjb25zdCBbIGlzU3Vic2NyaWJlZCwgc3Vic2NyaWJlIF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgc3ViID0gdXNlUmVmPGFueT4obnVsbCk7XG4gIGNvbnN0IGV2ZW50TGlzdFJlZiA9IHVzZVJlZjxFdmVudFtdPigpO1xuICBldmVudExpc3RSZWYuY3VycmVudCA9IGV2ZW50TGlzdDtcblxuICBjb25zdCBzdWJUb0NvbGxlY3Rpb24gPSB1c2VDYWxsYmFjayhmdW5jdGlvbigpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gZnVuY3Rpb24odHlwZTogc3RyaW5nLCBpdGVtOiBhbnksIGluZGV4Pzogc3RyaW5nKSB7XG4gICAgICBjb25zdCBuZXdFdmVudDogRXZlbnQgPSB7XG4gICAgICAgIGNoZWNrZWQ6IGZhbHNlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBwYXlsb2FkOiBpdGVtLFxuICAgICAgfTtcblxuICAgICAgLy8gbW9kaWZ5aW5nIHRoZSBsaXN0IG11bHRpcGxlIHRpbWVzIHBlciBmcmFtZSByZXF1aXJlcyB0aGF0IHdlIHVzZSB0aGUgKG9sZFN0YXRlKSA9PiBuZXdTdGF0ZSBmb3JtIG9mIHRoZSBzZXR0ZXIgZnJvbSBgdXNlU3RhdGVgXG4gICAgICAvLyBvdGhlcndpc2UsIHdoZW4gUmVhY3QgYmF0Y2hlcyB0aGUgY2hhbmdlcyAoc2luY2Ugb3VyIHN0YXRlIGhhc24ndCB1cGRhdGVkKSB3ZSB3aWxsIGJlIHNldHRpbmcgc3RhdGUgYXMgb25seSB0aGUgbGF0ZXN0IGV2ZW50XG4gICAgICBzZXRFdmVudExpc3QoKGN1cnJlbnRFdmVudHMpID0+IFtcbiAgICAgICAgLi4uY3VycmVudEV2ZW50cyxcbiAgICAgICAgbmV3RXZlbnQsXG4gICAgICBdKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3BzLmNvbGxlY3Rpb24uc3Vic2NyaWJlKHtcbiAgICAgIG9uQWRkZWQ6IChpbmRleDogc3RyaW5nLCBpdGVtOiBUKSA9PiB7XG4gICAgICAgIGhhbmRsZXIoJ29uQWRkZWQnLCBpdGVtLCBpbmRleCk7XG4gICAgICB9LFxuICAgICAgb25SZW1vdmVkOiAoaW5kZXg6IHN0cmluZywgaXRlbTogVCkgPT4ge1xuICAgICAgICBoYW5kbGVyKCdvblJlbW92ZWQnLCBpdGVtLCBpbmRleCk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGVkOiAoaW5kZXg6IHN0cmluZywgaXRlbTogVCkgPT4ge1xuICAgICAgICBoYW5kbGVyKCdvblVwZGF0ZWQnLCBpdGVtLCBpbmRleCk7XG4gICAgICB9LFxuICAgICAgb25Db2xsZWN0aW9uVXBkYXRlZDogKGNvbGxlY3Rpb246IERpY3Rpb25hcnk8VD4pID0+IHtcbiAgICAgICAgaGFuZGxlcignb25Db2xsZWN0aW9uVXBkYXRlZCcsIGNvbGxlY3Rpb24pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSwgW3Byb3BzLmNvbGxlY3Rpb25dKTtcblxuICBjb25zdCBkb1N1YnNjcmlwdGlvbiA9IHVzZUNhbGxiYWNrKChldmVudDogU3ludGhldGljRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRUYXJnZXQ6IGNoZWNrYm94IH0gPSBldmVudDtcbiAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgLy8gY2xlYXIgdGhlIGV2ZW50IGxpc3QgYW5kIHN0YXJ0IHBvcHVsYXRpbmcgaXQgYWdhaW5cbiAgICAgIHNldEV2ZW50TGlzdChbXSk7XG4gICAgICBzdWIuY3VycmVudCA9IHN1YlRvQ29sbGVjdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWIuY3VycmVudC5jYW5jZWwoKTtcbiAgICAgIHN1Yi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoY2hlY2tib3guY2hlY2tlZCk7XG4gIH0sIFtzdWJUb0NvbGxlY3Rpb25dKTtcblxuICBjb25zdCBvbkNoZWNrYm94Q2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uKGVsZW1lbnQ6IFN5bnRoZXRpY0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgaW5kZXggPSBwYXJzZUludChlbGVtZW50LmN1cnJlbnRUYXJnZXQudmFsdWUsIDEwKTtcbiAgICBjb25zdCBuZXdBcnJheSA9IFsuLi5ldmVudExpc3RdO1xuICAgIG5ld0FycmF5W2luZGV4XS5jaGVja2VkID0gZWxlbWVudC5jdXJyZW50VGFyZ2V0LmNoZWNrZWQ7XG4gICAgc2V0RXZlbnRMaXN0KG5ld0FycmF5KTtcbiAgfSwgW2V2ZW50TGlzdF0pO1xuXG4gIGNvbnN0IHJlbmRlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGV2ZW50cyA9IGV2ZW50TGlzdC5tYXAoZnVuY3Rpb24oZXZlbnQ6IEV2ZW50LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxsaSBrZXk9e2luZGV4fT5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9e2luZGV4fSBvbkNoYW5nZT17b25DaGVja2JveENoYW5nZWR9IHN0eWxlPXtpbnB1dFN0eWxlfS8+e2V2ZW50LnR5cGV9XG4gICAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlKGV2ZW50LmNoZWNrZWQpfSBkZWZhdWx0VmFsdWU9e0pTT04uc3RyaW5naWZ5KGV2ZW50LnBheWxvYWQpfS8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+Q29sbGVjdGlvbjoge3Byb3BzLm5hbWV9PC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBzdWJzY3JpYmU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbkNoYW5nZT17ZG9TdWJzY3JpcHRpb259IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e2lzU3Vic2NyaWJlZCA/IHsgLi4uZXZlbnRMaXN0U3R5bGUgfSA6IHsgLi4uZXZlbnRMaXN0U3R5bGUsIC4uLnVuc3ViYmVkU3R5bGUgfX0+XG4gICAgICAgIDxvbCBzdHlsZT17b2xTdHlsZX0+XG4gICAgICAgICAge3JlbmRlckV2ZW50cygpfVxuICAgICAgICA8L29sPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcywgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzPFQ+IHtcbiAgbmFtZTogc3RyaW5nO1xuICBvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZTxUPlxufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIE9ic2VydmFibGU8VD4ocHJvcHM6IFByb3BzPFQ+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbIHZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgWyBpc1N1YnNjcmliZWQsIHN1YnNjcmliZSBdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHN1YiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuXG4gIGNvbnN0IGRvU3Vic2NyaXB0aW9uID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBTeW50aGV0aWNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudFRhcmdldDogY2hlY2tib3ggfSA9IGV2ZW50O1xuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBzdWIuY3VycmVudCA9IHByb3BzLm9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgb25DaGFuZ2VkKGRhdGE6IFQpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIGFuIG9iamVjdCwgcHJlcGFyZSB0byBtYWtlIGFsdGVyYXRpb25zXG4gICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGRhdGEpKXtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0geyAuLi5kYXRhIH0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2VzIGZvciB0aGluZ3MgbGlrZSBgU2V0YCB0aGF0IG90aGVyd2lzZSBpdCBzdHJpbmdpZmllcyB0byBge31gXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gZGF0YVtrZXkgYXMga2V5b2YgdHlwZW9mIGRhdGFdO1xuICAgICAgICAgICAgICAvLyBzdHJpbmdpZnkgYSBgU2V0YCB0byBsb29rIGxpa2UgYW4gYXJyYXlcbiAgICAgICAgICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW2tleV0gPSBbLi4ucHJvcFZhbHVlLnZhbHVlcygpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0VmFsdWUoSlNPTi5zdHJpbmdpZnkobmV3VmFsdWUpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgZGF0YSBpc24ndCBhbiBvYmplY3QsIHBhc3MgaXQgYXMtaXNcbiAgICAgICAgICAgIHNldFZhbHVlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ViLmN1cnJlbnQuY2FuY2VsKCk7XG4gICAgICBzdWIuY3VycmVudCA9IG51bGw7XG5cbiAgICAgIHNldFZhbHVlKCcnKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoY2hlY2tib3guY2hlY2tlZCk7XG4gIH0sIFtwcm9wcy5vYnNlcnZhYmxlXSk7XG5cbiAgY29uc3Qgc2VyaWFsaXplZCA9IGlzU3Vic2NyaWJlZCA/IHZhbHVlIDogJ25vdCBzdWJiZWQnO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIE9ic2VydmFibGU6IHtwcm9wcy5uYW1lfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBzdWJzY3JpYmU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbkNoYW5nZT17ZG9TdWJzY3JpcHRpb259IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYSByb3dzPXszfSBzdHlsZT17dGV4dEFyZWFTdHlsZX0gcmVhZE9ubHkgdmFsdWU9e3NlcmlhbGl6ZWR9IGRpc2FibGVkPXshaXNTdWJzY3JpYmVkfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzPFQ+IHtcbiAgc2RrOiBNcFNkaztcbiAgZW51bTogVDtcbn1cblxuaW50ZXJmYWNlIEV2ZW50PFQ+IHtcbiAgY2hlY2tlZDogYm9vbGVhbjtcbiAgdHlwZTogVDtcbiAgZGF0YTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRXZlbnQ8VD4ocHJvcHM6IFByb3BzPFQ+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbZXZlbnRMaXN0LCBzZXRFdmVudExpc3RdID0gdXNlU3RhdGU8QXJyYXk8RXZlbnQ8VD4+PihbXSk7XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHNkayA9IHByb3BzLnNkaztcbiAgICBjb25zdCBoYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50VHlwZTogVCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3M6IGFueSkge1xuICAgICAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgICAgICBpZiAodHlwZW9mKGFyZykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChKU09OLnN0cmluZ2lmeShhcmcpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChhcmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50TGlzdC5wdXNoKHtcbiAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiBldmVudFR5cGUsXG4gICAgICAgICAgZGF0YTogcmVzdWx0LmpvaW4oJywnKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHNldEV2ZW50TGlzdChbLi4uZXZlbnRMaXN0XSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3QudmFsdWVzKHByb3BzLmVudW0pKSB7XG4gICAgICBzZGsub24oa2V5IGFzIGFueSwgaGFuZGxlRXZlbnQoa2V5KSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLCBwcm9wcy5lbnVtLCBldmVudExpc3RdKTtcblxuICBjb25zdCBvbkNoZWNrYm94Q2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uKGVsZW1lbnQ6IGFueSkge1xuICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoZWxlbWVudC50YXJnZXQudmFsdWUgYXMgc3RyaW5nLCAxMCk7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbLi4uZXZlbnRMaXN0XTtcbiAgICBuZXdBcnJheVtpbmRleF0uY2hlY2tlZCA9IGVsZW1lbnQudGFyZ2V0LmNoZWNrZWQ7XG4gICAgc2V0RXZlbnRMaXN0KG5ld0FycmF5KTtcbiAgfSwgW2V2ZW50TGlzdF0pO1xuXG4gIGNvbnN0IHJlbmRlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGV2ZW50SW5mbyA9IGV2ZW50TGlzdC5tYXAoZnVuY3Rpb24oZXZlbnQ6IEV2ZW50PFQ+LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxsaSBrZXk9e2luZGV4fSBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4JywganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0J319PlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT17aW5kZXh9IG9uQ2hhbmdlPXtvbkNoZWNrYm94Q2hhbmdlZH0gc3R5bGU9e3ttYXhXaWR0aDogMjB9fS8+XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXZlbnQuY2hlY2tlZCA/IDx0ZXh0YXJlYSByb3dzPXszfSBzdHlsZT17e2hlaWdodDogMzAsIGZsb2F0OiAncmlnaHQnfX0gZGVmYXVsdFZhbHVlPXtldmVudC5kYXRhfS8+IDpcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tmbG9hdDogJ3JpZ2h0J319PntTdHJpbmcoZXZlbnQudHlwZSl9PC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBldmVudEluZm87XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PkV2ZW50PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPG9sIHN0eWxlPXt7cGFkZGluZzogMn19PlxuICAgICAgICAgICAge3JlbmRlckV2ZW50cygpfVxuICAgICAgICAgIDwvb2w+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZsb29yR2V0RGF0YSB9IGZyb20gJy4vRmxvb3JHZXREYXRhJztcbmltcG9ydCB7IEZsb29yTW92ZVRvIH0gZnJvbSAnLi9GbG9vck1vdmVUbyc7XG5pbXBvcnQgeyBGbG9vclNob3dBbGwgfSBmcm9tICcuL0Zsb29yU2hvd0FsbCc7XG5pbXBvcnQgeyBSb3dTcGFjZXIgfSBmcm9tICcuL1Jvd1NwYWNlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQ29sbGVjdGlvbiB9IGZyb20gJy4vT2JzZXJ2YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQnO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZsb29yKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YEZsb29yYH0+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8Rmxvb3JHZXREYXRhIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgICA8Um93U3BhY2VyLz5cbiAgICAgICAgICAgIDxGbG9vck1vdmVUbyBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgICAgPFJvd1NwYWNlci8+XG4gICAgICAgICAgICA8Rmxvb3JTaG93QWxsIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BGbG9vciAtIEN1cnJlbnRgfT5cbiAgICAgICAgPE9ic2VydmFibGUgb2JzZXJ2YWJsZT17cHJvcHMuc2RrLkZsb29yLmN1cnJlbnR9IG5hbWU9J0Zsb29yLmN1cnJlbnQnLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BGbG9vciAtIENvbGxlY3Rpb25gfT5cbiAgICAgICAgPE9ic2VydmFibGVDb2xsZWN0aW9uIGNvbGxlY3Rpb249e3Byb3BzLnNkay5GbG9vci5kYXRhfSBuYW1lPSdGbG9vci5kYXRhJy8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXtgRmxvb3IgLSBFdmVudHNgfT5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxFdmVudCBlbnVtPXtwcm9wcy5zZGsuRmxvb3IuRXZlbnR9IHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrLCBMYWJlbCB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIExhYmVsR2V0RGF0YShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtsYWJlbHMsIHNldExhYmVsc10gPSB1c2VTdGF0ZTxMYWJlbC5MYWJlbFtdPihbXSk7XG4gIGNvbnN0IFtjdXJyZW50TGFiZWxTaWQsIHNldEN1cnJlbnRMYWJlbFNpZF0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBnZXREYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNka0xhYmVscyA9IGF3YWl0IHByb3BzLnNkay5MYWJlbC5nZXREYXRhKCk7XG4gICAgc2V0TGFiZWxzKHNka0xhYmVscyk7XG4gICAgc2V0Q3VycmVudExhYmVsU2lkKHNka0xhYmVscy5sZW5ndGggPiAwPyBzZGtMYWJlbHNbMF0uc2lkIDogJycpO1xuICB9LCBbXSk7XG5cbiAgbGV0IGxhYmVsT3B0aW9uczogSlNYLkVsZW1lbnR8SlNYLkVsZW1lbnRbXSA9IDxvcHRpb24gdmFsdWU9ezB9IGRpc2FibGVkID4obm8gZGF0YSk8L29wdGlvbj47XG4gIGxldCBzZXJpYWxpemVkID0gJyc7XG5cbiAgaWYgKGxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgbGFiZWxPcHRpb25zID0gbGFiZWxzLm1hcCgobGFiZWwpID0+IHtcbiAgICAgIHJldHVybiA8b3B0aW9uIGtleT17bGFiZWwuc2lkfSB2YWx1ZT17bGFiZWwuc2lkfT57bGFiZWwuc2lkfTwvb3B0aW9uPjtcbiAgICB9KTtcbiAgICBjb25zdCBpbmRleCA9IGxhYmVscy5maW5kSW5kZXgoKGxhYmVsSXRlbSkgPT4gbGFiZWxJdGVtLnNpZCA9PT0gY3VycmVudExhYmVsU2lkICk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjb25zdCBsYWJlbCA9IGxhYmVsc1tpbmRleF07XG4gICAgICBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkobGFiZWwsIG51bGwsIDIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uU2VsZWN0ZWQgPSB1c2VDYWxsYmFjaygodmFsOiBhbnkpID0+IHNldEN1cnJlbnRMYWJlbFNpZCh2YWwudGFyZ2V0LnZhbHVlKSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17MX0+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtnZXREYXRhfT5nZXREYXRhPC9idXR0b24+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgICA8c2VsZWN0IHZhbHVlPXtjdXJyZW50TGFiZWxTaWR9IG9uQ2hhbmdlPXtvblNlbGVjdGVkfT5cbiAgICAgICAgICAgIHtsYWJlbE9wdGlvbnN9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSBkZWZhdWx0VmFsdWU9e3NlcmlhbGl6ZWR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgTGFiZWxHZXREYXRhIH0gZnJvbSAnLi9MYWJlbEdldERhdGEnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50JztcbmltcG9ydCB7IENvbGxlY3Rpb25JbnNwZWN0b3IgfSBmcm9tICcuL0NvbGxlY3Rpb25JbnNwZWN0b3InO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiZWwocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BMYWJlbGB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8RXZlbnQgc2RrPXtwcm9wcy5zZGt9IGVudW09e3Byb3BzLnNkay5MYWJlbC5FdmVudH0vPlxuICAgICAgICAgICAgPExhYmVsR2V0RGF0YSBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxDb2xsZWN0aW9uSW5zcGVjdG9yXG4gICAgICAgIGNvbGxlY3Rpb249e3Byb3BzLnNkay5MYWJlbC5kYXRhfVxuICAgICAgICBsYWJlbD17J0xhYmVsJ31cbiAgICAgIC8+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQXBwIHtcbiAgZXhwb3J0IGVudW0gRXZlbnQge1xuICAgIFBIQVNFX0NIQU5HRSA9ICdhcHBsaWNhdGlvbi5waGFzZWNoYW5nZScsXG4gIH1cbiAgLyoqXG4gICAqIEFwcGxpY2F0aW9uIHBoYXNlcyBhcmUgcmV0dXJuZWQgYXMgcGFydCBvZiB0aGUgW1tzdGF0ZV1dIG9ic2VydmFibGUuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5BcHAuc3RhdGUuc3Vic2NyaWJlKGZ1bmN0aW9uIChhcHBTdGF0ZSkge1xuICAgKiAgaWYoYXBwU3RhdGUucGhhc2UgPT09IG1wU2RrLkFwcC5QaGFzZS5MT0FESU5HKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdUaGUgYXBwIGhhcyBzdGFydGVkIGxvYWRpbmchJylcbiAgICogIH1cbiAgICogIGlmKGFwcFN0YXRlLnBoYXNlID09PSBtcFNkay5BcHAuUGhhc2UuU1RBUlRJTkcpIHtcbiAgICogICAgY29uc29sZS5sb2coJ1RoZSB0cmFuc2l0aW9uIGludG8gdGhlIHN0YXJ0IGxvY2F0aW9uIGJlZ2lucyEnKVxuICAgKiAgfVxuICAgKiAgaWYoYXBwU3RhdGUucGhhc2UgPT09IG1wU2RrLkFwcC5QaGFzZS5QTEFZSU5HKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdUaGUgYXBwIGlzIHJlYWR5IHRvIHRha2UgdXNlciBpbnB1dCBub3chJylcbiAgICogIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZXhwb3J0IGVudW0gUGhhc2Uge1xuICAgIFVOSU5JVElBTElaRUQgPSAnYXBwcGhhc2UudW5pbml0aWFsaXplZCcsXG4gICAgV0FJVElORyAgICAgICA9ICdhcHBwaGFzZS53YWl0aW5nJyxcbiAgICBMT0FESU5HICAgICAgID0gJ2FwcHBoYXNlLmxvYWRpbmcnLFxuICAgIFNUQVJUSU5HICAgICAgPSAnYXBwcGhhc2Uuc3RhcnRpbmcnLFxuICAgIFBMQVlJTkcgICAgICAgPSAnYXBwcGhhc2UucGxheWluZycsXG4gICAgRVJST1IgICAgICAgICA9ICdhcHBwaGFzZS5lcnJvcicsXG4gIH1cblxuICAvKipcbiAgICogQXBwbGljYXRpb25cbiAgICovXG4gIGV4cG9ydCBlbnVtIEFwcGxpY2F0aW9uIHtcbiAgICBVTktOT1dOICA9ICdhcHBsaWNhdGlvbi51bmtub3duJyxcbiAgICBXRUJWUiAgICA9ICdhcHBsaWNhdGlvbi53ZWJ2cicsXG4gICAgU0hPV0NBU0UgPSAnYXBwbGljYXRpb24uc2hvd2Nhc2UnLFxuICAgIFdPUktTSE9QID0gJ2FwcGxpY2F0aW9uLndvcmtzaG9wJyxcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIHR5cGUgaXMgdXNlZCBieSBkZXByZWNhdGVkIGZ1bmN0aW9uYWxpdHkuIFVzZSBbW3N0YXRlXV0gb2JzZXJ2YWJsZS5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEFwcFN0YXRlID0ge1xuICAgIGFwcGxpY2F0aW9uOiBBcHBsaWNhdGlvbjtcbiAgICBwaGFzZTogUGhhc2U7XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgU3RhdGUgPSB7XG4gICAgYXBwbGljYXRpb246IEFwcGxpY2F0aW9uO1xuICAgIHBoYXNlOiBQaGFzZTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgcGhhc2VzIGZyb20gW1tQaGFzZV1dXG4gICAgICogYW5kIHZhbHVlcyBhcmUgZXBvY2ggdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICogVGhlIHRpbWVzIGFyZSBmaWxsZWQgaW4gYWZ0ZXIgdGhlIHBoYXNlIGhhcyBwYXNzZWQuXG4gICAgICogYGBgXG4gICAgICoge1xuICAgICAqICAgIHBoYXNlVGltZXM6IHtcbiAgICAgKiAgICAgICdhcHBwaGFzZS51bmluaXRpYWxpemVkJzogMTU3MDA4NDE1NjU5MCxcbiAgICAgKiAgICAgICdhcHBwaGFzZS53YWl0aW5nJzogMCxcbiAgICAgKiAgICAgICdhcHBwaGFzZS5sb2FkaW5nJzogMCxcbiAgICAgKiAgICAgICdhcHBwaGFzZS5zdGFydGluZyc6IDAsXG4gICAgICogICAgICAnYXBwcGhhc2UucGxheWluZyc6IDAsXG4gICAgICogICAgICAnYXBwcGhhc2UuZXJyb3InOiAwLFxuICAgICAqICAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcGhhc2VUaW1lczoge1xuICAgICAgW3BoYXNlOiBzdHJpbmddOiBudW1iZXI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHAge1xuICBFdmVudDogdHlwZW9mIEFwcC5FdmVudDtcbiAgUGhhc2U6IHR5cGVvZiBBcHAuUGhhc2U7XG4gIEFwcGxpY2F0aW9uOiB0eXBlb2YgQXBwLkFwcGxpY2F0aW9uO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tzdGF0ZV1dIG9ic2VydmFibGUgdG8gZ2V0IHRoZSBjdXJyZW50IHBoYXNlIG9yIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZ2V0U3RhdGUoKTogUHJvbWlzZTxBcHAuQXBwU3RhdGU+O1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tzdGF0ZV1dIG9ic2VydmFibGUgdG8gZ2V0IGxvYWQgdGltZXMuXG4gICAqL1xuICBnZXRMb2FkVGltZXMoKTogUHJvbWlzZTx7W2tleSBpbiBBcHAuUGhhc2VdOiBudWxsIHwgbnVtYmVyfT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgYXBwbGljYXRpb24gc3RhdGUgb2JqZWN0LlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQXBwLnN0YXRlLnN1YnNjcmliZShmdW5jdGlvbiAoYXBwU3RhdGUpIHtcbiAgICogIC8vIGFwcCBzdGF0ZSBoYXMgY2hhbmdlZFxuICAgKiAgY29uc29sZS5sb2coJ1RoZSBjdXJyZW50IGFwcGxpY2F0aW9uOiAnLCBhcHBTdGF0ZS5hcHBsaWNhdGlvbik7XG4gICAqICBjb25zb2xlLmxvZygnVGhlIGN1cnJlbnQgcGhhc2U6ICcsIGFwcFN0YXRlLnBoYXNlKTtcbiAgICogIGNvbnNvbGUubG9nKCdMb2FkZWQgYXQgdGltZSAnLCBhcHBTdGF0ZS5waGFzZVRpbWVzW21wU2RrLkFwcC5QaGFzZS5MT0FESU5HXSk7XG4gICAqICBjb25zb2xlLmxvZygnU3RhcnRlZCBhdCB0aW1lICcsIGFwcFN0YXRlLnBoYXNlVGltZXNbbXBTZGsuQXBwLlBoYXNlLlNUQVJUSU5HXSk7XG4gICAqIH0pO1xuICAgKlxuICAgKiBvdXRwdXRcbiAgICogPiBUaGUgY3VycmVudCBhcHBsaWNhdGlvbjogYXBwbGljYXRpb24uc2hvd2Nhc2VcbiAgICogPiBUaGUgY3VycmVudCBwaGFzZTogYXBwcGhhc2Uud2FpdGluZ1xuICAgKiA+IExvYWRlZCBhdCB0aW1lIDE1NzAwODQxNTY1OTBcbiAgICogPiBTdGFydGVkIGF0IHRpbWUgMTU3MDA4NDE1NjgyNFxuICAgKiA+XG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGU6IElPYnNlcnZhYmxlPEFwcC5TdGF0ZT47XG59XG4iLCJleHBvcnQgbmFtZXNwYWNlIEFzc2V0IHtcbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIGV4cG9ydCB0eXBlIFZyQ29sb3JwbGFuTWV0YWRhdGEgPSB7XG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgaW1hZ2VPcmlnaW5YOiBudW1iZXIsXG4gICAgaW1hZ2VPcmlnaW5ZOiBudW1iZXIsXG4gICAgcmVzb2x1dGlvblBwbTogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gIH1cblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVnJDb2xvcnBsYW5EYXRhID0ge1xuICAgIGRhdGE6IFZyQ29sb3JwbGFuTWV0YWRhdGEsXG4gICAgaW1hZ2VEYXRhVXJsczogc3RyaW5nW10sXG4gIH1cblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJQXR0YWNobWVudCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBjcmVhdGVkOiBEYXRlO1xuICAgIG1lZGlhVHlwZTogTWVkaWFUeXBlO1xuICAgIGNhdGVnb3J5OiBBdHRhY2htZW50Q2F0ZWdvcnk7XG4gICAgcGFyZW50SWQ/OiBzdHJpbmc7XG4gICAgcGFyZW50VHlwZTogUGFyZW50VHlwZTtcbiAgICBmaWxlbmFtZT86IHN0cmluZztcbiAgICBieXRlcz86IG51bWJlcjtcbiAgICBtaW1lVHlwZT86IHN0cmluZztcbiAgICAvKiogc291cmNlIHVybCAtIHByZWZlciBgdXJsLmdldCgpYCBvdmVyIHRoaXMuICovXG4gICAgc3JjOiBzdHJpbmc7XG4gICAgLyoqIGV4cGlyaW5nIHVybCAqL1xuICAgIHVybDogRXhwaXJpbmdSZXNvdXJjZTxzdHJpbmc+O1xuICAgIC8qKiBleHBpcmluZyB0aHVtYm5haWwgdXJsICovXG4gICAgdGh1bWJuYWlsVXJsOiBFeHBpcmluZ1Jlc291cmNlPHN0cmluZz47XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAZXhwZXJpbWVudGFsXG4gICAqL1xuICBleHBvcnQgZW51bSBNZWRpYVR5cGUge1xuICAgIElNQUdFID0gJ2ltYWdlJyxcbiAgICBQREYgPSAncGRmJyxcbiAgICBWSURFTyA9ICd2aWRlbycsXG4gICAgUklDSCA9ICdyaWNoJyxcbiAgICBaSVAgPSAnemlwJyxcbiAgICBURVhUID0gJ3RleHQnLFxuICAgIEFVRElPID0gJ2F1ZGlvJyxcbiAgICBNT0RFTCA9ICdtb2RlbCcsXG4gICAgQVBQTElDQVRJT04gPSAnYXBwbGljYXRpb24nLFxuICB9XG5cbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIGV4cG9ydCBlbnVtIEF0dGFjaG1lbnRDYXRlZ29yeSB7XG4gICAgRVhURVJOQUwgPSAnZXh0ZXJuYWwnLFxuICAgIFVQTE9BRCA9ICd1cGxvYWQnLFxuICAgIFNBTkRCT1ggPSAnc2FuZGJveCcsXG4gIH1cblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgZXhwb3J0IGVudW0gUGFyZW50VHlwZSB7XG4gICAgQ09NTUVOVCA9ICdjb21tZW50JyxcbiAgICBNQVRURVJUQUcgPSAnbWF0dGVydGFnJ1xuICB9XG5cbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIGV4cG9ydCB0eXBlIEV4cGlyaW5nUmVzb3VyY2U8VD4gPSB7XG4gICAgZ2V0KCk6IFByb21pc2U8VD47XG4gICAgb25TdGFsZT86ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgdmFsaWRVbnRpbDogRGF0ZSB8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEdldCBjb2xvcnBsYW4gZGF0YSBVUkxzIGFuZCBtZXRhZGF0YS4gVGhlIG9wdGlvbmFsIHNpZCBoYXMgb25lIGNhdmVhdCwgaXQgYXNzdW1lcyB0aGF0IHRoZSBmbG9vciBjb3VudCBvZiB0aGUgb3RoZXIgc3BhY2UgaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgc3BhY2UuXG4gICAqIFNlZSBodHRwczovL21hdHRlcnBvcnQuYXRsYXNzaWFuLm5ldC9icm93c2UvSlNTREstMjE2MFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgeyBkYXRhLCBpbWFnZURhdGFVcmxzIH0gPSBhd2FpdCBtcFNkay5Bc3NldC5nZXRWckNvbG9ycGxhbnMoKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBzaWQgQW4gb3B0aW9uYWwgc3RyaW5nIHNwYWNlIHNpZC4gVXNlZCB0byBhY2Nlc3MgdGhlIGNvbG9ycGxhbnMgb2Ygb3RoZXIgc3BhY2VzLiBPbWl0dGluZyB0aGlzIHZhbHVlIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IHNwYWNlLlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAZXhwZXJpbWVudGFsXG4gICAqL1xuICBnZXRWckNvbG9ycGxhbnMoKTogUHJvbWlzZTxBc3NldC5WckNvbG9ycGxhbkRhdGE+O1xuICBnZXRWckNvbG9ycGxhbnMoc2lkOiBzdHJpbmcpOiBQcm9taXNlPEFzc2V0LlZyQ29sb3JwbGFuRGF0YT47XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgdGV4dHVyZSB0byB1c2Ugd2l0aCBzdWJzZXF1ZW50IGNhbGxzIGxpa2UgW1tUYWcuZWRpdEljb25dXS5cbiAgICpcbiAgICogKipOb3RlKio6IEl0IGlzIHJlY29tbWVuZGVkIHRvIGhvc3QgeW91ciBvd24gaW1hZ2VzIHRvIG1pdGlnYXRlIGNyb3NzIG9yaWdpbiBsaW1pdGF0aW9ucy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkFzc2V0LnJlZ2lzdGVyVGV4dHVyZSgnY3VzdG9tVGV4dHVyZUlkJywgJ2h0dHBzOi8vW2xpbmsudG8vaW1hZ2VdJyk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaWQgQSB1c2VyIHNwZWNpZmllZCBzdHJpbmcgdG8gdXNlIGFzIGEgbG9va3VwIG9mIHRoaXMgdGV4dHVyZVxuICAgKiBAcGFyYW0gaWNvblNyYyBUaGUgc3JjIG9mIHRoZSBpY29uLCBsaWtlIHRoZSBzcmMgb2YgYW4gXFw8aW1nPlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgIHJlZ2lzdGVyVGV4dHVyZShpZDogc3RyaW5nLCBpY29uU3JjOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGFzc2V0IGJ5IHNwZWNpZmllZCBJRC4gVGhyb3dzIGFuIGVycm9yIGlmIG5vXG4gICAqIGFzc2V0IHdpdGggdGhlIGRlc2lyZWQgSUQgZXhpc3RzLlxuICAgKiBgYGBcbiAgICogbXBTZGsuQXNzZXQuZ2V0QXNzZXRCeUlkKCd5b3VyLWFzc2V0LWlkJylcbiAgICogICAudGhlbihhc3luYyBmdW5jdGlvbihhc3NldCl7XG4gICAqICAgICBjb25zb2xlLmxvZygnQXNzZXQgVVJMIGlzJywgYXdhaXQgYXNzZXQudXJsLmdldCgpKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZGVzaXJlZCBhc3NldC5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgIGdldEFzc2V0QnlJZChpZDogc3RyaW5nKTogUHJvbWlzZTxBc3NldC5JQXR0YWNobWVudD47XG5cbiAgIC8qKlxuICAgICogUmVmcmVzaCBhc3NldHMgZnJvbSBzZXJ2ZXIsIGVuc3VyaW5nIHRoYXQgYWxsIGF0dGFjaG1lbnRzIGFyZSB1cCB0byBkYXRlLlxuICAgICpcbiAgICAqIEBoaWRkZW5cbiAgICAqIEBpbnRlcm5hbFxuICAgICogQGV4cGVyaW1lbnRhbFxuICAgICovXG4gICByZWZyZXNoQXNzZXRzKCk6IFByb21pc2U8dm9pZD47XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1vZGUgfSBmcm9tICcuL21vZGUnO1xuaW1wb3J0IHR5cGUgeyBWZWN0b3IzLCBWZWN0b3IyLCBJT2JzZXJ2YWJsZSwgUm90YXRpb24gfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2FtZXJhIHtcbiAgZXhwb3J0IHR5cGUgUG9zZSA9IHtcbiAgICBwb3NpdGlvbjogVmVjdG9yMztcbiAgICByb3RhdGlvbjogVmVjdG9yMjtcbiAgICBwcm9qZWN0aW9uOiBGbG9hdDMyQXJyYXk7XG4gICAgc3dlZXA6IHN0cmluZztcbiAgICBtb2RlOiBNb2RlLk1vZGU7XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gRXZlbnQge1xuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBNT1ZFID0gJ2NhbWVyYS5tb3ZlJyxcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIERpcmVjdGlvbiB7XG4gICAgRk9SV0FSRCA9ICdGT1JXQVJEJyxcbiAgICBMRUZUID0gJ0xFRlQnLFxuICAgIFJJR0hUID0gJ1JJR0hUJyxcbiAgICBCQUNLID0gJ0JBQ0snLFxuICAgIFVQID0gJ1VQJyxcbiAgICBET1dOID0gJ0RPV04nLFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgUm90YXRlT3B0aW9ucyA9IHtcbiAgICAvKipcbiAgICAgKiBSb3RhdGlvbiBzcGVlZCBpbiBkZWdyZWVzIHBlciBzZWNvbmQuXG4gICAgICovXG4gICAgc3BlZWQ/OiBudW1iZXI7XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgWm9vbURhdGEgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgem9vbSBsZXZlbFxuICAgICAqL1xuICAgIGxldmVsOiBudW1iZXI7XG4gIH07XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW1lcmEge1xuICBFdmVudDogdHlwZW9mIENhbWVyYS5FdmVudDtcbiAgRGlyZWN0aW9uOiB0eXBlb2YgQ2FtZXJhLkRpcmVjdGlvbjtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgY2FtZXJhLlxuICAgKiBgYGBcbiAgICogbXBTZGsuQ2FtZXJhLmdldFBvc2UoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKHBvc2Upe1xuICAgKiAgICAgY29uc29sZS5sb2coJ0N1cnJlbnQgcG9zaXRpb24gaXMgJywgcG9zZS5wb3NpdGlvbik7XG4gICAqICAgICBjb25zb2xlLmxvZygnUm90YXRpb24gYW5nbGUgaXMgJywgcG9zZS5yb3RhdGlvbik7XG4gICAqICAgICBjb25zb2xlLmxvZygnU3dlZXAgVVVJRCBpcyAnLCBwb3NlLnN3ZWVwKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdWaWV3IG1vZGUgaXMgJywgcG9zZS5tb2RlKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY2FtZXJhLlxuICAgKiBAZGVwcmVjYXRlZCBZb3UgY2FuIHVzZSB0aGUgW1twb3NlXV0gb2JzZXJ2YWJsZSBwcm9wZXJ0eSBpbnN0ZWFkLlxuICAgKi9cbiAgZ2V0UG9zZSgpOiBQcm9taXNlPENhbWVyYS5Qb3NlPjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBwb3NlIGRhdGEgb2JqZWN0IHRoYXQgY2FuIGJlIHN1YnNjcmliZWQgdG8uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEucG9zZS5zdWJzY3JpYmUoZnVuY3Rpb24gKHBvc2UpIHtcbiAgICogICAvLyBDaGFuZ2VzIHRvIHRoZSBDYW1lcmEgcG9zZSBoYXZlIG9jY3VycmVkLlxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHBvc2l0aW9uIGlzICcsIHBvc2UucG9zaXRpb24pO1xuICAgKiAgIGNvbnNvbGUubG9nKCdSb3RhdGlvbiBhbmdsZSBpcyAnLCBwb3NlLnJvdGF0aW9uKTtcbiAgICogICBjb25zb2xlLmxvZygnU3dlZXAgVVVJRCBpcyAnLCBwb3NlLnN3ZWVwKTtcbiAgICogICBjb25zb2xlLmxvZygnVmlldyBtb2RlIGlzICcsIHBvc2UubW9kZSk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHBvc2U6IElPYnNlcnZhYmxlPENhbWVyYS5Qb3NlPjtcblxuICAvKipcbiAgICogTW92ZXMgdXNlciB0byBhIGRpZmZlcmVudCBzd2VlcCByZWxhdGl2ZSB0byB0aGVpciBjdXJyZW50IGxvY2F0aW9uXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBuZXh0RGlyZWN0aW9uID0gbXBTZGsuQ2FtZXJhLkRpcmVjdGlvbi5GT1JXQVJEO1xuICAgKlxuICAgKiBtcFNkay5DYW1lcmEubW92ZUluRGlyZWN0aW9uKG5leHREaXJlY3Rpb24pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICogICAgIGNvbnNvbGUubG9nKCdUaGUgY2FtZXJhIGhhcyBtb3ZlZCBmb3J3YXJkLicpO1xuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKCl7XG4gICAqICAgICBjb25zb2xlLndhcm5pbmcoJ0FuIGVycm9yIG9jY3VyZWQgd2hpbGUgbW92aW5nIGluIHRoYXQgZGlyZWN0aW9uLicpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uLlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYSBzd2VlcCBoYXMgYmVlbiByZWFjaGVkLlxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqXG4gICAqICogRmFpbHMgaWYgZGlyZWN0aW9uIGlzIG5vdCBvbmUgb2YgdGhlIGFib3ZlIG9wdGlvbnMuXG4gICAqICogV2FybnMgaWYgeW91IGNhbuKAmXQgbW92ZSBpbiB0aGF0IGRpcmVjdGlvbiAoaGl0IGEgd2FsbCkuXG4gICAqXG4gICAqICoqTm90ZXMqKlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBzYW1lIGJlaGF2aW9yIGFzIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGFycm93IGtleXMgd2hpbGUgaW4gM0QgU2hvd2Nhc2UuXG4gICAqXG4gICAqICogQ2FtZXJhLkRpcmVjdGlvbi5VUCBpcyBsaWtlIG1vdmluZyBmb3J3YXJkc1xuICAgKiAqIENhbWVyYS5EaXJlY3Rpb24uRE9XTiBpcyBsaWtlIG1vdmluZyBiYWNrd2FyZHNcbiAgICpcbiAgICogVGhpcyBhY3Rpb24gaXMgZm9yIG1vdmluZyBiZXR3ZWVuIHN3ZWVwcyB3aGlsZSBpbiBJbnNpZGUgVmlldy5cbiAgICovXG4gIG1vdmVJbkRpcmVjdGlvbihkaXJlY3Rpb246IENhbWVyYS5EaXJlY3Rpb24pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBQYW5zIHRoZSBjYW1lcmEuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEucGFuKHsgeDogMSwgejogMSB9KVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gUGFuIGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBQYW4gZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zLnggQWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHN3ZWVwIG9uIHRoZSB4IGF4aXMuXG4gICAqIEBwYXJhbSBwYXJhbXMueiBBYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgc3dlZXAgb24gdGhlIHogYXhpcy5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBwYW4gaXMgY29tcGxldGUuXG4gICAqXG4gICAqICoqRXJyb3JzKipcbiAgICpcbiAgICogKiBXYXJucyBpZiBwYW4gd2FzIHN1Y2Nlc3NmdWwgYnV0IHlvdSBoaXQgdGhlIG1vZGVsIGJvdW5kcy5cbiAgICogKiBGYWlscyBpZiB5b3UgYXJlIGFscmVhZHkgYXQgdGhlIG1vZGVsIGJvdW5kcyBhbmQgeW91IGNhbm5vdCBtb3ZlIGFueSBmdXJ0aGVyLlxuICAgKlxuICAgKiAqKk5vdGVzKipcbiAgICpcbiAgICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSBheGVzIGRlcGVuZHMgb24gdGhlIHN3ZWVwIHlvdSB3ZXJlIGluIGJlZm9yZSBlbnRlcmluZ1xuICAgKiBGbG9vcnBsYW4gYW5kIHRoZSBhc3BlY3QgcmF0aW8gb2Ygd2luZG93LlxuICAgKlxuICAgKiBPbmx5IGF2YWlsYWJsZSBpbiBEb2xsaG91c2Ugb3IgRmxvb3JwbGFuIFZpZXcuIFRoaXMgaXMgdGhlIHNhbWUgYmVoYXZpb3IgYXNcbiAgICogaWYgdGhlIHVzZXIgdXNlcyB0aGUga2V5Ym9hcmQgc2hvcnRjdXRzIFcsIEEsIFMsIGFuZCBEIG9yIHRoZSBhcnJvdyBrZXlzLlxuICAgKlxuICAgKiBVc2UgYG1wU2RrLkNhbWVyYS5wYW4oeyB4OiAwLCB6OiAwIH0pO2AgdG8gcmV0dXJuIHRvIGRpcmVjdGx5IGFib3ZlIHRoZVxuICAgKiB2ZXJ5IGZpcnN0IHN3ZWVwIHNjYW5uZWQuXG4gICAqL1xuICBwYW4ocGFyYW1zOiB7IHg6IG51bWJlciwgejogbnVtYmVyIH0pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSb3RhdGVzIHRoZSBjYW1lcmEgKHVzZXLigJlzIHZpZXdwb2ludCkuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEucm90YXRlKDEwLCAtMjAsIHsgc3BlZWQ6IDIgfSlcbiAgICogICAudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgIC8vIENhbWVyYSByb3RhdGlvbiBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gQ2FtZXJhIHJvdGF0aW9uIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHZlcnRpY2FsIEhvdyBtYW55IGRlZ3JlZXMgdG8gcm90YXRlIHVwIG9yIGRvd24uXG4gICAqIEBwYXJhbSBob3Jpem9udGFsIEhvdyBtYW55IGRlZ3JlZXMgdG8gcm90YXRlIGxlZnQgb3IgcmlnaHQuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcm90YXRpb24gaXMgY29tcGxldGUuXG4gICAqXG4gICAqICoqRXJyb3JzKipcbiAgICpcbiAgICogKiBXYXJucyB0byBjb25zb2xlIGlmIHlvdSByb3RhdGVkLCBidXQgdGhlbiB5b3UgaGl0IHRoZSB2ZXJ0aWNhbCBsaW1pdC5cbiAgICogKiBXYXJucyBpZiB0cnlpbmcgdG8gcm90YXRlIHVwIG9yIGRvd24gaW4gRmxvb3JwbGFuIFZpZXcuXG4gICAqICogRmFpbHMgaWYgbm8gbW92ZW1lbnQgYmVjYXVzZSB5b3UgYXJlIGFscmVhZHkgYXQgYSByb3RhdGlvbiBsaW1pdC5cbiAgICpcbiAgICogKipOb3RlcyoqXG4gICAqXG4gICAqIElmIHVzZXIgaXMgaW4gRG9sbGhvdXNlIG9yIEZsb29ycGxhbiBWaWV3LCB0aGUgZW50aXJlIE1hdHRlcnBvcnQgU3BhY2UgaXMgcm90YXRlZC5cbiAgICogKiBQb3NpdGl2ZSB2YWx1ZXMgZm9yIGhvcml6b250YWwgbWVhbnMgdGhlIFNwYWNlIHJvdGF0ZXMgY2xvY2t3aXNlLlxuICAgKiAqIE5lZ2F0aXZlIHZhbHVlcyBmb3IgaG9yaXpvbnRhbCBjb3VudGVyY2xvY2t3aXNlIHJvdGF0aW9ucy5cbiAgICogKiBJbiBEb2xsaG91c2UgdmlldywgdmVydGljYWwgcmFuZ2VzIGZyb20gMMKwIChob3Jpem9udGFsKSB0byA4MMKwIGFib3ZlIHRoZSBTcGFjZS5cbiAgICogKiBJbiBGbG9vcnBsYW4gdmlldywgdGhlIHZlcnRpY2FsIHZhbHVlIGlzIGlnbm9yZWQuXG4gICAqXG4gICAqIElmIHRoZSB1c2VyIGlzIGluIEluc2lkZSBWaWV3IG9yIDM2MMK6IFZpZXcsIHRoZWlyIHZpZXdwb2ludCBpcyByb3RhdGVkLlxuICAgKiAqIFBvc2l0aXZlIHZhbHVlcyBmb3IgaG9yaXpvbnRhbCBtZWFucyB0aGUgdXNlciByb3RhdGVzIGNsb2Nrd2lzZS5cbiAgICogKiBOZWdhdGl2ZSB2YWx1ZXMgZm9yIGhvcml6b250YWwgYXJlIGNvdW50ZXJjbG9ja3dpc2Ugcm90YXRpb25zLlxuICAgKiAqIFZlcnRpY2FsIHJhbmdlcyBmcm9tIC03MMKwIChkb3duKSB0byA3MMKwICh1cCkuXG4gICAqICogVGlsdGluZyB0aGUgdmlldyAoc2ltaWxhciB0byB0aWx0aW5nIG9uZeKAmXMgaGVhZCkgbm90IHN1cHBvcnRlZC5cbiAgICpcbiAgICogUm90YXRpb24gaXMgcmVsYXRpdmUgdG8gdGhlIHVzZXLigJlzIGN1cnJlbnQgdmlld3BvaW50LlxuICAgKiBUaGlzIGlzIHRoZSBzYW1lIGJlaGF2aW9yIGFzIGlmIHRoZSB1c2VyIHVzZXMgdGhlIGtleWJvYXJkIHNob3J0Y3V0cyBJLCBKLCBLLCBhbmQgTC5cbiAgICogU3BlZWRzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB6ZXJvIGFyZSBub3QgYWxsb3dlZC5cbiAgICovXG4gIHJvdGF0ZShob3Jpem9udGFsOiBudW1iZXIsIHZlcnRpY2FsOiBudW1iZXIsIG9wdGlvbnM/OiBDYW1lcmEuUm90YXRlT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBjYW1lcmEgKHVzZXLigJlzIHZpZXdwb2ludCkgd2hpbGUgaW4gUGFub3JhbWEgVmlldy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS5zZXRSb3RhdGlvbih7IHg6IDEwLCB5OiAtMjAgfSwgeyBzcGVlZDogMiB9KVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gQ2FtZXJhIHJvdGF0aW9uIGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBDYW1lcmEgcm90YXRpb24gZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcm90YXRpb24gVGhlIHRhcmdldCByb3RhdGlvblxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJvdGF0aW9uIGlzIGNvbXBsZXRlLlxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqICogRmFpbHMgaWYgdGhlIGN1cnJlbnQgdmlldyBtb2RlIGlzIG5vdCBQYW5vcmFtYSBWaWV3LlxuICAgKlxuICAgKiAqKk5vdGVzKipcbiAgICogKiBBIHRhcmdldCByb3RhdGlvbiBjYW4gYmUgcmV0cmlldmVkIGZyb20gW1tDYW1lcmEucG9zZV1dXG4gICAqICogUm90YXRpb24gaXMgYWJzb2x1dGUgc28gbXVsdGlwbGUgY2FsbHMgd2lsbCBub3QgZnVydGhlciBjaGFuZ2Ugb3JpZW50YXRpb24gKGZsb2F0aW5nIHBvaW50IGVycm9yIG5vdHdpdGhzdGFuZGluZykuXG4gICAqICogU3BlZWRzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB6ZXJvIGFyZSBub3QgYWxsb3dlZC5cbiAgICovXG4gIHNldFJvdGF0aW9uKHJvdGF0aW9uOiBSb3RhdGlvbiwgb3B0aW9ucz86IENhbWVyYS5Sb3RhdGVPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUm90YXRlcyB0aGUgY2FtZXJhIHRvIGEgc3BlY2lmaWMgc2NyZWVuIGNvb3JkaW5hdGUuXG4gICAqIENvb3JkaW5hdGVzIGFyZSBtZWFzdXJlIGluIHBpeGVscywgcmVsYXRpdmUgdG8gdGhlIFdlYkdMIENhbnZhcycgdG9wIGxlZnQgY29ybmVyLlxuICAgKiBTZWUgaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9ncmFwaGljcy9jYW52YXNfY29vcmRpbmF0ZXMuYXNwIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQ2FtZXJhLmxvb2tBdFNjcmVlbkNvb3Jkcyg1MDAsIDMyMClcbiAgICogICAudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgIC8vIENhbWVyYSByb3RhdGlvbiBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gQ2FtZXJhIHJvdGF0aW9uIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggSG9yaXpvbnRhbCBwb3NpdGlvbiwgaW4gcGl4ZWxzLiBTdGFydGluZyBmcm9tIHRoZSBjYW52YXMnIHRvcCBsZWZ0IGNvcm5lci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgVmVydGljYWwgcG9zaXRpb24sIGluIHBpeGVscy4gU3RhcnRpbmcgZnJvbSB0aGUgY2FudmFzJyB0b3AgbGVmdCBjb3JuZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSByb3RhdGlvbiBpcyBjb21wbGV0ZS5cbiAgICpcbiAgICogKipFcnJvcnMqKlxuICAgKiAqIEZhaWxzIGlmIHVzZWQgb3V0c2lkZSBvZiBJbnNpZGUgbW9kZS5cbiAgICogKiBXYXJucyB0byBjb25zb2xlIGlmIHlvdSByb3RhdGVkLCBidXQgdGhlbiB5b3UgaGl0IHRoZSB2ZXJ0aWNhbCBsaW1pdC5cbiAgICogKiBGYWlscyBpZiBubyBtb3ZlbWVudCBiZWNhdXNlIHlvdSBhcmUgYWxyZWFkeSBhdCBhIHJvdGF0aW9uIGxpbWl0LlxuICAgKi9cbiAgbG9va0F0U2NyZWVuQ29vcmRzKHg6IG51bWJlciwgeTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogWm9vbXMgdGhlIGNhbWVyYSB0byBhIHBlcmNlbnRhZ2Ugb2YgdGhlIGJhc2UgZmllbGQgb2Ygdmlldy5cbiAgICpcbiAgICogRXg6IERvdWJsaW5nIHRoZSB6b29tLCBoYWx2ZXMgdGhlIGZpZWxkIG9mIHZpZXcuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEuem9vbVRvKDIuMClcbiAgICogIC50aGVuKGZ1bmN0aW9uIChuZXdab29tKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdDYW1lcmEgem9vbWVkIHRvJywgbmV3Wm9vbSk7XG4gICAqICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB6b29tTGV2ZWxcbiAgICpcbiAgICogKipFcnJvcnMqKlxuICAgKiAqIEZhaWxzIGlmIHRoZSBjdXJyZW50IG1vZGUgaXMgbm90IEluc2lkZSBtb2RlLlxuICAgKiAqIFdhcm5zIHRvIGNvbnNvbGUgaWYgdGhlIHpvb20gbGV2ZWwgaXMgb3V0c2lkZSBvZiB0aGUgem9vbSByYW5nZSBzdXBwb3J0ZWQuXG4gICAqL1xuICB6b29tVG8oem9vbUxldmVsOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj47XG5cbiAgLyoqXG4gICAqIFpvb21zIHRoZSBjYW1lcmEgYnkgYSBwZXJjZW50YWdlLiBUaGUgem9vbSBkZWx0YSBpcyBkZWZpbmVkIHJlbGF0aXZlIHRvIHRoZSBiYXNlIGZpZWxkIG9mIHZpZXcsIG5vdCB0aGUgY3VycmVudCB6b29tLlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgdGhlIGRlbHRhIGlzIHN0cmljdGx5IGFkZGVkLCBhbmQgbm90IG11bHRpcGxpZWQgYnkgdGhlIGN1cnJlbnQgem9vbSBmaXJzdC5cbiAgICpcbiAgICpcbiAgICogRXg6IElmIGF0IHpvb20gMi4wLCB6b29taW5nIGJ5IGFub3RoZXIgMC4xeCB3aWxsIGJyaW5nIHRoZSBjYW1lcmEgdG8gMi4xeCAoMi4wICsgMC4xKSBub3QgMi4yeCAoMi4wICsgMi4wICogMC4xKVxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQ2FtZXJhLnpvb21CeSgwLjEpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24gKG5ld1pvb20pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdDYW1lcmEgem9vbWVkIHRvJywgbmV3Wm9vbSk7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gem9vbURlbHRhXG4gICAqXG4gICAqICoqRXJyb3JzKipcbiAgICogKiBGYWlscyBpZiB0aGUgY3VycmVudCBtb2RlIGlzIG5vdCBJbnNpZGUgbW9kZS5cbiAgICogKiBXYXJucyB0byBjb25zb2xlIGlmIHRoZSB6b29tIGxldmVsIHdvdWxkIGJlIG91dHNpZGUgb2YgdGhlIHpvb20gcmFuZ2Ugc3VwcG9ydGVkLlxuICAgKi9cbiAgem9vbUJ5KHpvb21EZWx0YTogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+O1xuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgem9vbSBvZiB0aGUgY2FtZXJhIGJhY2sgdG8gMS4weC5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS56b29tUmVzZXQoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdDYW1lcmEgem9vbSBoYXMgYmVlbiByZXNldCcpO1xuICAgKiAgIH0pXG4gICAqIGBgYFxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqICogRmFpbHMgaWYgdGhlIGN1cnJlbnQgbW9kZSBpcyBub3QgSW5zaWRlIG1vZGUuXG4gICAqL1xuICB6b29tUmVzZXQoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSB6b29tIGxldmVsIG9mIHRoZSBjYW1lcmEgaW4gUGFub3JhbWEgbW9kZS5cbiAgICogVGhlIHpvb20gbGV2ZWwgd2lsbCBiZSAxLjAgZm9yIGFsbCBvdGhlciB2aWV3bW9kZXMuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEuem9vbS5zdWJzY3JpYmUoZnVuY3Rpb24gKHpvb20pIHtcbiAgICogICAvLyB0aGUgem9vbSBsZXZlbCBoYXMgY2hhbmdlZFxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHpvb20gaXMgJywgem9vbS5sZXZlbCk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHpvb206IElPYnNlcnZhYmxlPENhbWVyYS5ab29tRGF0YT47XG59XG4iLCJpbXBvcnQgdHlwZSB7IElPYnNlcnZhYmxlTWFwLCBJT2JzZXJ2YWJsZSwgRGljdGlvbmFyeSB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBGbG9vciB7XG4gIGV4cG9ydCB0eXBlIEZsb29ycyA9IHtcbiAgICBjdXJyZW50Rmxvb3I6IG51bWJlcjtcbiAgICBmbG9vck5hbWVzOiBzdHJpbmdbXTtcbiAgICB0b3RhbEZsb29yczogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEZsb29yRGF0YSA9IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIE9ic2VydmFibGVGbG9vckRhdGEgPSB7XG4gICAgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBzZXF1ZW5jZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIG5hbWU6IHN0cmluZztcbiAgfTtcblxuICBleHBvcnQgZW51bSBFdmVudCB7XG4gICAgLyoqIEBldmVudCAqL1xuICAgIENIQU5HRV9TVEFSVCA9ICdmbG9vcnMuY2hhbmdlc3RhcnQnLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBDSEFOR0VfRU5EICAgPSAnZmxvb3JzLmNoYW5nZWVuZCcsXG4gIH1cbiAgZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIENvbnZlcnNpb24ge1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgbWFwIGJldHdlZW4gdjIgSURzIGFuZCB2MSBJRHNcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgaGVscCB3aXRoIG1pZ3JhdGlvbiBiZXR3ZWVuIElEcyB1c2VkIGZvciBmbG9vcnMuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBtYXBwaW5nID0gYXdhaXQgbXBTZGsuRmxvb3IuQ29udmVyc2lvbi5jcmVhdGVJZE1hcCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGludmVydD86IGJvb2xlYW4gLSBpZiBwYXNzZWQsIHJldHVybiBtYXAgb2YgdjEtPnYyIGluc3RlYWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJZE1hcChpbnZlcnQ/OiBib29sZWFuKTogUHJvbWlzZTxEaWN0aW9uYXJ5PHN0cmluZz4+O1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxvb3Ige1xuICBFdmVudDogdHlwZW9mIEZsb29yLkV2ZW50O1xuICBDb252ZXJzaW9uOiB0eXBlb2YgRmxvb3IuQ29udmVyc2lvbjtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBzdGF0ZSBvZiBhbGwgZmxvb3JzLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuRmxvb3IuZ2V0RGF0YSgpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oZmxvb3JzKSB7XG4gICAqICAgICAvLyBGbG9vciBkYXRhIHJldHJlaXZhbCBjb21wbGV0ZS5cbiAgICogICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IGZsb29yOiAnICsgZmxvb3JzLmN1cnJlbnRGbG9vcik7XG4gICAqICAgICBjb25zb2xlLmxvZygnVG90YWwgZmxvb3M6ICcgKyBmbG9vcnMudG90YWxGbG9vcnMpO1xuICAgKiAgICAgY29uc29sZS5sb2coJ05hbWUgb2YgZmlyc3QgZmxvb3I6ICcgKyBmbG9vcnMuZmxvb3JOYW1lc1swXSk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIEZsb29ycyBkYXRhIHJldHJpZXZhbCBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgb2JzZXJ2YWJsZSBbW2RhdGFdXSBjb2xsZWN0aW9uIGluc3RlYWRcbiAgICovXG4gIGdldERhdGEoKTogUHJvbWlzZTxGbG9vci5GbG9vcnM+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gb2YgRmxvb3IgZGF0YSB0aGF0IGNhbiBiZSBzdWJzY3JpYmVkIHRvLlxuICAgKlxuICAgKiBTZWUgW1tJT2JzZXJ2YWJsZU1hcF1dIHRvIGxlYXJuIGhvdyB0byByZWNlaXZlIGRhdGEgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkZsb29yLmRhdGEuc3Vic2NyaWJlKHtcbiAgICogICBvbkNvbGxlY3Rpb25VcGRhdGVkOiBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0NvbGxlY3Rpb24gcmVjZWl2ZWQuIFRoZXJlIGFyZSAnLCBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKS5sZW5ndGgsICdmbG9vcnMgaW4gdGhlIGNvbGxlY3Rpb24nKTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGRhdGE6IElPYnNlcnZhYmxlTWFwPEZsb29yLkZsb29yRGF0YT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgZm9yIHRoZSBwbGF5ZXIncyBjdXJyZW50bHkgYWN0aXZlIGZsb29yLlxuICAgKlxuICAgKiBUaGUgY3VycmVudCBmbG9vciBjYW4gdGVsbCB5b3Ugd2hlbiBcImFsbCBmbG9vcnNcIiBhcmUgdmlzaWJsZSBhbmQgZW5jb2RlcyB3aGVuIHRoZSBjYW1lcmEgaXMgdHJhbnNpdGlvbmluZyBiZXR3ZWVuIGZsb29ycy5cbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyB0YWJsZSBzaG93cyBhbGwgNCBzdGF0ZXMgb2YgdGhlIGN1cnJlbnQgZmxvb3Igb2JzZXJ2YWJsZVxuICAgKiAoSU5TSURFOiBpbnNpZGUgbW9kZSwgREg6IGRvbGxob3VzZSBtb2RlLCBGUDogZmxvb3JwbGFuIG1vZGUpLlxuICAgKlxuICAgKiB8ICAgICAgICAgIHwgYXQgc3dlZXAgKElOU0lERSkgb3IgZmxvb3IgKERILCBGUCkgfCBhbGwgZmxvb3JzIChESCwgRlApIHwgdHJhbnNpdGlvbmluZyB8IGluIHVucGxhY2VkIDM2MMK6IHZpZXcgfFxuICAgKiB8LS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8IGlkICAgICAgIHwgYCR7Y3VycmVudC5pZH1gICAgICAgICAgICAgICAgICAgICAgfCAnJyAgICAgICAgICAgICAgICAgIHwgJycgICAgICAgICAgICB8IHVuZGVmaW5lZCAgICAgICAgICAgICAgfFxuICAgKiB8IHNlcXVlbmNlIHwgYCR7Y3VycmVudC5zZXF1ZW5jZX1gICAgICAgICAgICAgICAgfCAtMSAgICAgICAgICAgICAgICAgIHwgdW5kZWZpbmVkICAgICB8IHVuZGVmaW5lZCAgICAgICAgICAgICAgfFxuICAgKiB8IG5hbWUgICAgIHwgYCR7Y3VycmVudC5uYW1lfWAgICAgICAgICAgICAgICAgICAgfCAnYWxsJyAgICAgICAgICAgICAgIHwgJycgICAgICAgICAgICB8ICcnICAgICAgICAgICAgICAgICAgICAgfFxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuRmxvb3IuY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRGbG9vcikge1xuICAgKiAgIC8vIENoYW5nZSB0byB0aGUgY3VycmVudCBmbG9vciBoYXMgb2NjdXJyZWQuXG4gICAqICAgaWYgKGN1cnJlbnRGbG9vci5zZXF1ZW5jZSA9PT0gLTEpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdDdXJyZW50bHkgdmlld2luZyBhbGwgZmxvb3JzJyk7XG4gICAqICAgfSBlbHNlIGlmIChjdXJyZW50Rmxvb3Iuc2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgKiAgICAgaWYgKGN1cnJlbnRGbG9vci5pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHZpZXdpbmcgYW4gdW5wbGFjZWQgdW5hbGlnbmVkIHN3ZWVwJyk7XG4gICAqICAgICB9IGVsc2Uge1xuICAgKiAgICAgICBjb25zb2xlLmxvZygnQ3VycmVudGx5IHRyYW5zaXRpb25pbmcgYmV0d2VlbiBmbG9vcnMnKTtcbiAgICogICAgIH1cbiAgICogICB9IGVsc2Uge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0N1cnJlbnRseSBvbiBmbG9vcicsIGN1cnJlbnRGbG9vci5pZCk7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBmbG9vclxcJ3Mgc2VxdWVuY2UgaW5kZXgnLCBjdXJyZW50Rmxvb3Iuc2VxdWVuY2UpO1xuICAgKiAgICAgY29uc29sZS5sb2coJ0N1cnJlbnQgZmxvb3JcXCdzIG5hbWUnLCBjdXJyZW50Rmxvb3IubmFtZSlcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGN1cnJlbnQ6IElPYnNlcnZhYmxlPEZsb29yLk9ic2VydmFibGVGbG9vckRhdGE+O1xuXG4gIC8qKlxuICAgKiBXaGVuIGluIGluc2lkZSBtb2RlLCB0aGlzIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIGFjdGl2ZSBmbG9vciwgYW5kIG1vdmVzIHRoZSBjYW1lcmEgdG8gdGhlIG5lYXJlc3QgcG9zaXRpb24gb24gdGhhdCBmbG9vci5cbiAgICogV2hlbiBpbiBmbG9vcnBsYW4vZG9sbGhvdXNlIG1vZGUsIHRoaXMgZnVuY3Rpb24gY2hhbmdlcyB0aGUgYWN0aXZlIGZsb29yLCBidXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjYW1lcmFcbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkZsb29yLm1vdmVUbygyKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKGZsb29ySW5kZXgpIHtcbiAgICogICAgIC8vIE1vdmUgdG8gZmxvb3IgY29tcGxldGUuXG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBmbG9vcjogJyArIGZsb29ySW5kZXgpO1xuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBFcnJvciBtb3ZpbmcgdG8gZmxvb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaW5kZXg6IFRoZSBkZXN0aW5hdGlvbiBmbG9vciBpbmRleFxuICAgKiBAcmV0dXJuIFRoZSBkZXN0aW5hdGlvbiBmbG9vciBpbmRleC5cbiAgICovXG4gIG1vdmVUbyhpbmRleDogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGRpc3BsYXlzIGFsbCBmbG9vcnMuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5GbG9vci5zaG93QWxsKClcbiAgICogICAudGhlbihmdW5jdGlvbigpe1xuICAgKiAgICAgLy8gU2hvdyBmbG9vcnMgY29tcGxldGUuXG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIEVycm9yIGRpc3BsYXlpbmcgYWxsIGZsb29ycy5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuICBzaG93QWxsKCk6IFByb21pc2U8dm9pZD47XG59XG4iLCJpbXBvcnQgdHlwZSB7IElPYnNlcnZhYmxlTWFwLCBJT2JzZXJ2ZXIsIElTdWJzY3JpcHRpb24sIE9ic2VydmVyQ2FsbGJhY2sgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgR3JhcGgge1xuICAvKipcbiAgICogQSBkZXNjcmlwdG9yIGZvciBhIGdyYXBoIHZlcnRleC4gVXNlZCB3aGVuIGFkZGluZyB2ZXJ0aWNlcyB0byBhIGdyYXBoLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVmVydGV4RGVzY3JpcHRvcjxUPiA9IHtcbiAgICAvKiogVGhlIGlkIHRoYXQgY2FuIGJlIHVzZWQgdG8gbG9va3VwIHRoaXMgdmVydGV4IGluIHRoZSBncmFwaCAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqIEFueSB1c2VyIGRhdGEgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdmVydGV4ICovXG4gICAgZGF0YTogVDtcbiAgfTtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdG9yIGZvciBhIGdyYXBoIHZlcnRleCB3aGVuIG5vIGV4dHJhIGRhdGEgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggZWFjaCB2ZXJ0ZXguIFVzZWQgd2hlbiBhZGRpbmcgdmVydGljZXMgdG8gYSBncmFwaC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIFZlcnRleElkRGVzY3JpcHRvciA9IHtcbiAgICAvKiogVGhlIGlkIHRoYXQgY2FuIGJlIHVzZWQgdG8gbG9va3VwIHRoaXMgdmVydGV4IGluIHRoZSBncmFwaCAqL1xuICAgIGlkOiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgZGVzY3JpcHRvciBmb3IgYSBncmFwaCBlZGdlLiBVc2VkIHdoZW4gYWRkaW5nIGVkZ2VzIHRvIGEgZ3JhcGguXG4gICAqL1xuICBleHBvcnQgdHlwZSBFZGdlRGVzY3JpcHRvcjxUPiA9IHtcbiAgICAvKiogVGhlIHNvdXJjZSB2ZXJ0ZXguICovXG4gICAgc3JjOiBWZXJ0ZXg8VD47XG4gICAgLyoqIFRoZSBkZXN0aW5hdGlvbiB2ZXJ0ZXguICovXG4gICAgZHN0OiBWZXJ0ZXg8VD47XG4gICAgLyoqIFRoZSB3ZWlnaHQgb2YgdGhlIGVkZ2UuICovXG4gICAgd2VpZ2h0PzogbnVtYmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIG5vZGUgaW4gdGhlIGdyYXBoLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVmVydGV4PFQ+ID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0ZXgncyBpZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVXNlciBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgdmVydGV4LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGE6IFQ7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpdGVyYWJsZSBvZiBhbGwgZWRnZXMgdGhhdCBoYXZlIHRoaXMgdmVydGV4IGFzIGl0cyBkZXN0aW5hdGlvbiBlbmRwb2ludC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB2ZXJ0ZXggPSBncmFwaC52ZXJ0ZXgoJ2EnKTtcbiAgICAgKiBmb3IgKGNvbnN0IGVkZ2VJbiBvZiB2ZXJ0ZXguZWRnZXNJbikge1xuICAgICAqICAgY29uc29sZS5sb2coYHZlcnRleCBcIiR7ZWRnZUluLmRzdC5pZH1cIiBoYXMgYW4gZWRnZSBjb21pbmcgaW4gZnJvbSBhIHZlcnRleCBcIiR7ZWRnZUluLnNyYy5pZH1cImApO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWFkb25seSBlZGdlc0luOiBJdGVyYWJsZUl0ZXJhdG9yPEVkZ2U8VD4+O1xuXG4gICAgLyoqXG4gICAgICogQW4gaXRlcmFibGUgb2YgYWxsIGVkZ2VzIHRoYXQgaGF2ZSB0aGlzIHZlcnRleCBhcyBpdHMgc291cmNlIGVuZHBvaW50LlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHZlcnRleCA9IGdyYXBoLnZlcnRleCgnYScpO1xuICAgICAqIGZvciAoY29uc3QgZWRnZU91dCBvZiB2ZXJ0ZXguZWRnZXNPdXQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGB2ZXJ0ZXggXCIke2VkZ2VPdXQuc3JjLmlkfVwiIGhhcyBhbiBlZGdlIGdvaW5nIHRvIGEgdmVydGV4IFwiJHtlZGdlT3V0LmRzdC5pZH1cImApO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWFkb25seSBlZGdlc091dDogSXRlcmFibGVJdGVyYXRvcjxFZGdlPFQ+PjtcblxuICAgIC8qKlxuICAgICAqIEFuIGl0ZXJhYmxlIG9mIGFsbCB2ZXJ0aWNlcyB0aGF0IGNhbiBiZSB0cmF2ZXJzZWQgdG8gZnJvbSB0aGlzIHZlcnRleC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB2ZXJ0ZXggPSBncmFwaC52ZXJ0ZXgoJ2EnKTtcbiAgICAgKiBmb3IgKGNvbnN0IG5laWdoYm9yIG9mIHZlcnRleC5uZWlnaGJvcnMpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGB2ZXJ0ZXggXCIke3ZlcnRleC5pZH1cIiBzaGFyZXMgYW4gZWRnZSB3aXRoIFwiJHtuZWlnaGJvci5pZH1cIik7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5laWdoYm9yczogSXRlcmFibGVJdGVyYXRvcjxWZXJ0ZXg8VD4+O1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIHdlaWdodGVkLCBkaXJlY3RlZCBjb25uZWN0aW9uIGJldHdlZW4gdHdvIHZlcnRpY2VzLlxuICAgKlxuICAgKiBAdGVtcGxhdGUgVCBUaGUgdHlwZSBvZiBhbnkgdXNlciBkYXRhIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHZlcnRleCBpbiB0aGUgZ3JhcGguXG4gICAqL1xuICBleHBvcnQgdHlwZSBFZGdlPFQ+ID0ge1xuICAgIC8qKiBUaGUgdmVydGV4IGF0IHRoZSBzb3VyY2Ugb2YgdGhpcyBlZGdlLiAqL1xuICAgIHJlYWRvbmx5IHNyYzogVmVydGV4PFQ+O1xuICAgIC8qKiBUaGUgdmVydGV4IGF0IHRoZSBkZXN0aW5hdGlvbiBvZiB0aGlzIGVkZ2UuICovXG4gICAgcmVhZG9ubHkgZHN0OiBWZXJ0ZXg8VD47XG4gICAgLyoqIFRoZSB3ZWlnaHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZWRnZS4gKi9cbiAgICByZWFkb25seSB3ZWlnaHQ6IG51bWJlcjtcbiAgfTtcblxuICAvKipcbiAgICogQSBkaXJlY3RlZCwgd2VpZ2h0ZWQgZ3JhcGggZGF0YSBzdHJ1Y3R1cmUuXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBUIFRoZSB0eXBlIG9mIGFueSB1c2VyIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGVhY2ggdmVydGV4IGluIHRoZSBncmFwaC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSURpcmVjdGVkR3JhcGg8VD4ge1xuICAgIC8qKlxuICAgICAqIFdhdGNoIGEgY29sbGVjdGlvbiBhbmQgdXBkYXRlIHRoZSBncmFwaCBhcyB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHlvdSBuZWVkIGEgZ3JhcGggb2YgZW5hYmxlZCBzd2VlcHMsIHVzZSBbW1N3ZWVwLmNyZWF0ZUdyYXBoXV0gaW5zdGVhZCBvZiB0aGUgY29kZSBzbmlwcGV0IGJlbG93XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAvLyBjcmVhdGUgYSBncmFwaCBvZiBlbmFibGVkIHN3ZWVwc1xuICAgICAqIGNvbnN0IGdyYXBoID0gbXBTZGsuY3JlYXRlR3JhcGgoKTtcbiAgICAgKiBjb25zdCBzdWIgPSBncmFwaC53YXRjaCh7XG4gICAgICogICBjb2xsZWN0aW9uOiBtcFNkay5Td2VlcC5jb2xsZWN0aW9uLFxuICAgICAqICAgaXNOZWlnaGJvck9mKHN3ZWVwU3JjLCBzd2VlcERzdCkge1xuICAgICAqICAgICByZXR1cm4gc3dlZXBTcmMuZGF0YS5uZWlnaGJvcnMuaW5jbHVkZXMoc3dlZXBEc3QuaWQpO1xuICAgICAqICAgfSxcbiAgICAgKiAgIG5laWdoYm9yc09mKHN3ZWVwVmVydGV4KSB7XG4gICAgICogICAgIHJldHVybiBzd2VlcFZlcnRleC5kYXRhLm5laWdoYm9ycy52YWx1ZXMoKTtcbiAgICAgKiAgIH0sXG4gICAgICogICB3ZWlnaHRCZXR3ZWVuKHN3ZWVwU3JjLCBzd2VlcERzdCkge1xuICAgICAqICAgICBjb25zdCBkeCA9IHN3ZWVwRHN0LmRhdGEucG9zaXRpb24ueCAtIHN3ZWVwU3JjLmRhdGEucG9zaXRpb24ueDtcbiAgICAgKiAgICAgY29uc3QgZHkgPSBzd2VlcERzdC5kYXRhLnBvc2l0aW9uLnkgLSBzd2VlcFNyYy5kYXRhLnBvc2l0aW9uLnk7XG4gICAgICogICAgIGNvbnN0IGR6ID0gc3dlZXBEc3QuZGF0YS5wb3NpdGlvbi56IC0gc3dlZXBTcmMuZGF0YS5wb3NpdGlvbi56O1xuICAgICAqICAgICByZXR1cm4gTWF0aC5zcXJ0KGR4ICoqIDIgKyBkeSAqKiAyICsgZHogKiogMik7XG4gICAgICogICB9LFxuICAgICAqICAgc2hvdWxkQWRkKHN3ZWVwKSB7XG4gICAgICogICAgIHJldHVybiBzd2VlcC5lbmFibGVkO1xuICAgICAqICAgfSxcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIHNvbWUgdGltZSBsYXRlciB3aGVuIHRoZSBncmFwaCBubyBsb25nZXIgbmVlZHMgdXBkYXRpbmdcbiAgICAgKiBzdWIuY2FuY2VsKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25BZGFwdG9yXG4gICAgICogQHJldHVybnMgSVN1YnNjcmlwdGlvblxuICAgICAqL1xuICAgIHdhdGNoKGNvbGxlY3Rpb25BZGFwdG9yOiBJQ29sbGVjdGlvbkFkYXB0b3I8VD4pOiBJU3Vic2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgdmVydGV4IG9yIHNldCBvZiB2ZXJ0aWNlcyB0byB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogLy8gZm9yIHZlcnRpY2VzIHdpdGggdW5kZWZpbmVkIFwiZGF0YVwiIChubyBkYXRhIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHZlcnRleClcbiAgICAgKiBjb25zdCB1bmRlZkdyYXBoID0gbXBTZGsuR3JhcGguY3JlYXRlRGlyZWN0ZWRHcmFwaDx1bmRlZmluZWQ+KCk7XG4gICAgICogZ3JhcGguYWRkVmVydGV4KFxuICAgICAqICAgeyBpZDogJ2EnIH0sXG4gICAgICogICB7IGlkOiAnYicgfSxcbiAgICAgKiApO1xuICAgICAqXG4gICAgICogLy8gZm9yIHZlcnRpY2VzIHdpdGggYW55IG90aGVyIGRhdGFcbiAgICAgKiBjb25zdCBncmFwaCA9IG1wU2RrLkdyYXBoLmNyZWF0ZURpcmVjdGVkR3JhcGg8bnVtYmVyPigpO1xuICAgICAqIGdyYXBoLmFkZFZlcnRleChcbiAgICAgKiAgIHsgaWQ6ICdhJywgZGF0YTogMSB9LFxuICAgICAqICAgeyBpZDogJ2InLCBkYXRhOiAyIH0sXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmVydGV4RGF0YSBBIHZhcmlhYmxlIG51bWJlciBvZiBbW1ZlcnRleERlc2NyaXB0b3JdXXMgdG8gdXNlIHRvIGNyZWF0ZSBub2RlcyBpbiB0aGUgZ3JhcGguXG4gICAgICovXG4gICAgYWRkVmVydGV4KC4uLnZlcnRleERhdGE6IFQgZXh0ZW5kcyB1bmRlZmluZWQgfCB2b2lkID8gVmVydGV4SWREZXNjcmlwdG9yW10gOiBBcnJheTxWZXJ0ZXhEZXNjcmlwdG9yPFQ+Pik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGEgdmVydGV4IGFzc29jaWF0ZWQgd2l0aCBgaWRgIGlzIHByZXNlbnQgaW4gdGhlIGdyYXBoLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGlmIChncmFwaC5oYXNWZXJ0ZXgoJ2EnKSkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2EgdmVydGV4IHdpdGggaWQgXCJhXCIgd2FzIGZvdW5kJyk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpZCBUaGUgdmVydGV4J3MgaWQuXG4gICAgICogQHJldHVybnMgSWYgYSB2ZXJ0ZXggd2l0aCBgaWRgIGV4aXN0cywgcmV0dXJucyBgdHJ1ZWAuIE90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBoYXNWZXJ0ZXgoaWQ6IHN0cmluZyk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZlcnRleCBhc3NvY2lhdGVkIHdpdGggYGlkYC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhID0gZ3JhcGgudmVydGV4KCdhJyk7XG4gICAgICogaWYgKGEpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBGb3VuZCBhIHZlcnRleCB3aXRoIGlkIFwiJHthLmlkfVwiYCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpZCBUaGUgdmVydGV4J3MgaWQuXG4gICAgICogQHJldHVybnMgSWYgYSB2ZXJ0ZXggd2l0aCBgaWRgIGV4aXN0cywgcmV0dXJucyB0aGUgYFZlcnRleGAuIE90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgdmVydGV4KGlkOiBzdHJpbmcpOiBWZXJ0ZXg8VD4gfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSB2ZXJ0ZXggb3IgYSBzZXQgb2YgdmVydGljZXMgZnJvbSB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JhcGgucmVtb3ZlVmVydGV4KGEsIGIpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB2ZXJ0aWNlcyBBIHZhcmlhYmxlIG51bWJlciBvZiB2ZXJ0aWNlcyB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlVmVydGV4KC4uLnZlcnRpY2VzOiBBcnJheTxWZXJ0ZXg8VD4+KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEFuIGl0ZXJhYmxlIG9mIGFsbCB2ZXJ0aWNlcyBpbiB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZm9yIChjb25zdCB2ZXJ0ZXggb2YgZ3JhcGgudmVydGljZXMpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGB2ZXJ0ZXg6ICR7dmVydGV4LmlkfWApO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWFkb25seSB2ZXJ0aWNlczogSXRlcmFibGVJdGVyYXRvcjxWZXJ0ZXg8VD4+O1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdmVydGljZXMgaW4gdGhlIGdyYXBoLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnNvbGUubG9nKGB0aGUgZ3JhcGggaGFzICR7Z3JhcGgudmVydGV4Q291bnR9IHZlcnRpY2VzYCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmVydGV4Q291bnQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgd2VpZ2h0IG9mIGFuIGVkZ2Ugb3Igc2V0IG9mIGVkZ2VzIGJldHdlZW4gcGFpcnMgb2YgdmVydGljZXMgcmVwcmVzZW50aW5nIHRoZSBjb25uZWN0aW9ucyBmcm9tIGBzcmNgIHRvIGBkc3RgLlxuICAgICAqXG4gICAgICogSWYgYW4gZXJyb3IgaXMgdGhyb3duLCB0aGUgZ3JhcGggaXMgbGVmdCB1bnRvdWNoZWQsIG5vIGVkZ2VzIGFyZSBhZGRlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JhcGguc2V0RWRnZShcbiAgICAgKiAgIHsgc3JjOiBhLCBkc3Q6IGIsIHdlaWdodDogNSAgfSxcbiAgICAgKiAgIHsgc3JjOiBiLCBkc3Q6IGMsIHdlaWdodDogMTAgfSxcbiAgICAgKiApO1xuICAgICAqXG4gICAgICogLy8gdXBkYXRlIGVkZ2UgYWJcbiAgICAgKiBncmFwaC5zZXRFZGdlKFxuICAgICAqICAgeyBzcmM6IGEsIGRzdDogYiwgd2VpZ2h0OiAxMCB9LFxuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHNyYyBUaGUgc291cmNlIHZlcnRleC5cbiAgICAgKiBAcGFyYW0gZHN0IFRoZSBkZXN0aW5hdGlvbiB2ZXJ0ZXguXG4gICAgICogQHBhcmFtIHdlaWdodCBUaGUgd2VpZ2h0IGFzc2NpYXRlZCB3aXRoIHRoZSBwYXRoIGZyb20gYHNyY2AgdG8gYGRzdGAuIERlZmF1bHRzIHRvIDAuXG4gICAgICogQHRocm93cyBJZiBgc3JjYCBvciBgZHN0YCBpcyBub3QgaW4gdGhlIGdyYXBoLlxuICAgICAqIEB0aHJvd3MgSWYgYHdlaWdodGAgaXMgbmVnYXRpdmUgb3Igbm90IGEgbnVtYmVyLlxuICAgICAqL1xuICAgIHNldEVkZ2UoLi4uZWRnZURlc2NzOiBBcnJheTxFZGdlRGVzY3JpcHRvcjxUPj4pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBlZGdlIHRoYXQgY29ubmVjdHMgb25lIHZlcnRleCB0byBhbm90aGVyLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGVkZ2UgPSBncmFwaC5lZGdlKGEsIGIpO1xuICAgICAqIGlmIChlZGdlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgRm91bmQgYW4gZWRnZSBmcm9tIFwiJHtlZGdlLnNyYy5pZH1cIiB0byBcIiR7ZWRnZS5kc3QuaWR9XCIgd2l0aCB3ZWlnaHQgJHtlZGdlLndlaWdodH1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHNyYyBUaGUgc291cmNlIHZlcnRleC5cbiAgICAgKiBAcGFyYW0gZHN0IFRoZSBkZXN0aW5hdGlvbiB2ZXJ0ZXguXG4gICAgICogQHJldHVybnMgSWYgYW4gZWRnZSBmcm9tIGBzcmNgIHRvIGBkc3RgIGV4aXN0cywgcmV0dXJucyB0aGUgYEVkZ2VgLiBPdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGVkZ2Uoc3JjOiBWZXJ0ZXg8VD4sIGRzdDogVmVydGV4PFQ+KTogRWRnZTxUPiB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYW4gZWRnZSBmcm9tIG9uZSB2ZXJ0ZXggdG8gYW5vdGhlciBpcyBwcmVzZW50IGluIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpZiAoZ3JhcGguaGFzRWRnZShhLCBiKSkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2FuIGVkZ2UgZnJvbSBcImFcIiB0byBcImJcIiB3YXMgZm91bmQnKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHNyYyBUaGUgc291cmNlIHZlcnRleC5cbiAgICAgKiBAcGFyYW0gZHN0IFRoZSBkZXN0aW5hdGlvbiB2ZXJ0ZXguXG4gICAgICogQHJldHVybnMgSWYgYW4gZWRnZSBmcm9tIGBzcmNgIHRvIGBkc3RgIGV4aXN0cywgcmV0dXJucyBgdHJ1ZWAuIE90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBoYXNFZGdlKHNyYzogVmVydGV4PFQ+LCBkc3Q6IFZlcnRleDxUPik6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZWRnZSBvciBhIHNldCBvZiBlZGdlcyBmcm9tIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmFwaC5yZW1vdmVFZGdlKGUxLCBlMik7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGVkZ2VzIEEgdmFyaWFibGUgbnVtYmVyIG9mIGVkZ2VzIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmVFZGdlKC4uLmVkZ2VzOiBBcnJheTxFZGdlPFQ+Pik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpdGVyYWJsZSBvZiBhbGwgZWRnZXMgaW4gdGhlIGdyYXBoLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGZvciAoY29uc3QgZWRnZSBvZiBncmFwaC5lZGdlcykge1xuICAgICAqICAgY29uc29sZS5sb2coYGVkZ2U6ICR7ZWRnZS5zcmMuaWR9IC0+ICR7ZWRnZS5kc3QuaWR9YCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVkZ2VzOiBJdGVyYWJsZUl0ZXJhdG9yPEVkZ2U8VD4+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBlZGdlcyBpbiB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc29sZS5sb2coYHRoZSBncmFwaCBoYXMgJHtncmFwaC5lZGdlQ291bnR9IGVkZ2VzYCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWRnZUNvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIHZlcnRpY2VzIGFuZCBlZGdlcyBmcm9tIHRoZSBncmFwaC5cbiAgICAgKiBBbHNvIGNhbGwgYW4gb3B0aW9uYWwgYG9uRGlzcG9zZWAgcHJvdmlkZWQgYXQgY29uc3RydWN0aW9uLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyYXBoLmRpc3Bvc2UoKTtcbiAgICAgKiAvLyBncmFwaC52ZXJ0ZXhDb3VudCA9PT0gMFxuICAgICAqIC8vIGdyYXBoLmVkZ2VDb3VudCA9PT0gMFxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRpc3Bvc2UoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byB2ZXJ0ZXggY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEFmdGVyIHRoaXMgZ3JhcGgncyB2ZXJ0aWNlcyBoYXZlIGJlZW4gdXBkYXRlZCB1c2luZyBbW2FkZFZlcnRleF1dIG9yIFtbcmVtb3ZlVmVydGV4XV0sXG4gICAgICogdGhlIGBvYnNlcnZlcmAgYXR0YWNoZWQgd2lsbCBoYXZlIGl0cyBgb25DaGFuZ2VkYCBmdW5jdGlvbiBjYWxsZWQgd2hlbiBbW2NvbW1pdF1dIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmFwaC5vblZlcnRpY2VzQ2hhbmdlZCh7XG4gICAgICogICBvbkNoYW5nZWQoKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGB0aGlzIGdyYXBoJ3MgdmVydGljZXMgaGF2ZSBjaGFuZ2VkYCk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9ic2VydmVyXG4gICAgICovXG4gICAgb25WZXJ0aWNlc0NoYW5nZWQob2JzZXJ2ZXI6IElPYnNlcnZlcjx2b2lkPik6IElTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gZWRnZSBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQWZ0ZXIgdGhpcyBncmFwaCdzIGVkZ2VzIGhhdmUgYmVlbiB1cGRhdGVkIHVzaW5nIFtbc2V0RWRnZV1dIG9yIFtbcmVtb3ZlRWRnZV1dLFxuICAgICAqIHRoZSBgb2JzZXJ2ZXJgIGF0dGFjaGVkIHdpbGwgaGF2ZSBpdHMgYG9uQ2hhbmdlZGAgZnVuY3Rpb24gY2FsbGVkIHdoZW4gW1tjb21taXRdXSBpcyBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JhcGgub25FZGdlc0NoYW5nZWQoe1xuICAgICAqICAgb25DaGFuZ2VkKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhgdGhpcyBncmFwaCdzIGVkZ2VzIGhhdmUgY2hhbmdlZGApO1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBvYnNlcnZlclxuICAgICAqL1xuICAgIG9uRWRnZXNDaGFuZ2VkKG9ic2VydmVyOiBJT2JzZXJ2ZXI8dm9pZD4pOiBJU3Vic2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhbnkgYXR0YWNoZWQgb2JzZXJ2ZXJzIGlmIHRoZXJlIHdlcmUgY2hhbmdlcyB0byB0aGlzIGdyYXBoLlxuICAgICAqIElmIHRoZXJlIGFyZSBubyBjaGFuZ2VzIHRvIHRoZSBncmFwaCwgdGhpcyBpcyBhIG5vLW9wIGFuZCBubyBjYWxsYmFja3Mgd2lsbCBiZSB0cmlnZ2VyZWQuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JhcGguY29tbWl0KCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY29tbWl0KCk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICogQW4gYWRhcHRvciBmb3IgYW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIHRvIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgYW5kIHVwZGF0ZSBhIGdyYXBoLlxuICAgKiBVc2VkIGluIFtbSURpcmVjdGVkR3JhcGgud2F0Y2hdXS5cbiAgICovXG4gICBleHBvcnQgaW50ZXJmYWNlIElDb2xsZWN0aW9uQWRhcHRvcjxUPiB7XG4gICAgLyoqXG4gICAgICogQSBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gZnJvbSB0aGUgc2RrLCBlLmcuIGBtcFNkay5Td2VlcC5kYXRhYC5cbiAgICAgKi9cbiAgICBjb2xsZWN0aW9uOiBJT2JzZXJ2YWJsZU1hcDxUPjtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgYW4gaXRlbSBmcm9tIHRoZSBjb2xsZWN0aW9uIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbmVpZ2hib3Igb2YgYW5vdGhlciBpdGVtLlxuICAgICAqIEBwYXJhbSBzcmMgQSB2ZXJ0ZXggY29udGFpbmluZyB0aGUgc291cmNlIGl0ZW1cbiAgICAgKiBAcGFyYW0gZHN0IEEgdmVydGV4IGNvbnRhaW5pbmcgdGhlIGRlc3RpbmF0aW9uIGl0ZW1cbiAgICAgKi9cbiAgICBpc05laWdoYm9yT2Yoc3JjOiBWZXJ0ZXg8VD4sIGRzdDogVmVydGV4PFQ+KTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3Qgb2YgaWRzIGZvciBvdGhlciB2ZXJ0aWNlcyB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIG5laWdoYm9ycyB0byBhbiBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICovXG4gICAgbmVpZ2hib3JzT2YoaXRlbTogVmVydGV4PFQ+KTogSXRlcmFibGVJdGVyYXRvcjxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3ZWlnaHQgYmV0d2VlbiB0d28gaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gdG8gdXNlIGFzIHRoZSBjb25uZWN0aW5nIGVkZ2VzIHdlaWdodC5cbiAgICAgKiBAcGFyYW0gc3JjXG4gICAgICogQHBhcmFtIGRzdFxuICAgICAqL1xuICAgIHdlaWdodEJldHdlZW4oc3JjOiBWZXJ0ZXg8VD4sIGRzdDogVmVydGV4PFQ+KTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhbiBpdGVtIGZyb20gdGhlIGNvbGxlY3Rpb24gd2lsbCBiZSBhZGRlZCBhcyBhIGdyYXBoIHZlcnRleC5cbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqL1xuICAgIHNob3VsZEFkZD8oaXRlbTogVCk6IGJvb2xlYW47XG4gIH1cblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiBhbiBBKiBzZWFyY2guXG4gICAqL1xuICBleHBvcnQgZW51bSBBU3RhclN0YXR1cyB7XG4gICAgLyoqIEEgcGF0aCB3YXMgZm91bmQuICovXG4gICAgU1VDQ0VTUyA9ICdhc3Rhci5zdGF0dXMuc3VjY2VzcycsXG4gICAgLyoqIE5vIHBhdGggd2FzIGZvdW5kLiAqL1xuICAgIE5PX1BBVEggPSAnYXN0YXIuc3RhdHVzLm5vX3BhdGgnLFxuICAgIC8qKiBBIHBhdGggd2Fzbid0IGZvdW5kIGluIHRoZSB0aW1lIHNwZWNpZmllZC4gKi9cbiAgICBUSU1FT1VUID0gJ2FzdGFyLnN0YXR1cy50aW1lb3V0JyxcbiAgICAvKiogVGhlIHN0YXJ0IHZlcnRleCB3YXMgbm90IGZvdW5kIGluIHRoZSBncmFwaC4gKi9cbiAgICBOT19TVEFSVF9WRVJURVggPSAnYXN0YXIuc3RhdHVzLm5vX3N0YXJ0JyxcbiAgICAvKiogVGhlIGVuZCB2ZXJ0ZXggd2FzIG5vdCBmb3VuZCBpbiB0aGUgZ3JhcGguICovXG4gICAgTk9fRU5EX1ZFUlRFWCA9ICdhc3Rhci5zdGF0dXMubm9fZW5kJyxcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcmVzdWx0IG9mIGRvaW5nIGFuIEEqIHNlYXJjaC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEFTdGFyUmVzdWx0PFQ+ID0ge1xuICAgIC8qKiBXaGV0aGVyIHRoZSBzZWFyY2ggd2FzIHN1Y2Nlc3NmdWwsIHRpbWVkIG91dCwgb3IgaWYgdGhlcmUgd2FzIG5vIHBhdGggZm91bmQuICovXG4gICAgc3RhdHVzOiBBU3RhclN0YXR1cztcbiAgICAvKiogVGhlIHRvdGFsIGNvc3Qgb2YgdHJhbnZlcnNpbmcgdGhlIHBhdGguICovXG4gICAgY29zdDogbnVtYmVyO1xuICAgIC8qKiBPbiBzdWNjZXNzLCBjb250YWlucyB0aGUgcGF0aCBvZiB2ZXJ0aWNlcy4gKi9cbiAgICBwYXRoOiBBcnJheTxWZXJ0ZXg8VD4+O1xuICB9XG5cbiAgLyoqXG4gICAqIE9wdGlvbnMgdGhhdCBjYW4gY29uZmlndXJlIGhvdyB0aGUgQSogYWxnb3JpdGhtIHJ1bnMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFNlYXJjaE9wdGlvbnM8VD4ge1xuICAgIC8qKiBBbiBlc3RpbWF0ZSBvZiB0aGUgXCJkaXN0YW5jZVwiIGJldHdlZW4gYHZlcnRleEFgIGFuZCBgdmVydGV4QmAuIFRoZSBkZWZhdWx0IGhldXJpc3RpYyBmdW5jdGlvbiByZXR1cm5zIDAuICovXG4gICAgaGV1cmlzdGljKHZlcnRleEE6IFZlcnRleDxUPiwgdmVydGV4QjogVmVydGV4PFQ+LCBlZGdlOiBFZGdlPFQ+KTogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IGVuY2Fwc3VsYXRlcyBhIGdyYXBoIGFuZCBjYW4gYmUgdXNlZCB0byBleGVjdXRlIEEqIG9yIHN1YnNjcmliZSB0byBBKiBmb3IgcG90ZW50aWFsIGNoYW5nZXMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElBU3RhclJ1bm5lcjxUPiB7XG4gICAgLyoqXG4gICAgICogRG8gdGhlIEEqIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gdGltZW91dCBUaGUgYW1vdW50IG9mIHRpbWUgdG8gc3BlbmQgdHJ5aW5nIHRvIGZpbmQgYSBwYXRoLiBEZWZhdWx0cyB0byA1MDAwbXMuXG4gICAgICogQHJldHVybnMge0FTdGFyUmVzdWx0PFQ+fSBUaGUgcmVzdWx0cyBvZiBydW5uaW5nIEEqLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFTdGFyUnVubmVyID0gbXBTZGsuR3JhcGguY3JlYXRlQVN0YXJSdW5uZXIoLi4uKTtcbiAgICAgKiBjb25zdCByZXN1bHQgPSBhU3RhclJ1bm5lci5leGVjKCk7XG4gICAgICogaWYgKHJlc3VsdC5zdGF0dXMgPT09IG1wU2RrLkdyYXBoLkFTdGFyU3RhdHVzLlNVQ0NFU1MpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdmb3VuZCBhIHBhdGggb2YgbGVuZ3RoJywgcmVzdWx0LnBhdGgubGVuZ3RoKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXhlYyh0aW1lb3V0PzogbnVtYmVyKTogQVN0YXJSZXN1bHQ8VD47XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gY2hhbmdlcyBpbiB0aGUgdW5kZXJseWluZyBncmFwaCBhbmQgcmVjZWl2ZSBhIGNhbGxiYWNrIGluIGBvYnNlcnZlcmAgd2hlbiBjaGFuZ2VzIGFyZSBkZXRlY3RlZC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyB7SVN1YnNjcmlwdGlvbn0gQSBzdWJzY3JpcHRpb24gdG8gc3RvcCBsaXN0ZW5pbmcgZm9yIGNoYW5nZXMgdG8gdGhlIGdyYXBoLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFTdGFyUnVubmVyID0gbXBTZGsuR3JhcGguY3JlYXRlQVN0YXJSdW5uZXIoLi4uKTtcbiAgICAgKiBjb25zdCBzdWJzY3JpcHRpb24gPSBhU3RhclJ1bm5lci5zdWJzY3JpYmUoe1xuICAgICAqICAgb25DaGFuZ2VkKHJ1bm5lcikge1xuICAgICAqICAgICBjb25zdCByZXN1bHQgPSBydW5uZXIuZXhlYygpO1xuICAgICAqICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gbXBTZGsuR3JhcGguQVN0YXJTdGF0dXMuU1VDQ0VTUykge1xuICAgICAqICAgICAgIGNvbnNvbGUubG9nKCdmb3VuZCBhIHBhdGggb2YgbGVuZ3RoJywgcmVzdWx0LnBhdGgubGVuZ3RoKTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIC8vIC4uLiBzb21lIHRpbWUgbGF0ZXIgd2hlbiB0aGUgcnVubmVyIGlzIG5vIGxvbmdlciBuZWVkZWRcbiAgICAgKiBzdWJzY3JpcHRpb24uY2FuY2VsKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3Vic2NyaWJlKG9ic2VydmVyOiBJT2JzZXJ2ZXI8R3JhcGguSUFTdGFyUnVubmVyPFQ+PiB8IE9ic2VydmVyQ2FsbGJhY2s8R3JhcGguSUFTdGFyUnVubmVyPFQ+Pik6IElTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHJ1bm5lci5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgb25jZSB5b3UgYXJlIGRvbmUgd2l0aCB0aGUgcnVubmVyLlxuICAgICAqL1xuICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcmFwaCB7XG4gIEFTdGFyU3RhdHVzOiB0eXBlb2YgR3JhcGguQVN0YXJTdGF0dXM7XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gZW1wdHkgZ3JhcGggZGF0YSBzdHJ1Y3R1cmUuXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBncmFwaCA9IG1wU2RrLkdyYXBoLmNyZWF0ZURpcmVjdGVkR3JhcGgoKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBvbkRpc3Bvc2UgQW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gW1tJRGlyZWN0ZWRHcmFwaC5kaXNwb3NlXV0gaXMgY2FsbGVkXG4gICAqIEB0ZW1wbGF0ZSBUIFRoZSB0eXBlIG9mIGFueSB1c2VyIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGVhY2ggdmVydGV4IGluIHRoZSBncmFwaC5cbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjU1LjItMzQtZ2E5OTM0Y2NkOTNcbiAgICovXG4gIGNyZWF0ZURpcmVjdGVkR3JhcGg8VD4ob25EaXNwb3NlPzogKCkgPT4gdm9pZCk6IEdyYXBoLklEaXJlY3RlZEdyYXBoPFQ+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBcInJ1bm5lclwiIGZvciB0aGUgQSogYWxnb3JpdGhtIGFyb3VuZCBhIGBncmFwaGAsIGFuZCBgc3RhcnRgIGFuZCBgZW5kYCB2ZXJ0aWNlcy5cbiAgICpcbiAgICogVGhlIHJ1bm5lciBlbmNhcHN1bGF0ZXMgdGhlIGRldGFpbHMgb2YgdGhlIGdyYXBoIGFuZCBzZWFyY2gsIGNhY2hlcyB0aGUgcmVzdWx0cyBvZiBBKixcbiAgICogYW5kIHByb3ZpZGVzIGEgd2F5IHRvIHN1YnNjcmliZSB0byBwb3RlbnRpYWwgY2hhbmdlcyBpbiB0aGUgcGF0aCBzaWduaWZ5aW5nIHRoYXQgdGhlIHJlc3VsdHMgb2YgW1tHcmFwaC5BU3RhclJ1bm5lci5leGVjXV0gbWF5IGhhdmUgY2hhbmdlZC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBncmFwaCA9IG1wU2RrLkdyYXBoLmNyZWF0ZURpcmVjdGVkR3JhcGgoKTtcbiAgICogLy8gLi4uIHNldHVwIGdyYXBoIHZlcnRpY2VzIGFuZCBlZGdlc1xuICAgKiBjb25zdCBzdGFydCA9IGdyYXBoLnZlcnRleCgnc3RhcnQnKTtcbiAgICogY29uc3QgZW5kID0gZ3JhcGgudmVydGV4KCdlbmQnKTtcbiAgICogY29uc3QgYVN0YXJSdW5uZXIgPSBtcFNkay5HcmFwaC5jcmVhdGVBU3RhclJ1bm5lcihncmFwaCwgc3RhcnQsIGVuZCk7XG4gICAqIGNvbnN0IHJlc3VsdCA9IGFTdGFyUnVubmVyLmV4ZWMoKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBncmFwaCBUaGUgZ3JhcGggdG8gdHJhdmVyc2VcbiAgICogQHBhcmFtIHN0YXJ0IFRoZSBzdGFydCB2ZXJ0ZXguXG4gICAqIEBwYXJhbSBlbmQgVGhlIGVuZCB2ZXJ0ZXguXG4gICAqIEBwYXJhbSBvcHRpb25zIEFuIG9wdGlvbmFsIGBoZXVyaXN0aWNgIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtncmFwaC5BU3RhclJ1bm5lcn0gQSBydW5uZXIgZm9yIEEqIHRoYXQgY2FuIGV4ZWN1dGUgdGhlIHNlYXJjaCBvciBiZSBzdWJzY3JpYmVkIHRvLlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNTUuMi0zNC1nYTk5MzRjY2Q5M1xuICAgKi9cbiAgY3JlYXRlQVN0YXJSdW5uZXI8VD4oXG4gICAgZ3JhcGg6IEdyYXBoLklEaXJlY3RlZEdyYXBoPFQ+LFxuICAgIHN0YXJ0OiBHcmFwaC5WZXJ0ZXg8VD4sXG4gICAgZW5kOiBHcmFwaC5WZXJ0ZXg8VD4sXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8R3JhcGguU2VhcmNoT3B0aW9uczxUPj4pOiBHcmFwaC5JQVN0YXJSdW5uZXI8VD47XG59XG4iLCJpbXBvcnQgdHlwZSB7IElPYnNlcnZhYmxlTWFwLCBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG5leHBvcnQgbmFtZXNwYWNlIExhYmVsIHtcbiAgZXhwb3J0IHR5cGUgTGFiZWwgPSB7XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIHZpc2libGU6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2Zsb29ySW5mb11dIGluc3RlYWQgKi9cbiAgICBmbG9vcjogbnVtYmVyO1xuICAgIGZsb29ySW5mbzoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgfTtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBMYWJlbERlcHJlY2F0ZWQgPSB7XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIHZpc2libGU6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2Zsb29ySW5mb11dIGluc3RlYWQgKi9cbiAgICBmbG9vcjogbnVtYmVyO1xuICAgIGZsb29ySW5mbzoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgfTtcbiAgICBzY3JlZW5Qb3NpdGlvbjogVmVjdG9yMjtcbiAgfTtcblxuICBleHBvcnQgZW51bSBFdmVudCB7XG4gICAgLyoqIEBldmVudCAqL1xuICAgIFBPU0lUSU9OX1VQREFURUQgPSAnbGFiZWwucG9zaXRpb251cGRhdGVkJyxcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExhYmVsIHtcbiAgRXZlbnQ6IHR5cGVvZiBMYWJlbC5FdmVudDtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBkYXRhIG9mIGFsbCBsYWJlbHMuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW2RhdGFdXSBvYnNlcnZhYmxlIGluc3RlYWQuXG4gICAqL1xuICBnZXREYXRhKCk6IFByb21pc2U8TGFiZWwuTGFiZWxEZXByZWNhdGVkW10+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIG1hcCBvZiB0aGUgY3VycmVudCBsYWJlbHMuXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggYSBtYXAgb2YgbGFiZWxzLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuTGFiZWwuZGF0YS5zdWJzY3JpYmUoe1xuICAgKiAgb25BZGRlZDogZnVuY3Rpb24gKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdMYWJlbCBhZGRlZCB0byB0aGUgY29sbGVjdGlvbicsIGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKTtcbiAgICogIH0sXG4gICAqICBvblJlbW92ZWQ6IGZ1bmN0aW9uIChpbmRleCwgaXRlbSwgY29sbGVjdGlvbikge1xuICAgKiAgICBjb25zb2xlLmxvZygnTGFiZWwgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgfSxcbiAgICogIG9uVXBkYXRlZDogZnVuY3Rpb24gKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdMYWJlbCB1cGRhdGVkIGluIHBsYWNlIGluIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgfSxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8TGFiZWwuTGFiZWw+O1xufVxuIiwiZXhwb3J0IG5hbWVzcGFjZSBMaW5rIHtcblxuICAvKipcbiAgICogVGhlIGJlaGF2aW9yIHRvIHVzZSB3aGVuIGNyZWF0aW5nIGEgbGluay5cbiAgICovXG4gIGV4cG9ydCBlbnVtIENyZWF0aW9uUG9saWN5IHtcbiAgICAvKiogVXNlIFNob3djYXNlJ3MgY3VycmVudCB3aW5kb3cubG9jYXRpb24gYXMgdGhlIGJhc2Ugb2YgdGhlIGxpbmsgKi9cbiAgICBXSU5ET1cgPSAnbGluay5jcmVhdGlvbnBvbGljeS53aW5kb3cnLFxuICAgIC8qKiBVc2UgdGhlIGVtYmVkZGVyJ3Mgd2luZG93LmxvY2F0aW9uIGFzIHRoZSBiYXNlIG9mIHRoZSBsaW5rICovXG4gICAgUkVGRVJSRVIgPSAnbGluay5jcmVhdGlvbnBvbGljeS5yZWZlcnJlcicsXG4gICAgLyoqIFVzZSB0aGUgb3JpZ2luYWwgTWF0dGVycG9ydCBsaW5rIGFzIHRoZSBiYXNlIG9mIHRoZSBsaW5rICovXG4gICAgTUFUVEVSUE9SVCA9ICdsaW5rLmNyZWF0aW9ucG9saWN5Lm1hdHRlcnBvcnQnLFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiZWhhdmlvciB0byB1c2Ugd2hlbiBjbGlja2luZyBhIGxpbmtcbiAgICovXG4gIGV4cG9ydCBlbnVtIE9wZW5Qb2xpY3kge1xuICAgIC8qKiBVc2UgdGhlIGRlZmF1bHQgYmVoYXZpb3IgZm9yIHRoZSBhc3NvY2lhdGVkIGxpbmsgdHlwZSAqL1xuICAgIERFRkFVTFQgPSAnbGluay5vcGVucG9saWN5LmRlZmF1bHQnLFxuICAgIC8qKiBPcGVuIGEgbmV3IHRhYiBvciB3aW5kb3cgKi9cbiAgICBORVdfV0lORE9XID0gJ2xpbmsub3BlbnBvbGljeS5uZXd3aW5kb3cnLFxuICAgIC8qKiBPcGVuIGluIHRoZSBjdXJyZW50IGlmcmFtZSAqL1xuICAgIFNBTUVfRlJBTUUgPSAnbGluay5vcGVucG9saWN5LnNhbWVmcmFtZScsXG4gICAgLyoqIE5hdmlnYXRlIHRoZSB3aW5kb3cgdGhhdCBpcyB0aGUgY3VycmVudCBlbWJlZGRlciBvZiBTaG93Y2FzZSAqL1xuICAgIENVUlJFTlRfV0lORE9XID0gJ2xpbmsub3BlbnBvbGljeS5jdXJyZW50JyxcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIERlc3RpbmF0aW9uUG9saWN5IHtcbiAgICAvKiogTmF2aWdhdGUgdG8gdGhlIGRlZmF1bHQgZGVzdGluYXRpb24gZm9yIGxpbmtzOyBsaWtlbHkgdGhlIFNob3djYXNlIGVtYmVkZGVyJ3MgZG9tYWluICovXG4gICAgREVGQVVMVCA9ICdsaW5rLmRlc3RpbmF0aW9uLmRlZmF1bHQnLFxuICAgIC8qKiBOYXZpZ2F0ZSBkaXJlY3RseSB0byB0aGUgU2hvd2Nhc2Ugb2YgYSBNYXR0ZXJwb3J0IHNwYWNlICovXG4gICAgTUFUVEVSUE9SVCA9ICdsaW5rLmRlc3RpbmF0aW9uLm1hdHRlcnBvcnQnLFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ3JlYXRlTGlua09wdGlvbnMgPSB7XG4gICAgLyoqIFRoZSBsaXN0IG9mIFVSTCBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgaW4gdGhlIHNoYXJlIGxpbmsgKi9cbiAgICBpbmNsdWRlUGFyYW1zOiBzdHJpbmdbXTtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIE9wZW5Qb2xpY3lPcHRpb25zID0ge1xuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIHRlbXBsYXRlIGZvciB0aGUgbGluayB0byB1c2Ugd2hlbiB0aGUgcG9saWN5IGlzIG5vdCBzZXQgdG8gYFNBTUVfRlJBTUVgLFxuICAgICAqIHRoYXQgd2lsbCBoYXZlIGFueSBgJHtbcGFyYW1dfWAgc3Vic3RyaW5ncyBpbnRlcnBvbGF0ZWQgdXNpbmcgdGhlIGN1cnJlbnQgc2V0IG9mIFVSTCBwYXJhbWV0ZXJzLlxuICAgICAqXG4gICAgICogSWYgYCR7W3BhcmFtXX1gIGlzIGluY2x1ZGVkIGluIHRoZSBwYXRoIG9mIHRoZSBVUkwsIGl0IHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhlIGN1cnJlbnQgVVJMIHBhcmFtZXRlcidzIHZhbHVlIG9yIHVuZGVmaW5lZCAoYCR7bX0vc2hvd2A6IGBhYmMxMjMvc2hvd2ApLlxuICAgICAqXG4gICAgICogSWYgYCR7W3BhcmFtXX1gIGlzIGluY2x1ZGVkIGluIHRoZSBzZWFyY2ggcGFyYW1ldGVycyBvZiB0aGUgVVJMLCBpdCBhbmQgaXQncyB2YWx1ZSB3aWwgYmUgYXBwZW5kZWQgb3QgdGhlIFVSTCAoYCR7bX1gOiBgbT1hYmMxMjNgKS5cbiAgICAgKlxuICAgICAqIFVSTCBwYXJhbWV0ZXJzIHRoYXQgYXJlIHVuc2V0IHdpbGwgYmUgYXBwZW5kZWQgd2l0aG91dCBhIHZhbHVlLiAoYCR7dW5zZXR9YDogYHVuc2V0YClcbiAgICAgKlxuICAgICAqIE5vdGU6IGAke219YCBvciBgJHttb2RlbH0gYXJlIHNwZWNpYWwgY2FzZXMgaW4gbW9kZWwgbGlua3MuXG4gICAgICogSW5zdGVhZCBvZiB0aGUgY3VycmVudCB3aW5kb3cncyBcIm1vZGVsXCIgcGFyYW0sIHRoZSBtb2RlbCBJRCBmcm9tIHRoZSBsaW5rIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQXMgYW4gZXhhbXBsZSwgdGhlIHN0cmluZyBgXCJodHRwczovL215LmRvbWFpbi5jb20vJHttfS9zaG93Lmh0bWw/JHtwbGF5fSYke3Vuc2V0fVwiYCBpbnRlcnBvbGF0ZWQgYXQgdGhlIFVSTCBgaHR0cHM6Ly9teS5kb21haW4uY29tL3Nob3cvP209YWJjMTIzJnBsYXk9MWBcbiAgICAgKiB3aWxsIHJlc3VsdCBpbiBhIFVSTCBsaWtlIGBcImh0dHBzOi8vbXkuZG9tYWluLmNvbS9hYmMxMjMvc2hvdy5odG1sP3BsYXk9MSZ1bnNldCZtPWFiYzEyM1wiYC5cbiAgICAgKi9cbiAgICB0ZW1wbGF0ZUhyZWY6IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMaW5rIHtcbiAgQ3JlYXRpb25Qb2xpY3k6IHR5cGVvZiBMaW5rLkNyZWF0aW9uUG9saWN5O1xuICBPcGVuUG9saWN5OiB0eXBlb2YgTGluay5PcGVuUG9saWN5O1xuICAvKipcbiAgICogQ3JlYXRlIGEgc2hhcmVhYmxlIGxpbmsgdG8gdGhlIGN1cnJlbnQgU2hvd2Nhc2UgcGxheWVyLlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGxpbmsgPSBhd2FpdCBzZGsuTGluay5jcmVhdGVMaW5rKCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZSAzLjEuNjAuMTItMzItZzQ1NzIwMTdjOThcbiAgICovXG4gIGNyZWF0ZUxpbmsoKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkZWVwIGxpbmsgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gb2YgdGhlIGN1cnJlbnQgU2hvd2Nhc2UgcGxheWVyLlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGRlZXBMaW5rID0gYXdhaXQgc2RrLkxpbmsuY3JlYXRlRGVlcExpbmsoKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlIDMuMS42MC4xMi0zMi1nNDU3MjAxN2M5OFxuICAgKi9cbiAgY3JlYXRlRGVlcExpbmsoKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgaG93IHRoZSBsaW5rIHRoZSBzaGFyZSBkaWFsb2cgYW5kIHRoZSBbW2NyZWF0ZUxpbmtdXSBhbmQgW1tjcmVhdGVEZWVwTGlua11dIGxpbmtzIGFyZSBjcmVhdGVkLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGF3YWl0IHNkay5MaW5rLnNldFNoYXJlTGlua1BvbGljeShzZGsuTGluay5DcmVhdGlvblBvbGljeS5SRUZFUlJFUik7XG4gICAqIGNvbnN0IGxpbmsgPSBhd2FpdCBzZGsuTGluay5jcmVhdGVMaW5rKCk7XG4gICAqIGNvbnNvbGUubG9nKGxpbmspOyAvLyBzaG91bGQgbG9nIGEgbGluayB0byB5b3VyIHBhZ2UgdGhhdCBlbWJlZHMgU2hvd2Nhc2VcbiAgICogYGBgXG4gICAqIEBwYXJhbSBwb2xpY3lcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGUgMy4xLjYwLjEyLTMyLWc0NTcyMDE3Yzk4XG4gICAqL1xuICBzZXRTaGFyZUxpbmtQb2xpY3kocG9saWN5OiBMaW5rLkNyZWF0aW9uUG9saWN5LCBvcHRpb25zPzogUGFydGlhbDxMaW5rLkNyZWF0ZUxpbmtPcHRpb25zPik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgYmVoYXZpb3Igb2YgY2xpY2tpbmcgYSBsaW5rIHRvIGFub3RoZXIgbW9kZWwuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogc2RrLkxpbmsuc2V0TW9kZWxMaW5rUG9saWN5KHNkay5MaW5rLk9wZW5Qb2xpY3kuTkVXX1dJTkRPVyk7XG4gICAqIC8vIGNsaWNraW5nIGEgbGluayB0byBhbm90aGVyIG1vZGVsIHdpbGwgbm93IG9wZW4gYSBuZXcgd2luZG93XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcG9saWN5XG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlIDMuMS42MC4xMi0zMi1nNDU3MjAxN2M5OFxuICAgKi9cbiAgc2V0TW9kZWxMaW5rUG9saWN5KHBvbGljeTogTGluay5PcGVuUG9saWN5LCBvcHRpb25zPzogUGFydGlhbDxMaW5rLk9wZW5Qb2xpY3lPcHRpb25zPik6IFByb21pc2U8dm9pZD47XG4gIHNldE1vZGVsTGlua1BvbGljeShwb2xpY3k6IExpbmsuT3BlblBvbGljeSwgZGVzdGluYXRpb246IExpbmsuRGVzdGluYXRpb25Qb2xpY3kpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGNsaWNraW5nIGEgbGluayB0byBhIGxvY2F0aW9uIHdpdGhpbiB0aGUgY3VycmVudCBtb2RlbC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiAvLyB3aGVuIGNsaWNraW5nIGEgbGluayB3aXRoIGEgbG9jYXRpb24gd2l0aGluIHRoZSBjdXJyZW50IG1vZGVsLCBvcGVuIGEgbmV3IHdpbmRvdyB3aXRoIHRoZSBtb2RlbCBhdCB0aGUgbG9jYXRpb25cbiAgICogLy8gaW5zdGVhZCBvZiBuYXZpZ2F0aW5nIHRoZSBjdXJyZW50IG1vZGVsIHRvIHRoZSBuZXcgbG9jYXRpb25cbiAgICogc2RrLkxpbmsuc2V0TmF2aWdhdGlvbkxpbmtQb2xpY3koc2RrLkxpbmsuT3BlblBvbGljeS5ORVdfV0lORE9XLCB7XG4gICAqICAgdGVtcGxhdGVIcmVmOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS8ke219L3Nob3cuaHRtbD8nLFxuICAgKiB9KTtcbiAgICpcbiAgICogLy8gcmV2ZXJ0IHRoZSBuYXZpZ2F0aW9uIGxpbmsgYmVoYXZpb3IgdG8gdGhlIGRlZmF1bHRcbiAgICogc2RrLkxpbmsuc2V0TmF2aWdhdGlvbkxpbmtQb2xpY3koc2RrLkxpbmsuT3BlblBvbGljeS5ERUZBVUxUKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBwb2xpY3lcbiAgICogQHBhcmFtIG9wdGlvbnNgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlIDMuMS42MC4xMi0zMi1nNDU3MjAxN2M5OFxuICAgKi9cbiAgc2V0TmF2aWdhdGlvbkxpbmtQb2xpY3kocG9saWN5OiBMaW5rLk9wZW5Qb2xpY3ksIG9wdGlvbnM/OiBQYXJ0aWFsPExpbmsuT3BlblBvbGljeU9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBiZWhhdmlvciBvZiBjbGlja2luZyBhIGxpbmsgdG8gYSBwYWdlIGZyb20gdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBvbmUgaG9zdGluZyBTaG93Y2FzZS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBzZGsuTGluay5zZXRTYW1lT3JpZ2luTGlua1BvbGljeShzZGsuTGluay5PcGVuUG9saWN5LkNVUlJFTlRfV0lORE9XKTtcbiAgICogLy8gY2xpY2tpbmcgYSBsaW5rIHdpdGggdGhlIHNhbWUgb3JpZ2luIGFzIFNob3djYXNlJ3MgZW1iZWRkZXIgd2lsbCBub3cgbmF2aWdhdGUgdGhlIGVtYmVkZGluZyBwYWdlXG4gICAqXG4gICAqIHNkay5MaW5rLnNldFNhbWVPcmlnaW5MaW5rUG9saWN5KHNkay5MaW5rLk9wZW5Qb2xpY3kuU0FNRV9GUkFNRSk7XG4gICAqIC8vIGNsaWNraW5nIGEgbGluayB3aXRoIHRoZSBzYW1lIG9yaWdpbiBhcyBTaG93Y2FzZSdzIGVtYmVkZGVyIHdpbGwgbm93IG5hdmlnYXRlIFNob3djYXNlJ3MgaWZyYW1lIHRvIHRoYXQgcGFnZVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHBvbGljeVxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZSAzLjEuNjAuMTItMzItZzQ1NzIwMTdjOThcbiAgICovXG4gIHNldFNhbWVPcmlnaW5MaW5rUG9saWN5KHBvbGljeTogTGluay5PcGVuUG9saWN5KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBiZWhhdmlvciBvZiBjbGlja2luZyBhIGxpbmsgdG8gYSBkaWZmZXJlbnQgb3JpZ2luLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIHNkay5MaW5rLnNldEV4dGVybmFsTGlua1BvbGljeShmYWxzZSk7XG4gICAqIC8vIGNsaWNraW5nIGFuIGV4dGVybmFsIGxpbmsgd2lsbCBub3cgbmF2aWdhdGUgdGhlIGN1cnJlbnQgcGFnZSAobm90IHRoZSBTaG93Y2FzZSBpZnJhbWUpIHRvIHRoZSBsaW5rXG4gICAqXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gb3BlbkluTmV3V2luZG93IE9wZW4gdGhlIGxpbmsgaW4gYSBuZXcgdGFiIG9yIHdpbmRvdzsgb3RoZXJ3aXNlLCByZXBsYWNlIHRoZSBlbWJlZGRlcidzIHdpbmRvdy5cbiAgICogdHJ1ZSBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvci5cbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGUgMy4xLjYwLjEyLTMyLWc0NTcyMDE3Yzk4XG4gICAqL1xuICBzZXRFeHRlcm5hbExpbmtQb2xpY3kob3BlbkluTmV3V2luZG93OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgVmVjdG9yMywgQ29sb3IsIFNpemUsIElPYnNlcnZhYmxlTWFwIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1hdHRlcnRhZyB7XG4gIGV4cG9ydCB0eXBlIE1hdHRlcnRhZ0RhdGEgPSB7XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICAvKiogVGhlIHdvcmxkIHNwYWNlIHBvc2l0aW9uIG9mIHRoZSBtYXR0ZXJ0YWcgYW5jaG9yIHdpdGhpbiB0aGUgbW9kZWwgKi9cbiAgICBhbmNob3JQb3NpdGlvbjogVmVjdG9yMztcbiAgICAvKiogVGhlIHdvcmxkIHNwYWNlIChub24tbm9ybWFsKSBkaXJlY3Rpb24gb2YgdGhlIG1hdHRlcnRhZydzIHN0ZW0gKi9cbiAgICBzdGVtVmVjdG9yOiBWZWN0b3IzO1xuICAgIHN0ZW1WaXNpYmxlOiBib29sZWFuO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBwYXJzZWREZXNjcmlwdGlvbjogRGVzY3JpcHRpb25DaHVua1tdO1xuICAgIG1lZGlhOiB7XG4gICAgICB0eXBlOiBNZWRpYVR5cGU7XG4gICAgICBzcmM6IHN0cmluZztcbiAgICB9O1xuICAgIGNvbG9yOiBDb2xvcjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbZmxvb3JJbmZvXV0gaW5zdGVhZCAqL1xuICAgIGZsb29ySWQ6IG51bWJlcjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbZmxvb3JJbmZvXV0gaW5zdGVhZCAqL1xuICAgIGZsb29ySW5kZXg6IG51bWJlcjtcbiAgICBmbG9vckluZm86IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICBzZXF1ZW5jZTogbnVtYmVyO1xuICAgIH07XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW21lZGlhLnR5cGVdXSBpbnN0ZWFkICovXG4gICAgbWVkaWFUeXBlOiBNZWRpYVR5cGU7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW21lZGlhLnNyY11dIGluc3RlYWQgKi9cbiAgICBtZWRpYVNyYzogc3RyaW5nO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tzdGVtVmVjdG9yXV0gaW5zdGVhZCAqL1xuICAgIGFuY2hvck5vcm1hbDogVmVjdG9yMztcbiAgICAvKiogQGRlcHJlY2F0ZWQgQ2FsY3VsYXRlIHRoZSBsZW5ndGggb2YgW1tzdGVtVmVjdG9yXV0gaW5zdGVhZCAqL1xuICAgIHN0ZW1IZWlnaHQ6IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBPYnNlcnZhYmxlTWF0dGVydGFnRGF0YSA9IHtcbiAgICBzaWQ6IHN0cmluZztcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIC8qKiBUaGUgd29ybGQgc3BhY2UgcG9zaXRpb24gb2YgdGhlIG1hdHRlcnRhZyBhbmNob3Igd2l0aGluIHRoZSBtb2RlbCAqL1xuICAgIGFuY2hvclBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIC8qKiBUaGUgd29ybGQgc3BhY2UgKG5vbi1ub3JtYWwpIGRpcmVjdGlvbiBvZiB0aGUgbWF0dGVydGFnJ3Mgc3RlbSAqL1xuICAgIHN0ZW1WZWN0b3I6IFZlY3RvcjM7XG4gICAgc3RlbVZpc2libGU6IGJvb2xlYW47XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIG1lZGlhOiB7XG4gICAgICB0eXBlOiBNZWRpYVR5cGU7XG4gICAgICBzcmM6IHN0cmluZztcbiAgICB9O1xuICAgIGNvbG9yOiBDb2xvcjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbZmxvb3JJbmZvXV0gaW5zdGVhZCAqL1xuICAgIGZsb29ySW5kZXg6IG51bWJlcjtcbiAgICBmbG9vckluZm86IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICBzZXF1ZW5jZTogbnVtYmVyO1xuICAgIH07XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gVHJhbnNpdGlvbiB7XG4gICAgSU5TVEFOVCA9ICd0cmFuc2l0aW9uLmluc3RhbnQnLFxuICAgIEZMWSAgICAgPSAndHJhbnNpdGlvbi5mbHknLFxuICAgIEZBREVPVVQgPSAndHJhbnNpdGlvbi5mYWRlJyxcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRGVzY3JpcHRpb25DaHVuayB7XG4gICAgdGV4dD86IHN0cmluZztcbiAgICBsaW5rPzogTGluaztcbiAgICB0eXBlOiBEZXNjcmlwdGlvbkNodW5rVHlwZTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgTGluayB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICB0eXBlOiBMaW5rVHlwZTtcbiAgICBuYXZpZ2F0aW9uRGF0YT86IGFueTtcbiAgfVxuICAvKipcbiAgICogT3B0aW9ucyB0aGF0IGNhbiBiZSBzcGVjaWZpZWQgd2hlbiBpbmplY3Rpb24gY3VzdG9tIEhUTUwgaW50byBhIE1hdHRlcnRhZy5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEluamVjdGlvbk9wdGlvbnMgPSB7XG4gICAgLyoqIFRoZSBzaXplIG9mIHRoZSBmcmFtZSB0byBjcmVhdGUgKi9cbiAgICBzaXplPzogU2l6ZTtcbiAgICAvKipcbiAgICAgKiBUaGUgcGF0aCBiZXR3ZWVuIFNob3djYXNlJ3Mgd2luZG93IGFuZCB5b3VyIHdpbmRvdyAod2l0aCB0aGUgc2RrKS5cbiAgICAgKlxuICAgICAqIElmIHlvdSBlbWJlZCBTaG93Y2FzZSBub3JtYWxseSwgdGhpcyBjYW4gYmUgb21pdHRlZC5cbiAgICAgKlxuICAgICAqIElmIHlvdSBwdXQgU2hvd2Nhc2Ugd2l0aGluIGFub3RoZXIgbGV2ZWwgb2YgaWZyYW1lIG9uIHlvdXIgcGFnZSwgdGhlIHBhdGggd291bGQgYmUgYCdwYXJlbnQucGFyZW50J2A7XG4gICAgICogU2hvd2Nhc2UncyBwYXJlbnQgaXMgdGhlIGlmcmFtZSwgdGhlIHBhcmVudCBvZiB0aGF0IGZyYW1lIGlzIHlvdXIgcGFnZS5cbiAgICAgKlxuICAgICAqIElmIHlvdSBwcm9ncmFtbWF0aWNhbGx5IG9wZW4gU2hvd2Nhc2UgaW4gYSBuZXcgd2luZG93LCB1c2UgYCdvcGVuZXInYC5cbiAgICAgKlxuICAgICAqIFdoZW4gdXNpbmcgdGhlIEJ1bmRsZSBTREsgdXNlIGAnJ2AuXG4gICAgICovXG4gICAgd2luZG93UGF0aD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIG1hcCBmb3IgdGhlIGdsb2JhbCBmdW5jdGlvbnMgYW5kIHZhcmlhYmxlcyB3ZSBwcm92aWRlIGluIHlvdXIgaWZyYW1lIHNhbmRib3guXG4gICAgICogT25seSBuZWVkcyB0byBiZSB1c2VkIGlmIHNjcmlwdHMgeW91IGFyZSBpbXBvcnRpbmcgYWxzbyBoYXZlIGEgZ2xvYmFsIGBzZW5kYCwgYG9uYCwgYG9mZmAsIG9yIGB0YWdgLlxuICAgICAqL1xuICAgIGdsb2JhbFZhcmlhYmxlTWFwPzogR2xvYmFsVmFyaWFibGVNYXA7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcCB0aGUgZ2xvYmFscyB3ZSBwcm92aWRlIGluIHlvdXIgc2FuZGJveCB0byBvdGhlciBuYW1lcy5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEdsb2JhbFZhcmlhYmxlTWFwID0ge1xuICAgIHNlbmQ/OiBzdHJpbmc7XG4gICAgb24/OiBzdHJpbmc7XG4gICAgb2ZmPzogc3RyaW5nO1xuICAgIHRhZz86IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIG1lc3NhZ2luZyBvYmplY3QgdG8gc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcyB0byBhbmQgZnJvbSB5b3VyIGlmcmFtZSBzYW5kYm94LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJTWVzc2VuZ2VyIHtcbiAgICAvKipcbiAgICAgKiBTZW5kIGEgbWVzc2FnZXMgb2YgdHlwZSBgZXZlbnRUeXBlYCB0byB0aGUgaWZyYW1lIHNhbmRib3ggd2l0aCBhbnkgb3B0aW9uYWwgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBzZW5kKGV2ZW50VHlwZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQWRkIGEgaGFuZGxlciBmb3IgbWVzc2FnZXMgb2YgdHlwZSBgZXZlbnRUeXBlYCBmcm9tIHRoZSBpZnJhbWUgc2FuZGJveFxuICAgICAqL1xuICAgIG9uKGV2ZW50VHlwZTogc3RyaW5nLCBldmVudEhhbmRsZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgaGFuZGxlciBmb3IgbWVzc2FnZXMgb2YgdHlwZSBgZXZlbnRUeXBlYCBmcm9tIHRoZSBpZnJhbWUgc2FuZGJveFxuICAgICAqL1xuICAgIG9mZihldmVudFR5cGU6IHN0cmluZywgZXZlbnRIYW5kbGVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgUHJldmVudGFibGVBY3Rpb25zID0ge1xuICAgIG9wZW5pbmc6IGJvb2xlYW47XG4gICAgbmF2aWdhdGluZzogYm9vbGVhbjtcbiAgfTtcblxuICBleHBvcnQgZW51bSBMaW5rVHlwZSB7XG4gICAgLyoqIEEgbGluayB0byBhbm90aGVyIHBvc2l0aW9uIGluIHRoZSBjdXJyZW50IG1vZGVsICovXG4gICAgTkFWSUdBVElPTiA9ICd0YWcubGluay5uYXYnLFxuXG4gICAgLyoqIEEgbGluayB0byBhIGRpZmZlcmVudCBNYXR0ZXJwb3J0IG1vZGVsICovXG4gICAgTU9ERUwgPSAndGFnLmxpbmsubW9kZWwnLFxuXG4gICAgLyoqIEFuIGV4dGVybmFsIGxpbmsgKi9cbiAgICBFWFRfTElOSyA9ICd0YWcubGluay5leHQnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gRGVzY3JpcHRpb25DaHVua1R5cGUge1xuICAgIE5PTkUgPSAndGFnLmNodW5rLm5vbmUnLFxuICAgIFRFWFQgPSAndGFnLmNodW5rLnRleHQnLFxuICAgIExJTksgPSAndGFnLmNodW5rLmxpbmsnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gRXZlbnQge1xuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBIT1ZFUiA9ICd0YWcuaG92ZXInLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBDTElDSyA9ICd0YWcuY2xpY2snLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBMSU5LX09QRU4gPSAndGFnLmxpbmtvcGVuJyxcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIE1lZGlhVHlwZSB7XG4gICAgTk9ORSA9ICdtYXR0ZXJ0YWcubWVkaWEubm9uZScsXG4gICAgUEhPVE8gPSAnbWF0dGVydGFnLm1lZGlhLnBob3RvJyxcbiAgICBWSURFTyA9ICdtYXR0ZXJ0YWcubWVkaWEudmlkZW8nLFxuICAgIFJJQ0ggPSAnbWF0dGVydGFnLm1lZGlhLnJpY2gnLFxuICB9XG5cbiAgLyoqXG4gICAqIEEgc3Vic2V0IG9mIHRoZSBNYXR0ZXJ0YWdEYXRhIHVzZWQgdG8gYWRkIE1hdHRlcnRhZ3MgdGhyb3VnaCB0aGUgc2RrLlxuICAgKiBNb3N0IHByb3BlcnRpZXMgYXJlIG9wdGlvbmFsIGV4Y2VwdCB0aG9zZSB1c2VkIGZvciBwb3NpdGlvbmluZzogYGFuY2hvclBvc2l0aW9uYCwgYHN0ZW1WZWN0b3JgLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNYXR0ZXJ0YWdEZXNjcmlwdG9yIHtcbiAgICBhbmNob3JQb3NpdGlvbjogVmVjdG9yMztcbiAgICBzdGVtVmVjdG9yOiBWZWN0b3IzO1xuICAgIHN0ZW1WaXNpYmxlPzogYm9vbGVhbjtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICBtZWRpYT86IHtcbiAgICAgIHR5cGU6IE1lZGlhVHlwZTtcbiAgICAgIHNyYzogc3RyaW5nO1xuICAgIH1cbiAgICBjb2xvcj86IENvbG9yO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tmbG9vckluZGV4XV0gaW5zdGVhZCAqL1xuICAgIGZsb29ySWQ/OiBudW1iZXI7XG4gICAgZmxvb3JJbmRleD86IG51bWJlcjtcbiAgICBpY29uSWQ/OiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBFZGl0YWJsZVByb3BlcnRpZXMgPSB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIG1lZGlhOiB7XG4gICAgICB0eXBlOiBNZWRpYVR5cGU7XG4gICAgICBzcmM6IHN0cmluZztcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbk9wdGlvbnMge1xuICAgIGFuY2hvclBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHN0ZW1WZWN0b3I6IFZlY3RvcjM7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2Zsb29ySW5kZXhdXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJZDogbnVtYmVyO1xuICAgIGZsb29ySW5kZXg6IG51bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hdHRlcnRhZyB7XG4gIFRyYW5zaXRpb246IHR5cGVvZiBNYXR0ZXJ0YWcuVHJhbnNpdGlvbjtcbiAgTGlua1R5cGU6IHR5cGVvZiBNYXR0ZXJ0YWcuTGlua1R5cGU7XG4gIERlc2NyaXB0aW9uQ2h1bmtUeXBlOiB0eXBlb2YgTWF0dGVydGFnLkRlc2NyaXB0aW9uQ2h1bmtUeXBlO1xuICBFdmVudDogdHlwZW9mIE1hdHRlcnRhZy5FdmVudDtcbiAgTWVkaWFUeXBlOiB0eXBlb2YgTWF0dGVydGFnLk1lZGlhVHlwZTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIG1ldGFkYXRhIG9uIHRoZSBjb2xsZWN0aW9uIG9mIE1hdHRlcnRhZ3MuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5kYXRhXV0gaW5zdGVhZFxuICAgKi9cbiAgZ2V0RGF0YSgpOiBQcm9taXNlPE1hdHRlcnRhZy5NYXR0ZXJ0YWdEYXRhW10+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gb2YgTWF0dGVydGFnIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmRhdGFdXSBpbnN0ZWFkXG4gICAqL1xuICBkYXRhOiBJT2JzZXJ2YWJsZU1hcDxNYXR0ZXJ0YWcuT2JzZXJ2YWJsZU1hdHRlcnRhZ0RhdGE+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG5hdmlnYXRlcyB0byB0aGUgTWF0dGVydGFnIGRpc2Mgd2l0aCB0aGUgcHJvdmlkZWQgc2lkLCBvcGVuaW5nIHRoZSBiaWxsYm9hcmQgb24gYXJyaXZhbC5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLk1hdHRlcnRhZy5uYXZpZ2F0ZVRvVGFnKHNpZCwgbXBTZGsuTWF0dGVydGFnLlRyYW5zaXRpb24uRkxZKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIG5hdmlnYXRlIHRvXG4gICAqIEBwYXJhbSB0cmFuc2l0aW9uIFRoZSB0eXBlIG9mIHRyYW5zaXRpb24gdG8gbmF2aWdhdGUgdG8gYSBzd2VlcCB3aGVyZSB0aGUgTWF0dGVydGFnIGRpc2MgaXMgdmlzaWJsZVxuICAgKiBAcGFyYW0gZm9yY2UgSWYgbmF2aWdhdGluZyB0byB0aGUgdGFnIGlzIGRpc2FibGVkLCBwYXNzaW5nIGZvcmNlID09PSB0cnVlIHdpbGwgZm9yY2UgdGhlIHRyYW5zaXRpb24gdG8gb2NjdXJcbiAgICovXG4gIG5hdmlnYXRlVG9UYWcodGFnU2lkOiBzdHJpbmcsIHRyYW5zaXRpb246IE1hdHRlcnRhZy5UcmFuc2l0aW9uLCBmb3JjZT86IGJvb2xlYW4pOiBQcm9taXNlPHN0cmluZz47XG5cbiAvKipcbiAgICogR2V0IHRoZSBkaXNjJ3MgKDNkKSBwb3NpdGlvbiBvZiBhIE1hdHRlcnRhZy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGlzYyBwb3NpdGlvbiBpcyBhdXRvbWF0aWFsbHkgaW5jbHVkZWQgaW4gW1tUYWcuZGF0YV1dXG4gICAqL1xuICBnZXREaXNjUG9zaXRpb24odGFnOiBNYXR0ZXJ0YWcuTWF0dGVydGFnRGF0YSB8IE1hdHRlcnRhZy5PYnNlcnZhYmxlTWF0dGVydGFnRGF0YSwgcmVzdWx0PzogVmVjdG9yMyk6IFZlY3RvcjM7XG5cbiAgLyoqXG4gICAqIEFkZCBvbmUgb3IgbW9yZSBNYXR0ZXJ0YWdzIHRvIFNob3djYXNlLlxuICAgKiBFYWNoIGlucHV0IE1hdHRlcnRhZyBzdXBwb3J0cyBzZXR0aW5nIHRoZSBsYWJlbCwgZGVzY3JpcHRpb24sIGNvbG9yLCBhbmNob3JQb3NpdGlvbiwgYW5kIHN0ZW1WZWN0b3IuXG4gICAqXG4gICAqIFR3byBwcm9wZXJ0aWVzIGFyZSByZXF1aXJlZDpcbiAgICogLSBgYW5jaG9yUG9zaXRpb25gLCB0aGUgcG9pbnQgd2hlcmUgdGhlIHRhZyBjb25uZWN0cyB0byB0aGUgbW9kZWxcbiAgICogLSBgc3RlbVZlY3RvcmAsIHRoZSBkaXJlY3Rpb24sIGFrYSBub3JtYWwsIGFuZCBoZWlnaHQgdGhhdCB0aGUgTWF0dGVydGFnIHN0ZW0gcG9pbnRzXG4gICAqXG4gICAqIFNlZSBbW1BvaW50ZXIuaW50ZXJzZWN0aW9uXV0gZm9yIGEgd2F5IHRvIHJldHJpdmUgYSBuZXcgYGFuY2hvclBvc2l0aW9uYCBhbmQgYHN0ZW1WZWN0b3JgLlxuICAgKlxuICAgKiAqKk5vdGUqKjogdGhlc2UgY2hhbmdlcyBhcmUgbm90IHBlcnNpc3RlZCBiZXR3ZWVuIHJlZnJlc2hlcyBvZiBTaG93Y2FzZS4gVGhleSBhcmUgb25seSB2YWxpZCBmb3IgdGhlIGN1cnJlbnQgYnJvd3NlciBzZXNzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3VGFnRGF0YSBBIHNpbmdsZSBvciBhcnJheSBvZiBNYXR0ZXJ0YWcgdGVtcGxhdGVzIHRvIGFkZC5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBzaWRzIGZvciB0aGUgbmV3bHkgYWRkZWQgTWF0dGVydGFncy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmFkZF1dIGluc3RlYWRcbiAgICovXG4gIGFkZChuZXdUYWdEYXRhOiBNYXR0ZXJ0YWcuTWF0dGVydGFnRGVzY3JpcHRvciB8IE1hdHRlcnRhZy5NYXR0ZXJ0YWdEZXNjcmlwdG9yW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICAvKipcbiAgICogRWRpdCB0aGUgZGF0YSBpbiBhIE1hdHRlcnRhZyBiaWxsYm9hcmQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgdGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgQSBkaWN0aW9uYXJ5IG9mIHByb3BlcnRpZXMgdG8gc2V0XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5lZGl0QmlsbGJvYXJkXV0gb3IgW1tUYWcucmVnaXN0ZXJBdHRhY2htZW50XV0gYW5kL29yIFtbVGFnLmF0dGFjaF1dIHRvIG1hbmFnZSBtZWRpYVxuICAgKi9cbiAgZWRpdEJpbGxib2FyZCh0YWdTaWQ6IHN0cmluZywgcHJvcGVydGllczogUGFydGlhbDxNYXR0ZXJ0YWcuRWRpdGFibGVQcm9wZXJ0aWVzPik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIE1vdmUgYW5kIHJlb3JpZW50IGEgTWF0dGVydGFnLlxuICAgKlxuICAgKiBTZWUgW1tQb2ludGVyLmludGVyc2VjdGlvbl1dIGZvciBhIHdheSB0byByZXRyaWV2ZSBhIG5ldyBgYW5jaG9yUG9zaXRpb25gIGFuZCBgc3RlbVZlY3RvcmAuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIHJlcG9zaXRpb25cbiAgICogQHBhcmFtIG1vdmVPcHRpb25zIFRoZSBuZXcgYW5jaG9yUG9zaXRpb24sIHN0ZW1WZWN0b3IgYW5kL29yIGZsb29ySWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5lZGl0UG9zaXRpb25dXSBpbnN0ZWFkXG4gICAqL1xuICBlZGl0UG9zaXRpb24odGFnU2lkOiBzdHJpbmcsIG1vdmVPcHRpb25zOiBQYXJ0aWFsPE1hdHRlcnRhZy5Qb3NpdGlvbk9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogRWRpdCB0aGUgY29sb3Igb2YgYSBNYXR0ZXJ0YWdcbiAgICpcbiAgICogQHBhcmFtIHRhZ1NpZCBUaGUgc2lkIG9mIHRoZSBNYXR0ZXJ0YWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gY29sb3IgVGhlIG5ldyBjb2xvciB0byBiZSBhcHBsaWVkIHRvIHRoZSBNYXR0ZXJ0YWcgZGlzY1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcuZWRpdENvbG9yXV0gaW5zdGVhZFxuICAgKi9cbiAgZWRpdENvbG9yKHRhZ1NpZDogc3RyaW5nLCBjb2xvcjogQ29sb3IpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBvcGFjaXR5IG9mIGEgTWF0dGVydGFnXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIG9wYWNpdHkgVGhlIHRhcmdldCBvcGFjaXR5IGZvciB0aGUgTWF0dGVydGFnIGluIHRoZSByYW5nZSBvZiBbMCwgMV1cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmVkaXRPcGFjaXR5XV0gaW5zdGVhZFxuICAgKi9cbiAgIGVkaXRPcGFjaXR5KHRhZ1NpZDogc3RyaW5nLCBvcGFjaXR5OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBzdGVtIG9mIGEgTWF0dGVydGFnXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIHN0ZW1PcHRpb25zIFdoYXQgdG8gY2hhbmdlIGFib3V0IHRoZSBNYXR0ZXJ0YWcncyBzdGVtIC0gY2FuIGluY2x1ZGUgc3RlbUhlaWdodCBhbmQgc3RlbVZpc2libGVcbiAgICogQGludHJvZHVjZWQgMy4xLjcwLjEwLTAtZ2U5Y2I4M2IyOGNcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmVkaXRTdGVtXV0gaW5zdGVhZFxuICAgKi9cbiAgZWRpdFN0ZW0odGFnU2lkOiBzdHJpbmcsIG9wdGlvbnM6IHtzdGVtSGVpZ2h0PzogbnVtYmVyLCBzdGVtVmlzaWJsZT86IGJvb2xlYW59KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gaWNvbiB0byB1c2Ugd2l0aCBzdWJzZXF1ZW50IFtbTWF0dGVydGFnLmVkaXRJY29uXV0gY2FsbHMuXG4gICAqXG4gICAqICoqTm90ZSoqOiBJdCBpcyByZWNvbW1lbmRlZCB0byBob3N0IHlvdXIgb3duIGltYWdlcyB0byBtaXRpZ2F0ZSBjcm9zcyBvcmlnaW4gbGltaXRhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBpY29uSWQgQSB1c2VyIHNwZWNpZmllZCBzdHJpbmcgdG8gdXNlIGFzIGEgbG9va3VwIG9mIHRoaXMgaWNvblxuICAgKiBAcGFyYW0gaWNvblNyYyBUaGUgc3JjIG9mIHRoZSBpY29uLCBsaWtlIHRoZSBzcmMgb2YgYW4gXFw8aW1nPlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tBc3NldC5yZWdpc3RlclRleHR1cmVdXSBpbnN0ZWFkXG4gICAqL1xuICByZWdpc3Rlckljb24oaWNvbklkOiBzdHJpbmcsIGljb25TcmM6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgaWNvbiBvZiB0aGUgTWF0dGVydGFnIGRpc2NcbiAgICpcbiAgICogKipOb3RlKio6IHRoZXNlIGNoYW5nZXMgYXJlIG5vdCBwZXJzaXN0ZWQgYmV0d2VlbiByZWZyZXNoZXMgb2YgU2hvd2Nhc2UuIFRoZXkgYXJlIG9ubHkgdmFsaWQgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIgc2Vzc2lvbi5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHRhZ1NpZCBUaGUgc2lkIG9mIHRoZSBNYXR0ZXJ0YWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gaWNvbklkIFRoZSBpZCBvZiB0aGUgaWNvbiB0byBhcHBseVxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqXG4gICAqIFdhcm5zIGlmIHRoZSBwcm92aWRlZCBgaWNvblNyY2AgaXMgYW4gLnN2ZyBmaWxlIHdoaWNoIGRvZXNuJ3QgaGF2ZSBhIGAnd2lkdGgnYCBvciBgJ2hlaWdodCdgIGF0dHJpYnV0ZS5cbiAgICogRGVmYXVsdHMgdG8gYSByZXNvbHV0aW9uIG9mIDEyOHgxMjggaWYgbmVpdGhlciBleGlzdC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmVkaXRJY29uXV0gaW5zdGVhZFxuICAgKi9cbiAgZWRpdEljb24odGFnU2lkOiBzdHJpbmcsIGljb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpY29uIG9mIHRoZSBNYXR0ZXJ0YWcgZGlzYyBiYWNrIHRvIGl0cyBvcmlnaW5hbCBpY29uLlxuICAgKlxuICAgKiBAcGFyYW0gdGFnU2lkIFRoZSBzaWQgb2YgdGhlIE1hdHRlcnRhZyB0byByZXNldFxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcucmVzZXRJY29uXV0gaW5zdGVhZFxuICAgKi9cbiAgcmVzZXRJY29uKHRhZ1NpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVtb3ZlcyBvbmUgb3IgbW9yZSBNYXR0ZXJ0YWdzIGZyb20gU2hvd2Nhc2UuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWRzIEEgc2luZ2xlIE1hdHRlcnRhZyBzaWQgb3IgYXJyYXkgb2YgTWF0dGVydGFnIHNpZHMgdG8gcmVtb3ZlLlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB3aXRoIGFuIGFycmF5IG9mIE1hdHRlcnRhZyBzaWRzIHRoYXQgd2VyZSBhY3R1YWxseSByZW1vdmVkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcucmVtb3ZlXV0gaW5zdGVhZFxuICAgKi9cbiAgcmVtb3ZlKHRhZ1NpZHM6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgLyoqXG4gICAqIFByZXZlbnRzIHRoZSBcImRlZmF1bHRcIiBTaG93Y2FzZSBhY3Rpb24gb24gYSBNYXR0ZXJ0YWcgZnJvbSBvY2N1cnJpbmc6IGhvdmVyIHRvIG9wZW4gYmlsbGJvYXJkLCBjbGljayB0byBuYXZpZ2F0ZSB0byB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gdGFnU2lkIFRoZSBzaWQgb2YgdGhlIE1hdHRlcnRhZyB0byByZW1vdmUgYWN0aW9ucyBmcm9tXG4gICAqIEBwYXJhbSBhY3Rpb25zIFRoZSBzZXQgb2YgYWN0aW9ucyB0byBwcmV2ZW50XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5hbGxvd0FjdGlvbl1dIGluc3RlYWRcbiAgICovXG4gIHByZXZlbnRBY3Rpb24odGFnU2lkOiBzdHJpbmcsIGFjdGlvbnM6IFBhcnRpYWw8TWF0dGVydGFnLlByZXZlbnRhYmxlQWN0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gZnJhbWUgdGhhdCBjYW4gaG9zdCBjdXN0b20gSFRNTCBhbmQgSmF2YVNjcmlwdCwgYW5kIGNvbW11bmljYXRlIGJpLWRpcmVjdGlvbmFsbHkgd2l0aCB5b3VyIHBhZ2UuXG4gICAqXG4gICAqIFRoZSBmcmFtZSB0aGF0IGNvbnRhaW5zIHlvdXIgY3VzdG9tIGNvZGUgd2lsbCBoYXZlIGNlcnRhaW4gbGltaXRhdGlvbnMgZHVlIHRvIGJlaW5nIHNhbmRib3hlZCBieSB0aGUgYHNhbmRib3g9J2FsbG93LXNjcmlwdHNgIGF0dHJpYnV0ZS5cbiAgICogQXR0ZW1wdGluZyB0byBhY2Nlc3MgcHJvcGVydGllcyBvZiBvdGhlciB3aW5kb3dzIHdpbGwgYWxzbyBiZSBibG9ja2VkIGJ5IHRoZSBicm93c2VyLlxuICAgKiAoW3NlZSB0aGUgTUROIHBhZ2VzIGFib3V0IGlmcmFtZSBzYW5kYm94XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaWZyYW1lKSlcbiAgICpcbiAgICogQ3VycmVudGx5LCB0aGUgSFRNTCBDQU4gT05MWSBCRSBTRVQgT05DRSBieSBhIGNhbGwgdG8gYGluamVjdEhUTUxgLiBUaGlzIGluY2x1ZGVzIHJlbW92aW5nIG9yIGNsZWFyaW5nIHRoZSBIVE1MLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcucmVnaXN0ZXJTYW5kYm94XV0gYW5kIFtbVGFnLmF0dGFjaF1dIGluc3RlYWRcbiAgICovXG4gIGluamVjdEhUTUwodGFnU2lkOiBzdHJpbmcsIGh0bWw6IHN0cmluZywgb3B0aW9uczogTWF0dGVydGFnLkluamVjdGlvbk9wdGlvbnMpOiBQcm9taXNlPE1hdHRlcnRhZy5JTWVzc2VuZ2VyPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUsIFJvdGF0aW9uLCBWZWN0b3IzIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1vZGUge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZXhwb3J0IGVudW0gTW9kZSB7XG4gICAgSU5TSURFID0gJ21vZGUuaW5zaWRlJyxcbiAgICBPVVRTSURFID0gJ21vZGUub3V0c2lkZScsXG4gICAgRE9MTEhPVVNFID0gJ21vZGUuZG9sbGhvdXNlJyxcbiAgICBGTE9PUlBMQU4gPSAnbW9kZS5mbG9vcnBsYW4nLFxuICAgIFRSQU5TSVRJT05JTkcgPSAnbW9kZS50cmFuc2l0aW9uaW5nJyxcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgQ0hBTkdFX1NUQVJUID0gJ3ZpZXdtb2RlLmNoYW5nZXN0YXJ0JyxcbiAgICAvKiogQGV2ZW50ICovXG4gICAgQ0hBTkdFX0VORCA9ICd2aWV3bW9kZS5jaGFuZ2VlbmQnLFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgVHJhbnNpdGlvbkRhdGEgPSB7XG4gICAgZnJvbTogTW9kZSB8IG51bGw7XG4gICAgdG86IE1vZGUgfCBudWxsO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIFRyYW5zaXRpb25UeXBlIHtcbiAgICBJTlNUQU5UID0gJ3RyYW5zaXRpb24uaW5zdGFudCcsXG4gICAgRkxZID0gJ3RyYW5zaXRpb24uZmx5JyxcbiAgICBGQURFT1VUID0gJ3RyYW5zaXRpb24uZmFkZScsXG4gIH1cblxuICBleHBvcnQgdHlwZSBNb3ZlVG9Nb2RlT3B0aW9ucyA9IHtcbiAgICByb3RhdGlvbj86IFJvdGF0aW9uO1xuICAgIHBvc2l0aW9uPzogVmVjdG9yMztcbiAgICB0cmFuc2l0aW9uPzogVHJhbnNpdGlvblR5cGU7XG4gICAgem9vbT86IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBDdXJyZW50Vmlld21vZGVEYXRhID0gTW9kZSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZSB7XG4gIE1vZGU6IHR5cGVvZiBNb2RlLk1vZGU7XG4gIEV2ZW50OiB0eXBlb2YgTW9kZS5FdmVudDtcbiAgVHJhbnNpdGlvblR5cGU6IHR5cGVvZiBNb2RlLlRyYW5zaXRpb25UeXBlO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2aWV3IG1vZGUuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Nb2RlLmN1cnJlbnQuc3Vic2NyaWJlKGZ1bmN0aW9uIChtb2RlKSB7XG4gICAqICAgLy8gdGhlIHZpZXcgbW9kZSBoYXMgY2hhbmdlZFxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHZpZXcgbW9kZSBpcyBpcyAnLCBtb2RlKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgY3VycmVudDogSU9ic2VydmFibGU8TW9kZS5Nb2RlIHwgbnVsbD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgdmlld2luZyBtb2RlIGluIDNEIFNob3djYXNlLlxuICAgKlxuICAgKmBgYFxuICAgKiBjb25zdCBtb2RlID0gbXBTZGsuTW9kZS5Nb2RlLkZMT09SUExBTjtcbiAgICogY29uc3QgcG9zaXRpb24gPSB7eDogMCwgeTogMCwgejogMH07XG4gICAqIGNvbnN0IHJvdGF0aW9uID0ge3g6IC05MCwgeTogMH07XG4gICAqIGNvbnN0IHRyYW5zaXRpb24gPSBtcFNkay5Nb2RlLlRyYW5zaXRpb25UeXBlLkZMWTtcbiAgICogY29uc3Qgem9vbSA9IDU7XG4gICAqXG4gICAqIG1wU2RrLk1vZGUubW92ZVRvKG1vZGUsIHtcbiAgICogICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICogICAgIHJvdGF0aW9uOiByb3RhdGlvbixcbiAgICogICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAqICAgICB6b29tLFxuICAgKiAgIH0pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24obmV4dE1vZGUpe1xuICAgKiAgICAgLy8gTW92ZSBzdWNjZXNzZnVsLlxuICAgKiAgICAgY29uc29sZS5sb2coJ0Fycml2ZWQgYXQgbmV3IHZpZXcgbW9kZSAnICsgbmV4dE1vZGUpO1xuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcbiAgICogICAgIC8vIEVycm9yIHdpdGggbW92ZVRvIGNvbW1hbmRcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIE5vdGVzIGFib3V0IHRyYW5zaXRpb25zIHRvIEZsb29ycGxhbiBtb2RlOlxuICAgKiAqIGB6b29tYCBvcHRpb24gaXMgb25seSB0YWtlbiBpbnRvIGFjY291bnQgaW4gRmxvb3JwbGFuIHRyYW5zaXRpb25zLCB0aGUgbG93ZXIgdGhlIG51bWJlcixcbiAgICogICB0aGUgZnVydGhlciB0aGUgY2FtZXJhIGlzIHpvb21lZCBpblxuICAgKiAqIFRoZSBwb3NpdGlvbiBvZiBhIGZsb29ycGxhbiB2aWV3IGlzIGRldGVybWluZWQgYnkgdGhlIFggYW5kIFogYXJndW1lbnRzIG9mIHRoZSBvcHRpb25hbCBwb3NpdGlvbiBvYmplY3QuXG4gICAqICogVGhlIHJvdGF0aW9uIG9mIGEgZmxvb3JwbGFuIHZpZXcgaXMgZGV0ZXJtaW5lZCBieSB0aGUgWCBhbmQgWSBvZiB0aGUgb3B0aW9uYWwgcm90YXRpb24gb2JqZWN0LFxuICAgKiAgIGNoYW5naW5nIFggY2hhbmdlcyB0aGUgJ3JvbGwnIG9mIHRoZSB2aWV3LCBzaW1pbGFyIHRvIGhpdHRpbmcgdGhlIExFRlQvUklHSFQgYXJyb3cga2V5cyBpbiBTaG93Y2FzZVxuICAgKiAgIGZsb29ycGxhbiB2aWV3LCBjaGFuZ2luZyB0aGUgWSB2YWx1ZSBoYXMgbm8gYW5hbG9nIGluIHNob3djYXNlLCBidXQgY2hhbmdlcyB0aGUgJ3RpbHQnIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gVGhlIG1vZGUuXG4gICAqIEBwYXJhbSBPcHRpb25zIG9iamVjdCwgY29udGFpbmluZyBvcHRpb25hbCBwb3NpdGlvbiwgcm90YXRpb24sIHRyYW5zaXRpb24gdHlwZVxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIG5ldyBtb2RlIG9uY2UgdGhlIG1vZGUgaGFzIHRyYW5zaXRpb25lZC5cbiAgICovXG4gIG1vdmVUbyhtb2RlOiBNb2RlLk1vZGUsIG9wdGlvbnM/OiBNb2RlLk1vdmVUb01vZGVPcHRpb25zKTogUHJvbWlzZTxNb2RlLk1vZGU+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIHRyYW5zaXRpb24gb2YgdGhlIGN1cnJlbnQgdmlld21vZGUuIGBmcm9tYCBhbmQgYHRvYCB3aWxsIGJlIG51bGxcbiAgICogaWYgdGhlcmUgaXMgbm8gYWN0aXZlIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Nb2RlLnRyYW5zaXRpb24uc3Vic2NyaWJlKGZ1bmN0aW9uICh0cmFuc2l0aW9uKSB7XG4gICAqICAgLy8gdGhlIHRyYW5zaXRpb24gaGFzIGNoYW5nZWRcbiAgICogICBjb25zb2xlLmxvZyh0cmFuc2l0aW9uLmZyb20sIHRyYW5zaXRpb24udG8sIHRyYW5zaXRpb24ucHJvZ3Jlc3MpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICB0cmFuc2l0aW9uOiBJT2JzZXJ2YWJsZTxNb2RlLlRyYW5zaXRpb25EYXRhPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgU3dlZXAgfSBmcm9tICcuL3N3ZWVwJztcblxuZXhwb3J0IG5hbWVzcGFjZSBNb2RlbCB7XG4gIGV4cG9ydCB0eXBlIE1vZGVsRGF0YSA9IHtcbiAgICBzaWQ6IHN0cmluZztcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbU3dlZXAuZGF0YV1dIGluc3RlYWQgKi9cbiAgICBzd2VlcHM6IFN3ZWVwLlN3ZWVwRGF0YVtdO1xuICAgIG1vZGVsU3VwcG9ydHNWcjogYm9vbGVhbjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBNb2RlbERldGFpbHMgPSB7XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBwcmVzZW50ZWRCeT86IHN0cmluZztcbiAgICBzdW1tYXJ5Pzogc3RyaW5nO1xuICAgIGFkZHJlc3M/OiBzdHJpbmc7XG4gICAgZm9ybWF0dGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBjb250YWN0RW1haWw/OiBzdHJpbmc7XG4gICAgY29udGFjdE5hbWU/OiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gICAgZm9ybWF0dGVkQ29udGFjdFBob25lPzogc3RyaW5nO1xuICAgIHNoYXJlVXJsPzogc3RyaW5nO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgTU9ERUxfTE9BREVEID0gJ21vZGVsLmxvYWRlZCcsXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbCB7XG4gIEV2ZW50OiB0eXBlb2YgTW9kZWwuRXZlbnQ7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYmFzaWMgbW9kZWwgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIFRoaXMgaXMgbm8gbG9uZ2VyIHRoZSBjYW5vbmljYWwgd2F5IHRvIHJlY2VpdmUgc3dlZXAgaW5mb3JtYXRpb24uIFNlZSBbW1N3ZWVwLmRhdGFdXS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLk1vZGVsLmdldERhdGEoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAqICAgICAvLyBNb2RlbCBkYXRhIHJldHJlaXZhbCBjb21wbGV0ZS5cbiAgICogICAgIGNvbnNvbGUubG9nKCdNb2RlbCBzaWQ6JyArIG1vZGVsLnNpZCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIE1vZGVsIGRhdGEgcmV0cmlldmFsIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldERhdGEoKTogUHJvbWlzZTxNb2RlbC5Nb2RlbERhdGE+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgbW9kZWwgZGV0YWlscy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLk1vZGVsLmdldERldGFpbHMoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKG1vZGVsRGV0YWlscykge1xuICAgKiAgICAgLy8gTW9kZWwgZGV0YWlscyByZXRyZWl2YWwgY29tcGxldGUuXG4gICAqICAgICBjb25zb2xlLmxvZygnTW9kZWwgc2lkOicgKyBtb2RlbERldGFpbHMuc2lkKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdNb2RlbCBuYW1lOicgKyBtb2RlbERldGFpbHMubmFtZSk7XG4gICAqICAgICBjb25zb2xlLmxvZygnTW9kZWwgc3VtbWFyeTonICsgbW9kZWxEZXRhaWxzLnN1bW1hcnkpO1xuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBNb2RlbCBkZXRhaWxzIHJldHJpZXZhbCBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuICBnZXREZXRhaWxzKCk6IFByb21pc2U8TW9kZWwuTW9kZWxEZXRhaWxzPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUsIFZlY3RvcjMgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUG9pbnRlciB7XG4gIGV4cG9ydCB0eXBlIEludGVyc2VjdGlvbiA9IHtcbiAgICBwb3NpdGlvbjogVmVjdG9yMztcbiAgICBub3JtYWw6IFZlY3RvcjM7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2Zsb29ySW5kZXhdXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIGZsb29ySW5kZXggaXMgb25seSBkZWZpbmVkIHdoZW4gdGhlIGludGVyc2VjdGVkIG9iamVjdCBpcyBNT0RFTC5cbiAgICAgKi9cbiAgICBmbG9vckluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgb2JqZWN0OiBDb2xsaWRlcnM7XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gQ29sbGlkZXJzIHtcbiAgICBOT05FID0gJ2ludGVyc2VjdGVkb2JqZWN0Lm5vbmUnLFxuICAgIE1PREVMID0gJ2ludGVyc2VjdGVkb2JqZWN0Lm1vZGVsJyxcbiAgICBUQUcgPSAnaW50ZXJzZWN0ZWRvYmplY3QudGFnJyxcbiAgICBTV0VFUCA9ICdpbnRlcnNlY3RlZG9iamVjdC5zd2VlcCcsXG4gICAgVU5LTk9XTiA9ICdpbnRlcnNlY3RlZG9iamVjdC51bmtub3duJyxcbiAgfVxuXG4gIHR5cGUgRmFkZU91dFByb3BzID0ge1xuICAgIC8qKlxuICAgICAqIER1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdCBpcyA3MDAuXG4gICAgICovXG4gICAgZHVyYXRpb24/OiBudW1iZXIsXG5cbiAgICAvKipcbiAgICAgKiBEZWxheSBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHQgaXMgNzAwLlxuICAgICAqL1xuICAgIGRlbGF5PzogbnVtYmVyLFxuICB9O1xuXG4gIHR5cGUgRmFkZUluUHJvcHMgPSB7XG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0IGlzIDMwMC5cbiAgICAgKi9cbiAgICBkdXJhdGlvbj86IG51bWJlcixcbiAgfTtcblxuICAvKipcbiAgICogUG9pbnRlciByZXRpY2xlIGZhZGUgcHJvcGVydGllcy5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEZhZGVQcm9wcyA9IHtcbiAgICBmYWRlT3V0PzogRmFkZU91dFByb3BzO1xuICAgIGZhZGVJbj86IEZhZGVJblByb3BzO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50ZXIge1xuICBDb2xsaWRlcnM6IHR5cGVvZiBQb2ludGVyLkNvbGxpZGVycztcbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgaW50ZXJzZWN0aW9uIGRhdGEgb2JqZWN0IHRoYXQgY2FuIGJlIHN1YnNjcmliZWQgdG8uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Qb2ludGVyLmludGVyc2VjdGlvbi5zdWJzY3JpYmUoZnVuY3Rpb24gKGludGVyc2VjdGlvbkRhdGEpIHtcbiAgICogIC8vIENoYW5nZXMgdG8gdGhlIGludGVyc2VjdGlvbiBkYXRhIGhhdmUgb2NjdXJyZWQuXG4gICAqICBjb25zb2xlLmxvZygnSW50ZXJzZWN0aW9uIHBvc2l0aW9uOicsIGludGVyc2VjdGlvbkRhdGEucG9zaXRpb24pO1xuICAgKiAgY29uc29sZS5sb2coJ0ludGVyc2VjdGlvbiBub3JtYWw6JywgaW50ZXJzZWN0aW9uRGF0YS5ub3JtYWwpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBpbnRlcnNlY3Rpb246IElPYnNlcnZhYmxlPFBvaW50ZXIuSW50ZXJzZWN0aW9uPjtcblxuICAvKipcbiAgICogQGludHJvZHVjZWQgMy4xLjU1LjItMzQtZ2E5OTM0Y2NkOTNcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbQXNzZXQucmVnaXN0ZXJUZXh0dXJlXV0gdG8gcmVnaXN0ZXIgbmV3IHRleHR1cmVzIGluc3RlYWQuXG4gICAqL1xuICByZWdpc3RlclRleHR1cmUodGV4dHVyZUlkOiBzdHJpbmcsIHRleHR1cmVTcmM6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgdGV4dHVyZSBvZiB0aGUgcG9pbnRlciByZXRpY2xlLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGF3YWl0IG1wU2RrLkFzc2V0LnJlZ2lzdGVyVGV4dHVyZSgnY3VzdG9tVGV4dHVyZUlkJywgJ2h0dHBzOi8vW2xpbmsudG8vaW1hZ2VdJyk7XG4gICAqXG4gICAqIC8vIGNoYW5nZSB0aGUgdGV4dHVyZSBvZiB0aGUgcG9pbnRlciByZXRpY2xlIHVzaW5nIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIGlkLlxuICAgKiBhd2FpdCBtcFNkay5Qb2ludGVyLmVkaXRUZXh0dXJlKCdjdXN0b21UZXh0dXJlSWQnKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0ZXh0dXJlSWQgVGhlIGlkIG9mIHRoZSB0ZXh0dXJlIHRvIGFwcGx5LlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNTUuMi0zNC1nYTk5MzRjY2Q5M1xuICAgKi9cbiAgZWRpdFRleHR1cmUodGV4dHVyZUlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIHBvaW50ZXIgcmV0aWNsZSB0ZXh0dXJlIHRvIHRoZSBvcmlnaW5hbCB0ZXh0dXJlLlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGF3YWl0IG1wU2RrLlBvaW50ZXIucmVzZXRUZXh0dXJlKCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNTUuMi0zNC1nYTk5MzRjY2Q5M1xuICAgKi9cbiAgcmVzZXRUZXh0dXJlKCk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZXMgdGhlIGZhZGUgaW4vb3V0IGJlaGF2aW9yIG9mIHRoZSBwb2ludGVyIHJldGljbGUuXG4gICAqIEBwYXJhbSBwcm9wcyBmYWNlIHByb3BlcnRpZXNcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjU1LjItMzQtZ2E5OTM0Y2NkOTNcbiAgICovXG4gIHNldEZhZGVQcm9wcyhwcm9wczogUG9pbnRlci5GYWRlUHJvcHMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNvbnRyb2xzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBwb2ludGVyIHJldGljbGUuXG4gICAqIEBwYXJhbSB2aXNpYmxlIHBvaW50ZXIgcmV0aWNsZSB2aXNpYmlsaXR5XG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS41NS4yLTM0LWdhOTkzNGNjZDkzXG4gICAqL1xuICBzZXRWaXNpYmxlKHZpc2libGU6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4iLCJpbXBvcnQgdHlwZSB7IERpY3Rpb25hcnksIElPYnNlcnZhYmxlLCBJT2JzZXJ2YWJsZU1hcCwgVmVjdG9yMyB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBSb29tIHtcbiAgZXhwb3J0IHR5cGUgUm9vbURhdGEgPSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBib3VuZHM6IHtcbiAgICAgIG1pbjogVmVjdG9yMztcbiAgICAgIG1heDogVmVjdG9yMztcbiAgICB9O1xuICAgIGZsb29ySW5mbzoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgfTtcbiAgICBzaXplOiBWZWN0b3IzO1xuICAgIGNlbnRlcjogVmVjdG9yMztcbiAgfTtcbiAgZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIENvbnZlcnNpb24ge1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgbWFwIGJldHdlZW4gdjIgSURzIGFuZCB2MSBJRHNcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgaGVscCB3aXRoIG1pZ3JhdGlvbiBiZXR3ZWVuIElEcyB1c2VkIGZvciByb29tcy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IG1hcHBpbmcgPSBhd2FpdCBtcFNkay5Sb29tLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnZlcnQ/OiBib29sZWFuIC0gaWYgcGFzc2VkLCByZXR1cm4gbWFwIG9mIHYxLT52MiBpbnN0ZWFkXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSWRNYXAoaW52ZXJ0PzogYm9vbGVhbik6IFByb21pc2U8RGljdGlvbmFyeTxzdHJpbmc+PjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvb20ge1xuICBDb252ZXJzaW9uOiB0eXBlb2YgUm9vbS5Db252ZXJzaW9uO1xuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSB0byBkZXRlcm1pbmUgd2hpY2ggcm9vbXMgdGhlIHBsYXllcidzIGNhbWVyYSBpcyBjdXJyZW50bHkgaW4uXG4gICAqXG4gICAqIElmIHRoZSBjYW1lcmEgaXMgaW4gYSBsb2NhdGlvbiBiZXR3ZWVuIHJvb21zLCBvciBzb21laHdlcmUgd2hlcmUgb3VyIHJvb20gYm91bmRzIG92ZXJsYXAsIHRoZSBgcm9vbXNgIGFycmF5IHdpbGwgY29udGFpbiBib3RoIChvciBtb3JlKSByb29tcy5cbiAgICogSWYgdGhlIGNhbWVyYSBpcyBpbiBhIG1vZGUgb3RoZXIgdGhhbiBgSU5TSURFYCwgdGhlIGByb29tc2AgYXJyYXkgbWF5IGJlIGVtcHR5LlxuICAgKiBJZiB0aGUgY2FtZXJhIGlzIGluIGFuIHVuYWxpZ25lZCBzd2VlcCwgdGhlIGByb29tc2AgYXJyYXkgd2lsbCBiZSBlbXB0eS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlJvb20uY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRSb29tcykge1xuICAgKiAgIGlmIChjdXJyZW50Um9vbXMucm9vbXMubGVuZ3RoID4gMCkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ2N1cnJlbnRseSBpbicsIGN1cnJlbnRSb29tcy5yb29tcy5sZW5ndGgsICdyb29tcycpO1xuICAgKiAgIH0gZWxzZSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnTm90IGN1cnJlbnRseSBpbnNpZGUgYW55IHJvb21zJyk7XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjdXJyZW50OiBJT2JzZXJ2YWJsZTx7IHJvb21zOiBSb29tLlJvb21EYXRhW10gfT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgY29sbGVjdGlvbiBvZiBSb29tIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogU2VlIFtbSU9ic2VydmFibGVNYXBdXSB0byBsZWFybiBob3cgdG8gcmVjZWl2ZSBkYXRhIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Sb29tLmRhdGEuc3Vic2NyaWJlKHtcbiAgICogICBvbkNvbGxlY3Rpb25VcGRhdGVkOiBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0NvbGxlY3Rpb24gcmVjZWl2ZWQuIFRoZXJlIGFyZSAnLCBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKS5sZW5ndGgsICdyb29tcyBpbiB0aGUgY29sbGVjdGlvbicpO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8Um9vbS5Sb29tRGF0YT47XG59XG4iLCJpbXBvcnQgdHlwZSB7IFZlY3RvcjMsIElTdWJzY3JpcHRpb24sIElPYnNlcnZhYmxlLCBPcmllbnRhdGlvbiwgSU9ic2VydmVyLCBPYnNlcnZlckNhbGxiYWNrIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG4vKipcbiAqIE91ciBTZW5zb3Igc3lzdGVtIGFsbG93cyBmb3IgZ2VuZXJhdGluZyBzcGF0aWFsIHF1ZXJpZXMgdG8gdW5kZXJzdGFuZCBhIE1hdHRlcnBvcnQgZGlnaXRhbCB0d2luLlxuICogQnkgdXRpbGl6aW5nIGFuZCBzZXR0aW5nIHVwIFNvdXJjZXMgYXJvdW5kIHRoZSBzY2VuZSwgc29tZSBxdWVzdGlvbnMgdGhhdCBjYW4gYmUgYW5zd2VyZWQgYXJlOlxuICogLSBcIndoYXQgdGhpbmdzIGFyZSBjdXJyZW50bHkgdmlzaWJsZSBvbiBzY3JlZW4/XCJcbiAqIC0gXCJ3aGF0IHRoaW5ncyBhcmUgbmVhciBtZT9cIlxuICpcbiAqIHdoZXJlIFwidGhpbmdzXCIgY2FuIGJlIE1hdHRlcnRhZyBwb3N0cywgc3dlZXBzLCBhcmJpdHJhcnkgbG9jYXRpb25zICh0aGF0IHlvdSBjaG9vc2UpLCBvciBhbnkgY29tYmluYXRpb24gb2YgdGhvc2UuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgU2Vuc29yIHtcbiAgZXhwb3J0IGVudW0gU2Vuc29yVHlwZSB7XG4gICAgQ0FNRVJBID0gJ3NlbnNvci5zZW5zb3J0eXBlLmNhbWVyYScsXG4gIH1cblxuICBleHBvcnQgZW51bSBTb3VyY2VUeXBlIHtcbiAgICBTUEhFUkUgICA9ICdzZW5zb3Iuc291cmNldHlwZS5zcGhlcmUnLFxuICAgIEJPWCAgICAgID0gJ3NlbnNvci5zb3VyY2V0eXBlLmJveCcsXG4gICAgQ1lMSU5ERVIgPSAnc2Vuc29yLnNvdXJjZXR5cGUuY3lsaW5kZXInLFxuICB9XG5cbiAgLyoqXG4gICAqIEEgU2Vuc29yIHRoYXQgZGV0ZWN0cyBTb3VyY2VzIGFuZCBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVhZGluZyBvZiBlYWNoLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJU2Vuc29yIGV4dGVuZHMgSU9ic2VydmFibGU8SVNlbnNvcj4ge1xuICAgIC8qKiBUaGUgd29ybGQtc3BhY2UgcG9zaXRpb24gb2YgdGhlIHNlbnNvci4gKi9cbiAgICBvcmlnaW46IFZlY3RvcjM7XG4gICAgLyoqIFRoZSB3b3JsZC1zcGFjZSBcImZvcndhcmRcIiBkaXJlY3Rpb24gZGVzY3JpYmluZyB3aGljaCBkaXJlY3Rpb24gdGhlIHNlbnNvciBpcyBmYWNpbmcuICovXG4gICAgZm9yd2FyZDogVmVjdG9yMztcbiAgICAvKipcbiAgICAgKiBBZGQgYSBzb3VyY2UsIHRvIGFkZCBpdHMgcmVhZGluZ3MgdG8gdGhlIHNldCBvZiByZWFkaW5ncyBwcm92aWRlZCBieSBgLnN1YnNjcmliZWAuXG4gICAgICogQHBhcmFtIHNvdXJjZXNcbiAgICAgKi9cbiAgICBhZGRTb3VyY2UoLi4uc291cmNlczogSVNvdXJjZVtdKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHJlY2VpdmluZyB1cGRhdGVzIHdoZW4gcHJvcGVydGllcyBvZiB0aGlzIHNlbnNvciBjaGFuZ2UsIGUuZy4gYG9yaWdpbmAgb3IgYGZvcndhcmRgLCBub3QgaXRzIGByZWFkaW5nc2AuPGJyPlxuICAgICAqIFN1YnNjcmliZSB0byBgcmVhZGluZ3NgIHRvIHJlY2VpdmUgdXBkYXRlcyBhYm91dCBhc3NvY2lhdGVkIGBJU291cmNlc2BcbiAgICAgKi9cbiAgICBzdWJzY3JpYmU8RGF0YVQ+KG9ic2VydmVyOiBJT2JzZXJ2ZXI8RGF0YVQ+IHwgT2JzZXJ2ZXJDYWxsYmFjazxEYXRhVD4pOiBJU3Vic2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JzZXJ2YWJsZSB1c2VkIHRvIGdldCBpbmZvcm1hdGlvbiBhYm91dCBhc3NvY2F0ZWQgYElTb3VyY2VzYCBhZGRlZCB3aXRoIFtbSVNlbnNvci5hZGRTb3VyY2VdXVxuICAgICAqL1xuICAgIHJlYWRpbmdzOiB7XG4gICAgICAvKipcbiAgICAgICAqIFN0YXJ0IHJlY2VpdmluZyB1cGRhdGVzIGFib3V0IHRoZSBjdXJyZW50IHNldCBvZiBzb3VyY2VzIGFkZGVkIHRvIHRoaXMgc2Vuc29yLlxuICAgICAgICogQHBhcmFtIG9ic2VydmVyXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZShvYnNlcnZlcjogSVNlbnNvck9ic2VydmVyKTogSVN1YnNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IGRlYnVnIHZpc3VhbHMgZm9yIHRoaXMgc2Vuc29yLiBFeGlzdGluZyB2aXN1YWxzIGFyZSBkaXNwb3NlZC5cbiAgICAgKiBAcGFyYW0gc2hvd1xuICAgICAqL1xuICAgIHNob3dEZWJ1ZyhzaG93OiBib29sZWFuKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRlYXJkb3duIGFuZCBjbGVhbnVwIHRoZSBzZW5zb3IsIGFuZCBzdG9wIHJlY2VpdmluZyB1cGRhdGVzLlxuICAgICAqL1xuICAgIGRpc3Bvc2UoKTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFNwaGVyZVZvbHVtZSA9IHtcbiAgICAvKiogVGhlIG9yaWdpbiBvZiB0aGUgc3BoZXJlLiAqL1xuICAgIG9yaWdpbjogVmVjdG9yMztcbiAgICAvKiogVGhlIGRpc3RhbmNlIGZyb20gb3JpZ2luIG9mIHRoZSBzcGhlcmUgdm9sdW1lLiAqL1xuICAgIHJhZGl1czogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEJveFZvbHVtZSA9IHtcbiAgICAvKiogVGhlIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgYm94LiAqL1xuICAgIGNlbnRlcjogVmVjdG9yMztcbiAgICAvKiogVGhlIGxlbmd0aCwgd2lkdGgsIGFuZCBkZXB0aCBvZiB0aGUgYm94IHZvbHVtZS4gKi9cbiAgICBzaXplOiBWZWN0b3IzO1xuICAgIC8qKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIGJveC4gVGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZCBpbiB5YXcsIHBpdGNoLCB0aGVuIHJvbGwgb3JkZXIuICovXG4gICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEN5bGluZGVyVm9sdW1lID0ge1xuICAgIC8qKiBUaGUgcG9pbnQgd2hpY2ggZGVmaW5lcyB0aGUgcG9zaXRpb24gKGJhc2UpIGZyb20gd2hpY2ggdGhlIGhlaWdodCBpbiB0aGUgK1ksIGFuZCByYWRpdXMgaW4gdGhlIFhaLXBsYW5lIGFyZSByZWxhdGl2ZSB0by4gKi9cbiAgICBiYXNlUG9pbnQ6IFZlY3RvcjM7XG4gICAgLyoqIFRoZSBoZWlnaHQgb2YgdGhlIGN5bGluZGVyLiAqL1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIC8qKiBUaGUgcmFkaXVzIG9mIHRoZSBjeWxpbmRlci4gKi9cbiAgICByYWRpdXM6IG51bWJlcjtcbiAgfTtcblxuICAvKipcbiAgICogQSBTb3VyY2UgcmVwcmVzZW50cyBhIHZvbHVtZSB0aGF0IHdpbGwgYmUgZGV0ZWN0ZWQgYnkgYSBTZW5zb3IuXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBzb3VyY2UsIGRlc2NyaWJlcyB0aGUgdHlwZSBvZiB2b2x1bWUgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICAgKiBGb3IgZXhhbXBsZSwgd2l0aCBhIGB0eXBlYCBvZiBgU291cmNlVHlwZS5TUEhFUkVgIHRoZSBgdm9sdW1lYCBpcyBhIGBTcGhlcmVWb2x1bWVgOyBhIGBTb3VyY2VUeXBlLkJPWGAgaGFzIGEgYEJveFZvbHVtZWAuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElTb3VyY2U8Vm9sdW1lID0gU3BoZXJlVm9sdW1lIHwgQm94Vm9sdW1lIHwgQ3lsaW5kZXJWb2x1bWUsIFVzZXJEYXRhIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ge1xuICAgIC8qKiBUaGUgdHlwZSBvZiBzb3VyY2UuICovXG4gICAgdHlwZTogU291cmNlVHlwZTtcbiAgICAvKiogVGhlIHZvbHVtZSB0aGF0IHJlcHJlc2VudHMgdGhlIHJhbmdlIG9mIGVtaXNzaW9ucyBmcm9tIHRoaXMgYElTb3VyY2VgLiAqL1xuICAgIHZvbHVtZTogVm9sdW1lO1xuICAgIC8qKiBBcmJpdHJhcnkgZGF0YSB0aGF0IGNhbiBiZSB1c2VkIHRvIHNldCBhZGRpdGlvbmFsIG1ldGFkYXRhLCBmb3IgZXhhbXBsZS4gKi9cbiAgICB1c2VyRGF0YTogVXNlckRhdGE7XG4gICAgLyoqXG4gICAgICogTGV0IHRoZSBzZW5zb3Igc3lzdGVtIGtub3cgdGhlcmUgaXMgYW4gdXBkYXRlIHRvIHRoaXMgYElTb3VyY2VgLjxicj5cbiAgICAgKiBXaGVuIGNoYW5naW5nIGFueSBwcm9wZXJ0aWVzIG9uIGB2b2x1bWVgLCBubyBjaGFuZ2VzIHdpbGwgYmUgcmVmbGVjdGVkIG9uIHRoZSBzb3VyY2Ugb3IgaW4gU2hvd2Nhc2UgdW50aWwgYGNvbW1pdGAgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGNvbW1pdCgpOiBQcm9taXNlPHZvaWQ+O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgW1tJTWFwT2JzZXJ2ZXJdXSB3aGljaCBtYXBzIGFuIGBJU291cmNlYCB0byBpdHMgY3VycmVudCBgU2Vuc29yUmVhZGluZ2AuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElTZW5zb3JPYnNlcnZlciB7XG4gICAgLyoqIENhbGxlZCB3aGVuIGEgdGhlIGZpcnN0IGByZWFkaW5nYCBpcyBhZGRlZCBmcm9tIGBzb3VyY2VgLiAqL1xuICAgIG9uQWRkZWQ/ICAoc291cmNlOiBJU291cmNlLCByZWFkaW5nOiBTZW5zb3JSZWFkaW5nLCBjb2xsZWN0aW9uOiBNYXA8SVNvdXJjZSwgU2Vuc29yUmVhZGluZz4pOiB2b2lkO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBgc291cmNlYCBhbmQgaXRzIGByZWFkaW5nYCBpcyByZW1vdmVkLiAqL1xuICAgIG9uUmVtb3ZlZD8oc291cmNlOiBJU291cmNlLCByZWFkaW5nOiBTZW5zb3JSZWFkaW5nLCBjb2xsZWN0aW9uOiBNYXA8SVNvdXJjZSwgU2Vuc29yUmVhZGluZz4pOiB2b2lkO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBhbiBleGlzdGluZyBgcmVhZGluZ2AgaXMgYWx0ZXJlZCBmcm9tIGBzb3VyY2VgLiAqL1xuICAgIG9uVXBkYXRlZD8oc291cmNlOiBJU291cmNlLCByZWFkaW5nOiBTZW5zb3JSZWFkaW5nLCBjb2xsZWN0aW9uOiBNYXA8SVNvdXJjZSwgU2Vuc29yUmVhZGluZz4pOiB2b2lkO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBhIHNldCBvZiBjaGFuZ2VzIGhhcHBlbnMgd2l0aGluIHRoZSBgY29sbGVjdGlvbmAuICovXG4gICAgb25Db2xsZWN0aW9uVXBkYXRlZD8oY29sbGVjdGlvbjogTWFwPElTb3VyY2UsIFNlbnNvclJlYWRpbmc+KTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgU291cmNlIGFzIHJlYWQgYnkgdGhlIFNlbnNvci5cbiAgICovXG4gIGV4cG9ydCB0eXBlIFNlbnNvclJlYWRpbmcgPSB7XG4gICAgLyoqIFRoZSBzZW5zb3IgaXMgY3VycmVudGx5IHdpdGhpbiB0aGUgYnJvYWRjYXN0IHJhbmdlIG9mIHRoZSBzb3VyY2UuICovXG4gICAgaW5SYW5nZTogYm9vbGVhbjtcbiAgICAvKiogVGhlIHNlbnNvciBpcyB3aXRoaW4gdGhlIHNvdXJjZSdzIGJyb2FkY2FzdCByYW5nZSBhbmQgdGhlIHNlbnNvciBoYXMgY2xlYXIgbGluZSBvZiBzaWdodCB0byB0aGUgc291cmNlLiAqL1xuICAgIGluVmlldzogYm9vbGVhbjtcbiAgICAvKiogVGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHNlbnNvciBhbmQgdGhlIHNvdXJjZS4gKi9cbiAgICBkaXN0YW5jZTogbnVtYmVyO1xuICAgIC8qKiBUaGUgc3F1YXJlZCBkaXN0YW5jZSBmcm9tIHRoZSBzZW5zb3IgdG8gdGhlIHNvdXJjZS4gKi9cbiAgICBkaXN0YW5jZVNxdWFyZWQ6IG51bWJlcjtcbiAgICAvKiogVGhlIHdvcmxkLXNwYWNlIGRpcmVjdGlvbiBmcm9tIHRoZSBzZW5zb3IgdG8gdGhlIHNvdXJjZS4gKi9cbiAgICBkaXJlY3Rpb246IFZlY3RvcjM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgYHVzZXJEYXRhYCB0byBhc3NvY2lhdGUgd2l0aCBhbiBgSVNvdXJjZWAgd2hlbiBjcmVhdGluZyBpdC5cbiAgICogVGhpcyBpcyBhIGZyZWUgZGljdGlvbmFyeSB0aGF0IGNhbiBjb250YWluIGFueSBrZXkvdmFsdWVzIGRlZW1lZCBuZWNlc3NhcnkuXG4gICAqL1xuICBleHBvcnQgdHlwZSBTb3VyY2VPcHRpb25zPFVzZXJEYXRhIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4gPSB7XG4gICAgdXNlckRhdGE6IFVzZXJEYXRhO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbnNvciB7XG4gIFNlbnNvclR5cGU6IHR5cGVvZiBTZW5zb3IuU2Vuc29yVHlwZTtcbiAgU291cmNlVHlwZTogdHlwZW9mIFNlbnNvci5Tb3VyY2VUeXBlO1xuICAvKipcbiAgICogQ3JlYXRlIGFuIFtbYElTZW5zb3JgXV0gd2hpY2ggY2FuIHNlbnNlIGFuZCBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IFtbYElTb3VyY2VgXV0uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3Qgc2Vuc29yID0gYXdhaXQgbXBTZGsuU2Vuc29yLmNyZWF0ZVNlbnNvcihtcFNkay5TZW5zb3IuU2Vuc29yVHlwZS5DQU1FUkEpO1xuICAgKiAvLyBhZGQgc291cmNlcyBmcm9tIGNhbGxzIHRvIGBTZW5zb3IuY3JlYXRlU291cmNlKClgXG4gICAqIHNlbnNvci5hZGRTb3VyY2UoLi4uc291cmNlcyk7XG4gICAqIC8vIHN0YXJ0IGxpc3RlbmluZyBmb3IgY2hhbmdlcyB0byB0aGUgc2Vuc29yJ3MgcmVhZGluZ3NcbiAgICogc2Vuc29yLnJlYWRpbmdzLnN1YnNjcmliZSh7XG4gICAqICAgb25BZGRlZChzb3VyY2UsIHJlYWRpbmcpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKHNvdXJjZS51c2VyRGF0YS5pZCwgJ2hhcyBhIHJlYWRpbmcgb2YnLCByZWFkaW5nKTtcbiAgICogICB9LFxuICAgKiAgIG9uVXBkYXRlZChzb3VyY2UsIHJlYWRpbmcpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKHNvdXJjZS51c2VyRGF0YS5pZCwgJ2hhcyBhbiB1cGRhdGVkIHJlYWRpbmcnKTtcbiAgICogICAgIGlmIChyZWFkaW5nLmluUmFuZ2UpIHtcbiAgICogICAgICAgY29uc29sZS5sb2coc291cmNlLnVzZXJEYXRhLmlkLCAnaXMgY3VycmVudGx5IGluIHJhbmdlJyk7XG4gICAqICAgICAgIGlmIChyZWFkaW5nLmluVmlldykge1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCcuLi4gYW5kIGN1cnJlbnRseSB2aXNpYmxlIG9uIHNjcmVlbicpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGVTZW5zb3IodHlwZTogU2Vuc29yLlNlbnNvclR5cGUuQ0FNRVJBKTogUHJvbWlzZTxTZW5zb3IuSVNlbnNvcj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNwaGVyaWNhbCBbW2BJU291cmNlYF1dIHdoaWNoIGNhbiBiZSBzZW5zZWQgYnkgYW4gW1tgSVNlbnNvcmBdXS48YnI+XG4gICAqIEEgc2hhbGxvdyBjb3B5IG9mIGBvcHRpb25zLnVzZXJEYXRhYCBpcyBhcHBsaWVkIHRvIHRoZSBTb3VyY2UgdXBvbiBjcmVhdGlvbi5cbiAgICpcbiAgICogT21pdHRpbmcgYG9wdGlvbnMub3JpZ2luYCB3aWxsIGRlZmF1bHQgdGhlIHNvdXJjZSdzIGB2b2x1bWUub3JpZ2luYCB0byBgeyB4OiAwLCB5OiAwLCB6OiAwIH1gLjxicj5cbiAgICogT21pdHRpbmcgYG9wdGlvbnMucmFkaXVzYCB3aWxsIGRlZmF1bHQgdGhlIHNvdXJjZSdzIGB2b2x1bWUucmFkaXVzYCB0byBgSW5maW5pdHlgLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHNvdXJjZXM6IEFycmF5PFNlbnNvci5JU291cmNlPFNlbnNvci5TcGhlcmVWb2x1bWUsIHsgaWQ6IHN0cmluZyB9Pj4gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5TUEhFUkUsIHtcbiAgICogICAgIG9yaWdpbjogeyB4OiAxLCB5OiAyLCB6OiAzIH0sXG4gICAqICAgICByYWRpdXM6IDIwLFxuICAgKiAgICAgdXNlckRhdGE6IHtcbiAgICogICAgICAgaWQ6ICdzcGhlcmUtc291cmNlLTEnLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogICBtcFNkay5TZW5zb3IuY3JlYXRlU291cmNlKG1wU2RrLlNlbnNvci5Tb3VyY2VUeXBlLlNQSEVSRSwge1xuICAgKiAgICAgcmFkaXVzOiA0LFxuICAgKiAgICAgdXNlckRhdGE6IHtcbiAgICogICAgICAgaWQ6ICdzcGhlcmUtc291cmNlLTInLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogXSk7XG4gICAqIC8vIGF0dGFjaCB0byBhIHNlbnNvciBwcmV2aW91c2x5IGNyZWF0ZWQgd2l0aCBgU2Vuc29yLmNyZWF0ZVNlbnNvcigpYFxuICAgKiBzZW5zb3IuYWRkU291cmNlKC4uLnNvdXJjZXMpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGNyZWF0ZVNvdXJjZTxVc2VyRGF0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgIHR5cGU6IFNlbnNvci5Tb3VyY2VUeXBlLlNQSEVSRSxcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFNlbnNvci5TcGhlcmVWb2x1bWUgJiBTZW5zb3IuU291cmNlT3B0aW9uczxVc2VyRGF0YT4+LFxuICApOiBQcm9taXNlPFNlbnNvci5JU291cmNlPFNlbnNvci5TcGhlcmVWb2x1bWUsIFVzZXJEYXRhPj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBib3ggc2hhcGVkIFtbYElTb3VyY2VgXV0gd2hpY2ggY2FuIGJlIHNlbnNlZCBieSBhbiBbW2BJU2Vuc29yYF1dLjxicj5cbiAgICogQSBzaGFsbG93IGNvcHkgb2YgYG9wdGlvbnMudXNlckRhdGFgIGlzIGFwcGxpZWQgdG8gdGhlIFNvdXJjZSB1cG9uIGNyZWF0aW9uLlxuICAgKlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5jZW50ZXJgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5jZW50ZXJgIHRvIGB7IHg6IDAsIHk6IDAsIHo6IDAgfWAuPGJyPlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5zaXplYCB3aWxsIGRlZmF1bHQgdGhlIHNvdXJjZSdzIGB2b2x1bWUuc2l6ZWAgdG8gYHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5LCB6OiBJbmZpbml0eSB9YC5cbiAgICogT21pdHRpbmcgYG9wdGlvbnMub3JpZW50YXRpb25gIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5vcmllbnRhdGluYCB0byBgeyB5YXc6IDAsIHBpdGNoOiAwLCByb2xsOiAwIH1gLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHNvdXJjZXM6IEFycmF5PFNlbnNvci5JU291cmNlPFNlbnNvci5Cb3hWb2x1bWUsIHsgaWQ6IHN0cmluZyB9Pj4gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5CT1gsIHtcbiAgICogICAgIGNlbnRlcjogeyB4OiAxLCB5OiAxLCB6OiAxIH0sXG4gICAqICAgICBzaXplOiB7IHg6IDIsIHk6IDEsIHo6IDIgfSxcbiAgICogICAgIHVzZXJEYXRhOiB7XG4gICAqICAgICAgIGlkOiAnYm94LXNvdXJjZS0xJyxcbiAgICogICAgIH0sXG4gICAqICAgfSksXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5CT1gsIHtcbiAgICogICAgIHNpemU6IHsgeDogMjogeTogMiwgejogMiB9LFxuICAgKiAgICAgb3JpZW50YXRpb246IHsgeWF3OiA0NSwgcGl0Y2g6IDQ1LCByb2xsOiA0NSB9LFxuICAgKiAgICAgdXNlckRhdGE6IHtcbiAgICogICAgICAgaWQ6ICdib3gtc291cmNlLTInLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogXSk7XG4gICAqIC8vIGF0dGFjaCB0byBhIHNlbnNvciBwcmV2aW91c2x5IGNyZWF0ZWQgd2l0aCBgU2Vuc29yLmNyZWF0ZVNlbnNvcigpYFxuICAgKiBzZW5zb3IuYWRkU291cmNlKC4uLnNvdXJjZXMpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGNyZWF0ZVNvdXJjZTxVc2VyRGF0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgIHR5cGU6IFNlbnNvci5Tb3VyY2VUeXBlLkJPWCxcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFNlbnNvci5Cb3hWb2x1bWUgJiBTZW5zb3IuU291cmNlT3B0aW9uczxVc2VyRGF0YT4+LFxuICApOiBQcm9taXNlPFNlbnNvci5JU291cmNlPFNlbnNvci5Cb3hWb2x1bWUsIFVzZXJEYXRhPj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGN5bGluZHJpY2FsIFtbYElTb3VyY2VgXV0gd2hpY2ggY2FuIGJlIHNlbnNlZCBieSBhbiBbW2BJU2Vuc29yYF1dLjxicj5cbiAgICogQSBzaGFsbG93IGNvcHkgb2YgYG9wdGlvbnMudXNlckRhdGFgIGlzIGFwcGxpZWQgdG8gdGhlIFNvdXJjZSB1cG9uIGNyZWF0aW9uLlxuICAgKlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5iYXNlUG9pbnRgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5iYXNlUG9pbnRgIHRvIGB7IHg6IDAsIHk6IDAsIHo6IDAgfWAuPGJyPlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5yYWRpdXNgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5yYWRpdXNgIHRvIGBJbmZpbml0eWAuPGJyPlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5oZWlnaHRgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5oZWlnaHRgIHRvIGBJbmZpbml0eWAuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3Qgc291cmNlczogQXJyYXk8U2Vuc29yLklTb3VyY2U8U2Vuc29yLkN5bGluZGVyVm9sdW1lLCB7IGlkOiBzdHJpbmcgfT4+ID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgKiAgIG1wU2RrLlNlbnNvci5jcmVhdGVTb3VyY2UobXBTZGsuU2Vuc29yLlNvdXJjZVR5cGUuQ1lMSU5ERVIsIHtcbiAgICogICAgIGJhc2VQb2ludDogeyB4OiAwLCB5OiAwLCB6OiAwIH0sXG4gICAqICAgICByYWRpdXM6IDIsXG4gICAqICAgICBoZWlnaHQ6IDUsXG4gICAqICAgICB1c2VyRGF0YToge1xuICAgKiAgICAgICBpZDogJ2N5bGluZGVyLXNvdXJjZS0xJyxcbiAgICogICAgIH0sXG4gICAqICAgfSksXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5DWUxJTkRFUiwge1xuICAgKiAgICAgYmFzZVBvaW50OiB7IHg6IDEsIHk6IDIsIHo6IDMgfSxcbiAgICogICAgIHJhZGl1czogMyxcbiAgICogICAgIHVzZXJEYXRhOiB7XG4gICAqICAgICAgIGlkOiAnY3lsaW5kZXItc291cmNlLTInLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogXSk7XG4gICAqIC8vIGF0dGFjaCB0byBhIHNlbnNvciBwcmV2aW91c2x5IGNyZWF0ZWQgd2l0aCBgU2Vuc29yLmNyZWF0ZVNlbnNvcigpYFxuICAgKiBzZW5zb3IuYWRkU291cmNlKC4uLnNvdXJjZXMpO1xuICAgKiBgYGBcbiAgICovXG4gIGNyZWF0ZVNvdXJjZTxVc2VyRGF0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgIHR5cGU6IFNlbnNvci5Tb3VyY2VUeXBlLkNZTElOREVSLFxuICAgIG9wdGlvbnM6IFBhcnRpYWw8U2Vuc29yLkN5bGluZGVyVm9sdW1lICYgU2Vuc29yLlNvdXJjZU9wdGlvbnM8VXNlckRhdGE+PixcbiAgKTogUHJvbWlzZTxTZW5zb3IuSVNvdXJjZTxTZW5zb3IuQ3lsaW5kZXJWb2x1bWUsIFVzZXJEYXRhPj47XG59XG5cbiIsImltcG9ydCB0eXBlIHsgUm90YXRpb24sIFZlY3RvcjMsIElPYnNlcnZhYmxlLCBJT2JzZXJ2YWJsZU1hcCwgRGljdGlvbmFyeSB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB0eXBlIHsgR3JhcGggfSBmcm9tICcuL2dyYXBoJztcblxuZXhwb3J0IG5hbWVzcGFjZSBTd2VlcCB7XG4gIGV4cG9ydCB0eXBlIFN3ZWVwRGF0YSA9IHtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbc2lkXV0gaW5zdGVhZCAqL1xuICAgIHV1aWQ6IHN0cmluZztcbiAgICBzaWQ6IHN0cmluZztcbiAgICBhbGlnbm1lbnRUeXBlOiBBbGlnbm1lbnQ7XG4gICAgcGxhY2VtZW50VHlwZTogUGxhY2VtZW50O1xuICAgIG5laWdoYm9yczogc3RyaW5nW107XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgcm90YXRpb246IFZlY3RvcjM7XG4gICAgZmxvb3I6IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBPYnNlcnZhYmxlU3dlZXBEYXRhID0ge1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tpZF1dIGluc3RlYWQgKi9cbiAgICB1dWlkOiBzdHJpbmc7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2lkXV0gaW5zdGVhZCAqL1xuICAgIHNpZDogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICBhbGlnbm1lbnRUeXBlOiBBbGlnbm1lbnQ7XG4gICAgcGxhY2VtZW50VHlwZTogUGxhY2VtZW50O1xuICAgIG5laWdoYm9yczogc3RyaW5nW107XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgcm90YXRpb246IFZlY3RvcjM7XG4gICAgZmxvb3JJbmZvOiBTd2VlcEZsb29ySW5mbyB8IEVtcHR5U3dlZXBGbG9vckluZm87XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgU3dlZXBGbG9vckluZm8gPSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBzZXF1ZW5jZTogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEVtcHR5U3dlZXBGbG9vckluZm8gPSB7XG4gICAgaWQ6IHVuZGVmaW5lZDtcbiAgICBzZXF1ZW5jZTogdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBgcm90YXRpb24ueGA6IGlzIHRoZSBhbW91bnQgdGhlIGNhbWVyYSB3aWxsIHJvdGF0ZSB1cC9kb3duLCBpbiB0aGUgcmFuZ2UgYmV0d2VlbiBbLTkw4oCmOTBdXG4gICAqIHdpdGggLTkwIGJlaW5nIHN0cmFpZ2h0IGRvd24gYW5kIDkwIGJlaW5nIHN0cmFpZ2h0IHVwLCA0NSB3b3VsZCBiZSBsb29raW5nIHVwIGF0IGEgNDUgZGVncmVlIGFuZ2xlLiwgLTQ1IGRvd24gZXRjLi5cbiAgICogYHJvdGF0aW9uLnlgOiBpcyB0aGUgYW1vdW50IHRoZSBjYW1lcmEgcm90YXRlIGFyb3VuZCBob3Jpem9udGFsbHksIGJldHdlZW4gWy0zNjDigKYw4oCmMzYwXSxcbiAgICogbmVnYXRpdmUgdmFsdWVzIHRvIHJvdGF0ZSB0byB0aGUgbGVmdCwgcG9zaXRpdmUgdG8gcm90YXRlIHRvIHRoZSByaWdodC5cbiAgICpcbiAgICogTm90ZTogVGhlIHJvdGF0aW9uIHRoYXQgU3dlZXAubW92ZVRvIHVzZXMgZm9yIGlucHV0IGlzIHRoZSBzYW1lIHJvdGF0aW9uIHRoYXQgd2lsbCBnZXQgcmV0dXJuZWQgZnJvbSB0aGUgW1tDYW1lcmEucG9zZV1dIHByb3BlcnR5LlxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgY2FjaGVkUG9zZSA9IG51bGw7XG4gICAqIG1wU2RrLkNhbWVyYS5wb3NlLnN1YnNjcmliZShmdW5jdGlvbiAocG9zZSkge1xuICAgKiAgIGNhY2hlZFBvc2UgPSBwb3NlO1xuICAgKiB9KVxuICAgKlxuICAgKiAvLyBJZiB0aGUgcG9zZSBpcyByZXR1cm5lZCBpbW1lZGlhdGVseS5cbiAgICogY29uc29sZS5sb2coY2FjaGVkUG9zZS5yb3RhdGlvbik7XG4gICAqIGBgYFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgTW92ZVRvT3B0aW9ucyA9IHtcbiAgICByb3RhdGlvbj86IFJvdGF0aW9uO1xuICAgIHRyYW5zaXRpb24/OiBUcmFuc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIFRvdGFsIHRyYW5zaXRpb24gdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgdHJhbnNpdGlvblRpbWU/OiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgZW51bSBFdmVudCB7XG4gICAgLyoqXG4gICAgICogQGV2ZW50XG4gICAgICovXG4gICAgRU5URVIgPSAnc3dlZXAuZW50ZXInLFxuICAgIEVYSVQgID0gJ3N3ZWVwLmV4aXQnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gVHJhbnNpdGlvbiB7XG4gICAgSU5TVEFOVCA9ICd0cmFuc2l0aW9uLmluc3RhbnQnLFxuICAgIEZMWSAgICAgPSAndHJhbnNpdGlvbi5mbHknLFxuICAgIEZBREVPVVQgPSAndHJhbnNpdGlvbi5mYWRlJyxcbiAgfVxuICBleHBvcnQgZW51bSBBbGlnbm1lbnQge1xuICAgIEFMSUdORUQgPSAgICdhbGlnbmVkJyxcbiAgICBVTkFMSUdORUQgPSAndW5hbGlnbmVkJyxcbiAgfVxuICBleHBvcnQgZW51bSBQbGFjZW1lbnQge1xuICAgIFVOUExBQ0VEID0gJ3VucGxhY2VkJyxcbiAgICBBVVRPID0gICAgICdhdXRvJyxcbiAgICBNQU5VQUwgPSAgICdtYW51YWwnLFxuICB9XG4gIGV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBDb252ZXJzaW9uIHtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIG1hcCBiZXR3ZWVuIHYyIElEcyBhbmQgdjEgSURzXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIGhlbHAgd2l0aCBtaWdyYXRpb24gYmV0d2VlbiBJRHMgdXNlZCBmb3Igc3dlZXBzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgbWFwcGluZyA9IGF3YWl0IG1wU2RrLlN3ZWVwLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnZlcnQ/OiBib29sZWFuIC0gaWYgcGFzc2VkLCByZXR1cm4gbWFwIG9mIHYxLT52MiBpbnN0ZWFkXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSWRNYXAoaW52ZXJ0PzogYm9vbGVhbik6IFByb21pc2U8RGljdGlvbmFyeTxzdHJpbmc+PjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbGFiZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBzd2VlcCBJRFxuICAgICAqXG4gICAgICogVGhlIGxhYmVsIGlzIHdoYXQncyBkaXNwbGF5ZWQgZm9yIHRoZSBzd2VlcCBpbiB0aGUgd29ya3Nob3BcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGxhYmVsID0gbXBTZGsuU3dlZXAuQ29udmVyc2lvbi5nZXRMYWJlbEZyb21JZCgnYWJjZGVmZ2hpamtsbW5vMDEyMzQ1Njc4OScpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TGFiZWxGcm9tSWQoaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN3ZWVwIHtcbiAgRXZlbnQ6IHR5cGVvZiBTd2VlcC5FdmVudDtcbiAgVHJhbnNpdGlvbjogdHlwZW9mIFN3ZWVwLlRyYW5zaXRpb247XG4gIEFsaWdubWVudDogdHlwZW9mIFN3ZWVwLkFsaWdubWVudDtcbiAgUGxhY2VtZW50OiB0eXBlb2YgU3dlZXAuUGxhY2VtZW50O1xuICBDb252ZXJzaW9uOiB0eXBlb2YgU3dlZXAuQ29udmVyc2lvbjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIG9mIHN3ZWVwIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlN3ZWVwLmRhdGEuc3Vic2NyaWJlKHtcbiAgICogICBvbkFkZGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdzd2VlcCBhZGRlZCB0byB0aGUgY29sbGVjdGlvbicsIGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKTtcbiAgICogICB9LFxuICAgKiAgIG9uUmVtb3ZlZDogZnVuY3Rpb24gKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnc3dlZXAgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25VcGRhdGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdzd2VlcCB1cGRhdGVkIGluIHBsYWNlIGluIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25Db2xsZWN0aW9uVXBkYXRlZDogZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCd0aGUgZW50aXJlIHVwLXRvLWRhdGUgY29sbGVjdGlvbicsIGNvbGxlY3Rpb24pO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8U3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YT47XG5cbiAgLyoqXG4gICAqIEEgZ3JhcGggb2YgZW5hYmxlZCBzd2VlcHMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgcGF0aGZpbmRpbmcuXG4gICAqIFRoaXMgZ3JhcGggd2lsbCBhdXRvbWF0aWNhbGx5IHVwZGF0ZSBhcyBzd2VlcHMgY2hhbmdlIGFuZCB0cmlnZ2VyIGFueSBvYnNlcnZlcnMuXG4gICAqIFRoZSB3ZWlnaHQgb2YgZWFjaCBlZGdlIGlzIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2UgZnJvbSBhIHN3ZWVwIHRvIGl0cyBuZWlnaGJvci5cbiAgICpcbiAgICogRW5hYmxpbmcgYSBzd2VlcCB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGl0IGFuZCBpdHMgZWRnZXMgdG8gdGhlIGdyYXBoLjxicj5cbiAgICogRGlzYWJsaW5nIGEgc3dlZXAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSBpdCBhbmQgaXRzIGVkZ2VzIGZyb20gdGhlIGdyYXBoLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHN3ZWVwR3JhcGggPSBhd2FpdCBtcFNkay5Td2VlcC5jcmVhdGVHcmFwaCgpO1xuICAgKiBjb25zdCBzdGFydFN3ZWVwID0gc3dlZXBHcmFwaC52ZXJ0ZXgoJ1tzdGFydCB2ZXJ0ZXhdJyk7XG4gICAqIGNvbnN0IGVuZFN3ZWVwID0gc3dlZXBHcmFwaC52ZXJ0ZXgoJ1tlbmQgdmVydGV4XScpO1xuICAgKlxuICAgKiBjb25zdCBwYXRoID0gbXBTZGsuR3JhcGguY3JlYXRlQVN0YXJSdW5uZXIoc3dlZXBHcmFwaCwgc3RhcnRTd2VlcCwgZW5kU3dlZXApLmV4ZWMoKTtcbiAgICogYGBgXG4gICAqL1xuICAgY3JlYXRlR3JhcGgoKTogUHJvbWlzZTxHcmFwaC5JRGlyZWN0ZWRHcmFwaDxTd2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhPj47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgZm9yIHRoZSBwbGF5ZXIncyBjdXJyZW50IHN3ZWVwLlxuICAgKlxuICAgKiBJZiB0aGUgY2FtZXJhIGlzIHRyYW5zaXRpb25pbmcgdG8gb3IgaXMgY3VycmVudGx5IGluIERvbGxob3VzZSBvciBGbG9vcnBsYW4gbW9kZSwgb3IgaWYgdGhlIGNhbWVyYSBpcyB0cmFuc2l0aW9uaW5nIGJldHdlZW4gc3dlZXBzLFxuICAgKiB0aGUgYGN1cnJlbnRTd2VlcGAgYXJndW1lbnQgaW4gdGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2sgd2lsbCBiZSBhIFwiZGVmYXVsdFwiIHN3ZWVwIHRoYXQgaGFzIGFuIGVtcHR5IGBzaWRgIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiB0aGUgc3dlZXAgaXMgYW4gdW5hbGlnbmVkLCB1bnBsYWNlZCAzNjDCuiB2aWV3LCBgY3VycmVudFN3ZWVwLmZsb29ySW5mby5pZGAgYW5kIGBjdXJyZW50U3dlZXAuZmxvb3JJbmZvLnNlcXVlbmNlYCB3aWxsIGJvdGggYmUgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIHRhYmxlIHdpdGggdGhlIHJlc3VsdHMgb2YgYHNpZGAsIGBmbG9vckluZm8uc2VxdWVuY2VgLCBhbmQgYGZsb29ySW5mby5pZGAgdG8gZGV0ZXJtaW5lIHRoZSBjdXJyZW50IG9mIHRoZSB0aHJlZSBwb3NzaWJsZSBzdGF0ZXMuXG4gICAqXG4gICAqIHwgICAgICAgICAgICAgICAgICAgIHwgYXQgc3dlZXAgICAgICAgICAgICAgICAgfCB0cmFuc2l0aW9uaW5nIHwgaW4gdW5wbGFjZWQgIDM2MMK6IHZpZXcgfFxuICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8IHNpZCAgICAgICAgICAgICAgICB8IGAke2N1cnJlbnQuc2lkfWAgICAgICAgIHwgJycgICAgICAgICAgICB8IGAke2N1cnJlbnQuc2lkfWAgICAgICAgfFxuICAgKiB8IGZsb29ySW5mby5zZXF1ZW5jZSB8IGAke2Zsb29ySW5mby5zZXF1ZW5jZX1gIHwgdW5kZWZpbmVkICAgICB8IHVuZGVmaW5lZCAgICAgICAgICAgICAgfFxuICAgKiB8IGZsb29ySW5mby5pZCAgICAgICB8IGAke2Zsb29ySW5mby5pZH1gICAgICAgIHwgdW5kZWZpbmVkICAgICB8IHVuZGVmaW5lZCAgICAgICAgICAgICAgfFxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuU3dlZXAuY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRTd2VlcCkge1xuICAgKiAgIC8vIENoYW5nZSB0byB0aGUgY3VycmVudCBzd2VlcCBoYXMgb2NjdXJyZWQuXG4gICAqICAgaWYgKGN1cnJlbnRTd2VlcC5zaWQgPT09ICcnKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnTm90IGN1cnJlbnRseSBzdGF0aW9uZWQgYXQgYSBzd2VlcCBwb3NpdGlvbicpO1xuICAgKiAgIH0gZWxzZSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudGx5IGF0IHN3ZWVwJywgY3VycmVudFN3ZWVwLnNpZCk7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBwb3NpdGlvbicsIGN1cnJlbnRTd2VlcC5wb3NpdGlvbik7XG4gICAqICAgICBjb25zb2xlLmxvZygnT24gZmxvb3InLCBjdXJyZW50U3dlZXAuZmxvb3JJbmZvLnNlcXVlbmNlKTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGN1cnJlbnQ6IElPYnNlcnZhYmxlPFN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGE+O1xuXG4gIC8qKlxuICAgKiBNb3ZlIHRvIGEgc3dlZXAuXG4gICAqXG4gICAqYGBgXG4gICAqIGNvbnN0IHN3ZWVwSWQgPSAnMSc7XG4gICAqIGNvbnN0IHJvdGF0aW9uID0geyB4OiAzMCwgeTogLTQ1IH07XG4gICAqIGNvbnN0IHRyYW5zaXRpb24gPSBtcFNkay5Td2VlcC5UcmFuc2l0aW9uLklOU1RBTlQ7XG4gICAqIGNvbnN0IHRyYW5zaXRpb25UaW1lID0gMjAwMDsgLy8gaW4gbWlsbGlzZWNvbmRzXG4gICAqXG4gICAqIG1wU2RrLlN3ZWVwLm1vdmVUbyhzd2VlcElkLCB7XG4gICAqICAgICByb3RhdGlvbjogcm90YXRpb24sXG4gICAqICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgKiAgICAgdHJhbnNpdGlvblRpbWU6IHRyYW5zaXRpb25UaW1lLFxuICAgKiAgIH0pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oc3dlZXBJZCl7XG4gICAqICAgICAvLyBNb3ZlIHN1Y2Nlc3NmdWwuXG4gICAqICAgICBjb25zb2xlLmxvZygnQXJyaXZlZCBhdCBzd2VlcCAnICsgc3dlZXBJZCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgKiAgICAgLy8gRXJyb3Igd2l0aCBtb3ZlVG8gY29tbWFuZFxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIFRoZSBkZXN0aW5hdGlvbiBzd2VlcC5cbiAgICogQHBhcmFtIE9wdGlvbnMuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHdpbGwgcmV0dXJuIHRoZSBkZXN0aW5hdGlvbiBzd2VlcC5cbiAgICovXG4gIG1vdmVUbyhzd2VlcDogc3RyaW5nLCBvcHRpb25zOiBTd2VlcC5Nb3ZlVG9PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBFbmFibGUgYSBzZXQgb2Ygc3dlZXBzIGJ5IGlkcy5cbiAgICpcbiAgICogRW5hYmxpbmcgYSBzd2VlcCB3aWxsIHNob3cgdGhlIHN3ZWVwJ3MgcHVjayBhbmQgYWxsb3cgdGhlIHBsYXllciB0byBuYXZpZ2F0ZSB0byB0aGF0IGxvY2F0aW9uLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuU3dlZXAuZW5hYmxlKCdzd2VlcDEnLCAnc3dlZXAyJywgJ3N3ZWVwMycpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHN3ZWVwSWRzXG4gICAqL1xuICBlbmFibGUoLi4uc3dlZXBJZHM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogRGlzYWJsZSBhIHNldCBvZiBzd2VlcHMgYnkgaWRzLlxuICAgKlxuICAgKiBEaXNhYmxpbmcgYSBzd2VlcCB3aWxsIGhpZGUgdGhlIHN3ZWVwJ3MgcHVjayBhbmQgcHJldmVudCB0aGUgcGxheWVyJ3MgYWJpbGl0eSB0byBuYXZpZ2F0ZSB0byB0aGF0IGxvY2F0aW9uLlxuICAgKlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuU3dlZXAuZGlzYWJsZSgnc3dlZXAxJywgJ3N3ZWVwMicsICdzd2VlcDMnKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBzd2VlcElkc1xuICAgKi9cbiAgZGlzYWJsZSguLi5zd2VlcElkczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBBZGQgc3BlY2lmaWVkIHN3ZWVwIElEcyB0byB0aGUgbmVpZ2hib3JzIGFycmF5XG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGFsbG93cyBjaGFuZ2luZyB0aGUgc3dlZXAgY29ubmVjdGl2aXRpeSB0byBlbmFibGUgbmF2aWdhdGlvbiBmcm9tIGBzd2VlcElkYFxuICAgKiB0byBhbGwgc3dlZXBzIGluIHRoZSBgdG9BZGRgIGFycmF5LiBOb3RlIHRoYXQgd2UgdXNlIFYyIElEcyBmb3IgYWxsIGFyZ3VtZW50cy4gUmVmZXJcbiAgICogdG8gQ29udmVyc2lvbi5jcmVhdGVJZE1hcCgpIGlmIHlvdSBuZWVkIHRvIGNvbnZlcnQgZnJvbSB0aGUgbGVnYWN5IFYxIElEcy5cbiAgICpcbiAgICogYGBgXG4gICAqIFN3ZWVwLmFkZE5laWdoYm9ycyhcImhuN2V0Y3V5ZmZibXFreXA1ZTQzYXhhMGJcIiwgW1wienI3bnMxc21wNTF6aWJ4NHMyMzlkaTd3YlwiXSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gc3dlZXBJZDogc3RyaW5nIC0gU3dlZXAgSURcbiAgICogQHBhcmFtIHRvQWRkOiBzdHJpbmdbXSAtIExpc3Qgb2YgU3dlZXAgSURzIHRvIGNvbm5lY3RcbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRvIGEgbGlzdCBvZiBhbGwgY3VycmVudCBuZWlnaGJvciBJRHMgKHYyKVxuICAgKi9cbiAgYWRkTmVpZ2hib3JzKHN3ZWVwSWQ6IHN0cmluZywgdG9BZGQ6IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzcGVjaWZpZWQgc3dlZXAgSURzIGZyb20gdGhlIG5laWdoYm9ycyBhcnJheVxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgY2hhbmdpbmcgdGhlIHN3ZWVwIGNvbm5lY3Rpdml0aXkgdG8gcHJldmVudCBuYXZpZ2F0aW9uIGZyb20gYHN3ZWVwSWRgXG4gICAqIHRvIGFsbCBzd2VlcHMgaW4gdGhlIGB0b1JlbW92ZWAgYXJyYXkuIE5vdGUgdGhhdCB3ZSB1c2UgVjIgSURzIGZvciBhbGwgYXJndW1lbnRzLiBSZWZlclxuICAgKiB0byBDb252ZXJzaW9uLmNyZWF0ZUlkTWFwKCkgaWYgeW91IG5lZWQgdG8gY29udmVydCBmcm9tIHRoZSBsZWdhY3kgVjEgSURzLlxuICAgKlxuICAgKiBgYGBcbiAgICogU3dlZXAucmVtb3ZlTmVpZ2hib3JzKFwiaG43ZXRjdXlmZmJtcWt5cDVlNDNheGEwYlwiLCBbXCJ6cjduczFzbXA1MXppYng0czIzOWRpN3diXCJdKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBzd2VlcElkOiBzdHJpbmcgLSBTd2VlcCBJRFxuICAgKiBAcGFyYW0gdG9SZW1vdmU6IHN0cmluZ1tdIC0gTGlzdCBvZiBTd2VlcCBJRHMgdG8gZGlzY29ubmVjdFxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdG8gYSBsaXN0IG9mIGFsbCBjdXJyZW50IG5laWdoYm9yIElEcyAodjIpXG4gICAqL1xuICByZW1vdmVOZWlnaGJvcnMoc3dlZXBJZDogc3RyaW5nLCB0b1JlbW92ZTogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ29sb3IsIElPYnNlcnZhYmxlLCBJT2JzZXJ2YWJsZU1hcCwgU2l6ZSwgVmVjdG9yMyB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBUYWcge1xuICBleHBvcnQgZW51bSBBdHRhY2htZW50VHlwZSB7XG4gICAgLyoqIEFuIHVua25vd24gdHlwZSBvZiBhdHRhY2htZW50LiBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gKi9cbiAgICBVTktOT1dOID0gJ3RhZy5hdHRhY2htZW50LnVua25vd24nLFxuICAgIEFQUExJQ0FUSU9OID0gJ3RhZy5hdHRhY2htZW50LmFwcGxpY2F0aW9uJyxcbiAgICBBVURJTyA9ICd0YWcuYXR0YWNobWVudC5hdWRpbycsXG4gICAgLyoqIFRoZSBhdHRhY2htZW50IGNvbnRhaW5zIGFuIGltYWdlICovXG4gICAgSU1BR0UgPSAndGFnLmF0dGFjaG1lbnQuaW1hZ2UnLFxuICAgIC8qKiBUaGUgYXR0YWNobWVudCBjb250YWlucyByaWNoIGNvbnRlbnQgbGlrZSBhbiBpZnJhbWUgb2YgYW5vdGhlciBzaXRlICovXG4gICAgTU9ERUwgPSAndGFnLmF0dGFjaG1lbnQubW9kZWwnLFxuICAgIFBERiA9ICd0YWcuYXR0YWNobWVudC5wZGYnLFxuICAgIFJJQ0ggPSAndGFnLmF0dGFjaG1lbnQucmljaCcsXG4gICAgVEVYVCA9ICd0YWcuYXR0YWNobWVudC50ZXh0JyxcbiAgICAvKiogVGhlIGF0dGFjaG1lbnQgY29udGFpbnMgYSB2aWRlbyAqL1xuICAgIFZJREVPID0gJ3RhZy5hdHRhY2htZW50LnZpZGVvJyxcbiAgICBaSVAgPSAndGFnLmF0dGFjaG1lbnQuemlwJyxcbiAgICAvKiogVGhlIGF0dGFjaG1lbnQgaXMgYSBzYW5kYm94IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIFtbVGFnLnJlZ2lzdGVyU2FuZGJveF1dICovXG4gICAgU0FOREJPWCA9ICd0YWcuYXR0YWNobWVudC5zYW5kYm94JyxcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFRhZ0RhdGEgPSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBhbmNob3JQb3NpdGlvbjogVmVjdG9yMztcbiAgICBkaXNjUG9zaXRpb246IFZlY3RvcjM7XG4gICAgc3RlbVZlY3RvcjogVmVjdG9yMztcbiAgICBzdGVtSGVpZ2h0OiBudW1iZXI7XG4gICAgc3RlbVZpc2libGU6IGJvb2xlYW47XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvcjtcbiAgICByb29tSWQ6IHN0cmluZztcbiAgICAvKiogVGhlIGlkcyBvZiB0aGUgYXR0YWNobWVudHMgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoaXMgdGFnICovXG4gICAgYXR0YWNobWVudHM6IHN0cmluZ1tdO1xuICAgIGtleXdvcmRzOiBzdHJpbmdbXTtcbiAgICAvKiogUmVhZC1vbmx5IEZvbnQgQXdlc29tZSBpZCBmb3IgaWNvbnMgc2V0IGluIHdvcmtzaG9wLCBlLmcuIFwiZmFjZS1ncmluLXRvbmd1ZS1zcXVpbnRcIlxuICAgICAqIFRoaXMgdmFsdWUgZG9lcyBub3QgY2hhbmdlIGlmIFtbVGFnLmVkaXRJY29uXV0gaXMgdXNlZC4gVGhpcyB2YWx1ZSBpcyBhbiBlbXB0eSBzdHJpbmcgaWYgbm8gZm9udElkIHdhcyBzZXQuXG4gICAgKi9cbiAgICBmb250SWQ6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogVGhpbmdzIHN1Y2ggYXMgbWVkaWEsIGV0YyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhIFRhZy5cbiAgICogQXR0YWNobWVudHMgYXJlIHRoZSBuZXcgZXF1aXZhbGVudCB0byBNZWRpYSBpbiBNYXR0ZXJ0YWdzLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgQXR0YWNobWVudCA9IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHNyYzogc3RyaW5nO1xuICAgIHR5cGU6IEF0dGFjaG1lbnRUeXBlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIHN1YnNldCBvZiB0aGUgVGFnRGF0YSB1c2VkIHdoZW4gYWRkaW5nIFRhZ3MuXG4gICAqIE1vc3QgcHJvcGVydGllcyBhcmUgb3B0aW9uYWwgZXhjZXB0IHRob3NlIHVzZWQgZm9yIHBvc2l0aW9uaW5nOiBgYW5jaG9yUG9zaXRpb25gLCBgc3RlbVZlY3RvcmAuXG4gICAqL1xuICBleHBvcnQgdHlwZSBEZXNjcmlwdG9yID0ge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGFuY2hvclBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHN0ZW1WZWN0b3I6IFZlY3RvcjM7XG4gICAgc3RlbVZpc2libGU/OiBib29sZWFuO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGNvbG9yPzogQ29sb3I7XG4gICAgb3BhY2l0eT86IG51bWJlcjtcbiAgICBpY29uSWQ/OiBzdHJpbmc7XG4gICAgYXR0YWNobWVudHM/OiBzdHJpbmdbXTtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBQb3NpdGlvbk9wdGlvbnMgPSB7XG4gICAgYW5jaG9yUG9zaXRpb246IFZlY3RvcjM7XG4gICAgc3RlbVZlY3RvcjogVmVjdG9yMztcbiAgICByb29tSWQ6IHN0cmluZztcbiAgfTtcblxuICBleHBvcnQgdHlwZSBTdGVtSGVpZ2h0RWRpdE9wdGlvbnMgPSB7XG4gICAgc3RlbUhlaWdodDogbnVtYmVyO1xuICAgIHN0ZW1WaXNpYmxlOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgRWRpdGFibGVQcm9wZXJ0aWVzID0ge1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFNhbmRib3hPcHRpb25zID0ge1xuICAgIC8qKlxuICAgICAqIEEgbWFwIGZvciB0aGUgdGhyZWUgZ2xvYmFsIGZ1bmN0aW9ucyB3ZSBwcm92aWRlIGluIHlvdXIgc2FuZGJveC5cbiAgICAgKiBPbmx5IG5lZWRzIHRvIGJlIHVzZWQgaWYgc2NyaXB0cyB5b3UgYXJlIGltcG9ydGluZyBhbHNvIGhhdmUgYSBnbG9iYWwgYHNlbmRgLCBgb25gLCBgb2ZmYCwgYHRhZ2AsIG9yIGBkb2NrZWRgLlxuICAgICAqL1xuICAgIGdsb2JhbFZhcmlhYmxlTWFwOiBHbG9iYWxWYXJpYWJsZU1hcDtcblxuICAgIC8qKlxuICAgICAqIEEgaHVtYW4gcmVhZGFibGUgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgYHNyY2AgaW4gdGhlIGF0dGFjaG1lbnRzIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIHNhbmRib3ggdG8gZGlzcGxheVxuICAgICAqIFByb3ZpZGluZyBgMGAgYXMgb25lIG9mIHRoZSBkaW1lbnNpb25zIHdpbGwgaW5zdGVhZCB1c2UgdGhlIGRlZmF1bHQ6IDE1MHB4IGZvciBoZWlnaHQsIDEwMCUgZm9yIHdpZHRoLlxuICAgICAqL1xuICAgIHNpemU6IFNpemU7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcCB0aGUgZ2xvYmFscyB3ZSBwcm92aWRlIGluIHlvdXIgc2FuZGJveCB0byBvdGhlciBuYW1lcy5cbiAgICovXG4gICBleHBvcnQgdHlwZSBHbG9iYWxWYXJpYWJsZU1hcCA9IHtcbiAgICBzZW5kPzogc3RyaW5nO1xuICAgIG9uPzogc3RyaW5nO1xuICAgIG9mZj86IHN0cmluZztcbiAgICB0YWc/OiBzdHJpbmc7XG4gICAgZG9ja2VkPzogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbWVzc2FnaW5nIG9iamVjdCB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzIHRvIGFuZCBmcm9tIHlvdXIgaWZyYW1lIHNhbmRib3guXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElNZXNzZW5nZXIge1xuICAgIC8qKlxuICAgICAqIFNlbmQgYSBtZXNzYWdlcyBvZiB0eXBlIGBldmVudFR5cGVgIHRvIHRoZSBpZnJhbWUgc2FuZGJveCB3aXRoIGFueSBvcHRpb25hbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWVzc2FnZVxuICAgICAqL1xuICAgIHNlbmQoZXZlbnRUeXBlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZGQgYSBoYW5kbGVyIGZvciBtZXNzYWdlcyBvZiB0eXBlIGBldmVudFR5cGVgIGZyb20gdGhlIGlmcmFtZSBzYW5kYm94XG4gICAgICovXG4gICAgb24oZXZlbnRUeXBlOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBoYW5kbGVyIGZvciBtZXNzYWdlcyBvZiB0eXBlIGBldmVudFR5cGVgIGZyb20gdGhlIGlmcmFtZSBzYW5kYm94XG4gICAgICovXG4gICAgb2ZmKGV2ZW50VHlwZTogc3RyaW5nLCBldmVudEhhbmRsZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFjdGlvbnMgdGhhdCBjYW4gYmUgdGFrZW4gd2hlbiBpbnRlcmFjdGluZyB3aXRoIGEgdGFnXG4gICAqL1xuICBleHBvcnQgdHlwZSBBbGxvd2FibGVBY3Rpb25zID0ge1xuICAgIC8qKiBXaGV0aGVyIHRoZSB0YWcgY2FuIGJlIG9wZW5lZCB2aWEgYSBtb3VzZSBob3ZlciAqL1xuICAgIG9wZW5pbmc6IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgbmF2aWdhdGlvbiB0b3dhcmVkIHRoZSB0YWcgd2lsbCBvY2N1ciB3aGVuIGNsaWNrZWQgKi9cbiAgICBuYXZpZ2F0aW5nOiBib29sZWFuO1xuICAgIC8qKiBXaGV0aGVyIHRoZSB0YWcgY2FuIGJlIGRvY2tlZCAqL1xuICAgIGRvY2tpbmc6IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgdGhlIHRhZyBoYXMgYSBzaGFyZSBidXR0b24gKi9cbiAgICBzaGFyaW5nOiBib29sZWFuO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIE9wZW5PcHRpb25zID0ge1xuICAgIC8qKiBGb3JjZSB0aGUgdGFnIG9wZW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIGl0cyBhbGxvd2VkIGZyb20gcHJldmlvdXMgY2FsbHMgdG8gW1tUYWcuYWxsb3dBY3Rpb25dXSAqL1xuICAgIGZvcmNlOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgT3BlblRhZ3MgPSB7XG4gICAgLyoqIFRoZSBpZCBvZiB0aGUgdGFnIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHByZXZpZXdlZCBvciBob3ZlcmVkIG92ZXIuICovXG4gICAgaG92ZXJlZDogc3RyaW5nIHwgbnVsbDtcbiAgICAvKiogVGhlIHNldCBvZiBpZHMgb2YgdGFncyB0aGF0IGFyZSBjdXJyZW50bHkgXCJzdHVja1wiIG9wZW4gbGlrZSBmcm9tIGEgY2xpY2sgYWN0aW9uLiBDdXJyZW50bHksIHRoaXMgaXMgbGltaXRlZCB0byBqdXN0IG9uZSB0YWcuICovXG4gICAgc2VsZWN0ZWQ6IFNldDxzdHJpbmc+O1xuICAgIC8qKiBUaGUgaWQgb2YgdGhlIHRhZyB0aGF0IGlzIGN1cnJlbnRseSBkb2NrZWQuICovXG4gICAgZG9ja2VkOiBzdHJpbmcgfCBudWxsO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZyB7XG4gIEF0dGFjaG1lbnRUeXBlOiB0eXBlb2YgVGFnLkF0dGFjaG1lbnRUeXBlO1xuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIG9mIHRoZSBbW0F0dGFjaG1lbnRdXS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBtcFNkay5UYWcuYXR0YWNobWVudHMuc3Vic2NyaWJlKHtcbiAgICogICBvbkFkZGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdBbiBhdHRhY2htZW50IHdhcyBhZGRlZCB0byB0aGUgY29sbGVjdGlvbicsIGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKTtcbiAgICogICB9LFxuICAgKiAgIG9uQ29sbGVjdGlvblVwZGF0ZWQoY29sbGVjdGlvbikge1xuICAgKiAgICAgY29uc29sZS5sb2coJ1RoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBhdHRhY2htZW50cycsIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGF0dGFjaG1lbnRzOiBJT2JzZXJ2YWJsZU1hcDxUYWcuQXR0YWNobWVudD47XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBbW0F0dGFjaG1lbnRdXSB0byBhIFRhZy5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKiBjb25zdCBhdHRhY2htZW50SWRzOiBzdHJpbmdbXTsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggYSBwcmV2aW91cyBjYWxsIHRvIGBtcFNkay5UYWcucmVnaXN0ZXJBdHRhY2htZW50YCBvciB0aHJvdWdoIGBtcFNkay5UYWcuYXR0YWNobWVudHNgXG4gICAqXG4gICAqIG1wU2RrLlRhZy5hdHRhY2godGFnSWQsIC4uLmF0dGFjaG1lbnRJZHMpO1xuICAgKiAvLyBvclxuICAgKiBtcFNkay5UYWcuYXR0YWNoKHRhZ0lkLCBhdHRhY2htZW50SWRbMF0sIGF0dGFjaG1lbnRJZFsxXSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdGFnSWRcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJZFxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIEF0dGFjaG1lbnQgaXMgYWRkZWQgdG8gdGhlIFRhZ1xuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgYXR0YWNoKHRhZ0lkOiBzdHJpbmcsIC4uLmF0dGFjaG1lbnRJZHM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVhZCBhbmQgY3JlYXRlIHRyYW5zaWVudCB0YWdzIGZyb20gYW5vdGhlciBzcGFjZS5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKiBAcGFyYW0gc2lkIGV4dGVybmFsIHNwYWNlIGlkIGNvbnRhaW5nIHRhZ3NcbiAgICovXG4gIGltcG9ydFRhZ3Moc3BhY2VTaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBEZXRhY2ggW1tBdHRhY2htZW50XV0gZnJvbSBhIFRhZy5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKiBjb25zdCBhdHRhY2htZW50SWRzOiBzdHJpbmdbXTsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggYSBwcmV2aW91cyBjYWxsIHRvIGBtcFNkay5UYWcucmVnaXN0ZXJBdHRhY2htZW50YCBvciB0aHJvdWdoIGBtcFNkay5UYWcuYXR0YWNobWVudHNgXG4gICAqXG4gICAqIG1wU2RrLlRhZy5kZXRhY2godGFnSWQsIC4uLmF0dGFjaG1lbnRJZHMpO1xuICAgKiAvLyBvclxuICAgKiBtcFNkay5UYWcuZGV0YWNoKHRhZ0lkLCBhdHRhY2htZW50SWRbMF0sIGF0dGFjaG1lbnRJZFsxXSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdGFnSWRcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJZHNcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjcwLjEwLTAtZ2U5Y2I4M2IyOGNcbiAgICovXG4gIGRldGFjaCh0YWdJZDogc3RyaW5nLCAuLi5hdHRhY2htZW50SWRzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgbmV3IFtbQXR0YWNobWVudF1dIHRoYXQgY2FuIGxhdGVyIGJlIGF0dGFjaGVkIGFzIG1lZGlhIHRvIGEgVGFnLlxuICAgKlxuICAgKiBDdXN0b20gSFRNTCBjYW4gYmUgYWRkZWQgYXMgYW4gYXR0YWNobWVudCB0aHJvdWdoIHRoZSB1c2Ugb2YgW1tyZWdpc3RlclNhbmRib3hdXSBpbnN0ZWFkLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIHJlZ2lzdGVyIGEgY291cGxlIG9mIGF0dGFjaG1lbnRzIHRvIHVzZSBsYXRlclxuICAgKiBjb25zdCBbYXR0YWNobWVudElkMSwgYXR0YWNobWVudElkMl0gPSBtcFNkay5UYWcucmVnaXN0ZXJBdHRhY2htZW50KFxuICAgKiAgICdodHRwczovL1tsaW5rLnRvL21lZGlhXScsXG4gICAqICAgJ2h0dHBzOi8vW2xpbmsudG8vb3RoZXJfbWVkaWFdJyxcbiAgICogKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBzcmNzIFRoZSBzcmMgVVJMcyBvZiB0aGUgbWVkaWFcbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBpZHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBuZXdseSBhZGRlZCBBdHRhY2htZW50c1xuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgcmVnaXN0ZXJBdHRhY2htZW50KC4uLnNyY3M6IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gSFRNTCBzYW5kYm94IHRoYXQgZGlwbGF5cyBjdXN0b20gSFRNTCBhbmQgcnVucyBjdXN0b20gc2NyaXB0cyBhcyBhbiBhdHRhY2htZW50LlxuICAgKiBEYXRhIGNhbiBiZSBzZW50IGFuZCByZWNlaXZlZCBmcm9tIHRoZSBzYW5kYm94IGJ5IHVzaW5nIHRoZSByZXR1cm5lZCBbW0lNZXNzZW5nZXJdXS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBodG1sVG9JbmplY3QgPSBgXG4gICAqICAgPHN0eWxlPlxuICAgKiAgICAgYnV0dG9uIHtcbiAgICogICAgICAgd2lkdGg6IDEwMHB4O1xuICAgKiAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAqICAgICB9XG4gICAqICAgPC9zdHlsZT5cbiAgICogICA8YnV0dG9uIGlkPSdidG4xJz5DTElDSyBNRTwvYnV0dG9uPlxuICAgKiAgIDxzY3JpcHQ+XG4gICAqICAgICB2YXIgYnRuMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4xJyk7XG4gICAqICAgICBidG4xLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgKiAgICAgICAvLyBzZW5kIGRhdGEgb3V0IG9mIHRoZSBzYW5kYm94XG4gICAqICAgICAgIHdpbmRvdy5zZW5kKCdidXR0b25DbGljaycsIDEyMzQ1KTtcbiAgICogICAgIH0pO1xuICAgKiAgICAgLy8gcmVjZWl2ZSBkYXRhIGZyb20gb3V0c2lkZSBvZiB0aGUgc2FuZGJveFxuICAgKiAgICAgd2luZG93Lm9uKCd1cGRhdGVCdXR0b24nLCAobmV3TGFiZWwsIGNvbG9yKSA9PiB7XG4gICAqICAgICAgIGJ0bjEuaW5uZXJUZXh0ID0gbmV3TGFiZWw7XG4gICAqICAgICAgIGJ0bjEuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAqICAgICB9KTtcbiAgICogICA8L3NjcmlwdD5cbiAgICogYDtcbiAgICpcbiAgICogLy8gY3JlYXRlIGFuZCByZWdpc3RlciB0aGUgc2FuZGJveFxuICAgKiBjb25zdCBbc2FuZGJveElkLCBtZXNzZW5nZXJdID0gYXdhaXQgbXBTZGsuVGFnLnJlZ2lzdGVyU2FuZGJveChodG1sVG9JbmplY3QpO1xuICAgKiAvLyBhdHRhY2ggdGhlIHNhbmRib3ggdG8gYSB0YWdcbiAgICogbXBTZGsuVGFnLmF0dGFjaCh0YWdJZCwgc2FuZGJveElkKTtcbiAgICogLy8gcmVjZWl2ZSBkYXRhIGZyb20gdGhlIHNhbmRib3hcbiAgICogbWVzc2VuZ2VyLm9uKCdidXR0b25DbGljaycsIChidXR0b25JZCkgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKCdjbGlja2VkIGJ1dHRvbiB3aXRoIGlkOicsIGJ1dHRvbklkKTtcbiAgICogfSk7XG4gICAqIC8vIHNlbmQgZGF0YSB0byB0aGUgc2FuZGJveFxuICAgKiBtZXNzZW5nZXIuc2VuZCgnSSBzZW5kIG1lc3NhZ2VzJywgJ3JlZCcpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGh0bWxcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybnMgQW4gW1tJTWVzc2VuZ2VyXV0gdGhhdCBjYW4gYmUgdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzYW5kYm94IGJ5IHNlbmRpbmcgYW5kIHJlY2VpdmluZyBkYXRhXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS43MC4xMC0wLWdlOWNiODNiMjhjXG4gICAqL1xuICByZWdpc3RlclNhbmRib3goaHRtbDogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxUYWcuU2FuZGJveE9wdGlvbnM+KTogUHJvbWlzZTxbc3RyaW5nLCBUYWcuSU1lc3Nlbmdlcl0+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gb2YgVGFnIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogV2hlbiBmaXJzdCBzdWJzY3JpYmluZywgdGhlIGN1cnJlbnQgc2V0IG9mIFRhZ3Mgd2lsbCBjYWxsIHRoZSBvYnNlcnZlcidzIGBvbkFkZGVkYCBmb3IgZWFjaCBUYWcgYXMgdGhlIGRhdGEgYmVjb21lcyBhdmFpbGFibGUuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbXBTZGsuVGFnLmRhdGEuc3Vic2NyaWJlKHtcbiAgICogICBvbkFkZGVkKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnVGFnIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25SZW1vdmVkKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnVGFnIHJlbW92ZWQgZnJvbSB0aGUgY29sbGVjdGlvbicsIGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKTtcbiAgICogICB9LFxuICAgKiAgIG9uVXBkYXRlZChpbmRleCwgaXRlbSwgY29sbGVjdGlvbikge1xuICAgKiAgICAgY29uc29sZS5sb2coJ1RhZyB1cGRhdGVkIGluIHBsYWNlIGluIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25Db2xsZWN0aW9uVXBkYXRlZChjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnVGhlIGZ1bGwgY29sbGVjdGlvbiBvZiBUYWdzIGxvb2tzIGxpa2UnLCBjb2xsZWN0aW9uKTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGRhdGE6IElPYnNlcnZhYmxlTWFwPFRhZy5UYWdEYXRhPjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBzdGF0ZSBvZiB0aGF0IHRhZ3MgdGhhdCBhcmUgaG92ZXJlZCwgc2VsZWN0ZWQsIG9yIGRvY2tlZC5cbiAgICogQSBUYWcgY2FuIGJlIGluIGFsbCB0aHJlZSBzdGF0ZXMgYXQgb25jZS4gQSBkb2NrZWQgdGFnIGlzIGFsc28gYWx3YXlzIGNvbnNpZGVyZWQgc2VsZWN0ZWQuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbXBTZGsuVGFnLm9wZW5UYWdzLnN1YnNjcmliZSh7XG4gICAqICAgcHJldlN0YXRlOiB7XG4gICAqICAgICBob3ZlcmVkOiBudWxsLFxuICAgKiAgICAgZG9ja2VkOiBudWxsLFxuICAgKiAgICAgc2VsZWN0ZWQ6IG51bGwsXG4gICAqICAgfSxcbiAgICogICBvbkNoYW5nZWQobmV3U3RhdGUpIHtcbiAgICogICAgIGlmIChuZXdTdGF0ZS5ob3ZlcmVkICE9PSB0aGlzLnByZXZTdGF0ZS5ob3ZlcmVkKSB7XG4gICAqICAgICAgIGlmIChuZXdTdGF0ZS5ob3ZlcmVkKSB7XG4gICAqICAgICAgICAgY29uc29sZS5sb2cobmV3U3RhdGUuaG92ZXJlZCwgJ3dhcyBob3ZlcmVkJyk7XG4gICAqICAgICAgIH0gZWxzZSB7XG4gICAqICAgICAgICAgY29uc29sZS5sb2codGhpcy5wcmV2U3RhdGUuaG92ZXJlZCwgJ2lzIG5vIGxvbmdlciBob3ZlcmVkJyk7XG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICAgIGlmIChuZXdTdGF0ZS5kb2NrZWQgIT09IHRoaXMucHJldlN0YXRlLmRvY2tlZCkge1xuICAgKiAgICAgICBpZiAobmV3U3RhdGUuZG9ja2VkKSB7XG4gICAqICAgICAgICAgY29uc29sZS5sb2cobmV3U3RhdGUuZG9ja2VkLCAnd2FzIGRvY2tlZCcpO1xuICAgKiAgICAgICB9IGVsc2Uge1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucHJldlN0YXRlLmRvY2tlZCwgJ3dhcyB1bmRvY2tlZCcpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqXG4gICAqICAgICAvLyBvbmx5IGNvbXBhcmUgdGhlIGZpcnN0ICdzZWxlY3RlZCcgc2luY2Ugb25seSBvbmUgdGFnIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWRcbiAgICogICAgIGNvbnN0IFtzZWxlY3RlZCA9IG51bGxdID0gbmV3U3RhdGUuc2VsZWN0ZWQ7IC8vIGRlc3RydWN0dXJlIGFuZCBjb2VyY2UgdGhlIGZpcnN0IFNldCBlbGVtZW50IHRvIG51bGxcbiAgICogICAgIGlmIChzZWxlY3RlZCAhPT0gdGhpcy5wcmV2U3RhdGUuc2VsZWN0ZWQpIHtcbiAgICogICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICogICAgICAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWQsICd3YXMgc2VsZWN0ZWQnKTtcbiAgICogICAgICAgICB9IGVsc2Uge1xuICAgKiAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnByZXZTdGF0ZS5zZWxlY3RlZCwgJ3dhcyBkZXNlbGVjdGVkJyk7XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgfVxuICAgKlxuICAgKiAgICAgLy8gY2xvbmUgYW5kIHN0b3JlIHRoZSBuZXcgc3RhdGVcbiAgICogICAgIHRoaXMucHJldlN0YXRlID0ge1xuICAgKiAgICAgICAuLi5uZXdTdGF0ZSxcbiAgICogICAgICAgc2VsZWN0ZWQsXG4gICAqICAgICB9O1xuICAgKiAgIH0sXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMjMuMi4xXG4gICAqL1xuICBvcGVuVGFnczogSU9ic2VydmFibGU8VGFnLk9wZW5UYWdzPjtcblxuICAvKipcbiAgICogQWRkIG9uZSBvciBtb3JlIFRhZ3MgdG8gU2hvd2Nhc2UuXG4gICAqIEVhY2ggaW5wdXQgVGFnIHN1cHBvcnRzIHNldHRpbmcgdGhlIGxhYmVsLCBkZXNjcmlwdGlvbiwgY29sb3Igb3IgaWNvbiwgYW5jaG9yUG9zaXRpb24sIHN0ZW1WZWN0b3IsIGFuZCBhdHRhY2htZW50cy5cbiAgICpcbiAgICogVHdvIHByb3BlcnRpZXMgYXJlIHJlcXVpcmVkOlxuICAgKiAtIGBhbmNob3JQb3NpdGlvbmAsIHRoZSBwb2ludCB3aGVyZSB0aGUgdGFnIGNvbm5lY3RzIHRvIHRoZSBtb2RlbFxuICAgKiAtIGBzdGVtVmVjdG9yYCwgdGhlIGRpcmVjdGlvbiwgYWthIG5vcm1hbCwgYW5kIGhlaWdodCB0aGF0IHRoZSBUYWcgc3RlbSBwb2ludHNcbiAgICpcbiAgICogU2VlIFtbUG9pbnRlci5pbnRlcnNlY3Rpb25dXSBmb3IgYSB3YXkgdG8gcmV0cmlldmUgYSBuZXcgYGFuY2hvclBvc2l0aW9uYCBhbmQgYHN0ZW1WZWN0b3JgLlxuICAgKlxuICAgKiAqKk5vdGUqKjogdGhlc2UgY2hhbmdlcyBhcmUgbm90IHBlcnNpc3RlZCBiZXR3ZWVuIHJlZnJlc2hlcyBvZiBTaG93Y2FzZS4gVGhleSBhcmUgb25seSB2YWxpZCBmb3IgdGhlIGN1cnJlbnQgYnJvd3NlciBzZXNzaW9uLlxuICAgKiBUaGV5IGFsc28gZG8gbm90IGhhdmUgXCJzaGFyZVwiIGJ1dHRvbnMgYXMgdGhleSBhc3NvY2lhdGVkIHdpdGggdGhlbS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBtcFNkay5UYWcuYWRkKHtcbiAgICogIGxhYmVsOiAnTmV3IHRhZycsXG4gICAqICBkZXNjcmlwdGlvbjogJ1RoaXMgdGFnIHdhcyBhZGRlZCB0aHJvdWdoIHRoZSBNYXR0ZXJwb3J0IFNESycsXG4gICAqICBhbmNob3JQb3NpdGlvbjoge1xuICAgKiAgICB4OiAwLFxuICAgKiAgICB5OiAwLFxuICAgKiAgICB6OiAwLFxuICAgKiAgfSxcbiAgICogIHN0ZW1WZWN0b3I6IHsgLy8gbWFrZSB0aGUgVGFnIHN0aWNrIHN0cmFpZ2h0IHVwIGFuZCBtYWtlIGl0IDAuMzAgbWV0ZXJzICh+MSBmb290KSB0YWxsXG4gICAqICAgIHg6IDAsXG4gICAqICAgIHk6IDAuMzAsXG4gICAqICAgIHo6IDAsXG4gICAqICB9LFxuICAgKiAgY29sb3I6IHsgLy8gYmx1ZSBkaXNjXG4gICAqICAgIHI6IDAuMCxcbiAgICogICAgZzogMC4wLFxuICAgKiAgICBiOiAxLjAsXG4gICAqICB9LFxuICAgKiB9LCB7XG4gICAqICBsYWJlbDogJ05ldyB0YWcgMicsXG4gICAqICBhbmNob3JQb3NpdGlvbjoge1xuICAgKiAgICB4OiAxLFxuICAgKiAgICB5OiAyLFxuICAgKiAgICB6OiAzLFxuICAgKiAgfSxcbiAgICogIHN0ZW1WZWN0b3I6IHtcbiAgICogICAgeDogLFxuICAgKiAgICB5OiAsXG4gICAqICAgIHo6ICxcbiAgICogIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdGFncyBUaGUgZGVzY3JpcHRvcnMgZm9yIGFsbCBUYWdzIHRvIGJlIGFkZGVkLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBhcmFyeSBvZiBpZHMgZm9yIHRoZSBuZXdseSBhZGRlZCBUYWdzLlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgYWRkKC4uLnRhZ3M6IFRhZy5EZXNjcmlwdG9yW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICAvKipcbiAgICogU2V0cyB0aGUgYWxsb3dlZCBcImRlZmF1bHRcIiBTaG93Y2FzZSBhY3Rpb25zIG9uIGEgVGFnIGZyb20gb2NjdXJyaW5nOiBob3ZlciB0byBvcGVuIGJpbGxib2FyZCwgY2xpY2sgdG8gbmF2aWdhdGUgdG8gdmlldy5cbiAgICogSWYgYW4gYWN0aW9uIGlzIG9tbWl0ZWQgZnJvbSB0aGUgYWN0aW9ucyBhcmd1bWVudCwgaXQgd2lsbCBiZSBjb25zaWRlcmVkIGZhbHNlIGJ5IGRlZmF1bHQuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgdGFnSWRzOiBzdHJpbmdbXTsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggcHJldmlvdXMgY2FsbHMgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKlxuICAgKiAvLyBwcmV2ZW50IG5hdmlnYXRpbmcgdG8gdGhlIHRhZyBvbiBjbGlja1xuICAgKiBjb25zdCBub05hdmlnYXRpb25UYWcgPSB0YWdJZHNbMF07XG4gICAqIG1wU2RrLlRhZy5hbGxvd0FjdGlvbihub05hdmlnYXRpb25UYWcsIHtcbiAgICogICBvcGVuaW5nOiB0cnVlLFxuICAgKiAgIC8vIGltcGxpZXMgbmF2aWdhdGluZzogZmFsc2UsIGV0Y1xuICAgKiB9KTtcbiAgICpcbiAgICogLy8gcHJldmVudCB0aGUgYmlsbGJvYXJkIGZyb20gc2hvd2luZ1xuICAgKiBjb25zdCBub0JpbGxib2FyZFRhZyA9IHRhZ0lkc1sxXTtcbiAgICogbXBTZGsuVGFnLmFsbG93QWN0aW9uKG5vQmlsbGJvYXJkVGFnLCB7XG4gICAqICAgbmF2aWdhdGluZzogdHJ1ZSxcbiAgICogICAvLyBpbXBsaWVzIG9wZW5pbmc6IGZhbHNlLCBldGNcbiAgICogfSk7XG4gICAqXG4gICAqIGNvbnN0IG5vQWN0aW9uc1RhZyA9IHRhZ0lkc1syXTtcbiAgICogbXBTZGsuVGFnLmFsbG93QWN0aW9uKG5vQWN0aW9uc1RhZywge1xuICAgKiAgIC8vIGltcGxpZXMgb3BlbmluZzogZmFsc2UgYW5kIG5hdmlnYXRpbmc6IGZhbHNlLCBldGNcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBUYWcgdG8gY2hhbmdlIHRoZSBhbGxvd2VkIGFjdGlvbnNcbiAgICogQHBhcmFtIGFjdGlvbnMgVGhlIHNldCBvZiBhY3Rpb25zIGFsbG93ZWQgb24gdGhlIFRhZ1xuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgYWxsb3dBY3Rpb24oaWQ6IHN0cmluZywgYWN0aW9uczogUGFydGlhbDxUYWcuQWxsb3dhYmxlQWN0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBPcGVuIGEgdGFnIGFuZCBkaXNwbGF5IGl0cyBiaWxsYm9hcmQuXG4gICAqIE9wZW5pbmcgYSBzZWNvbmQgdGFnIHdpbGwgY2xvc2UgdGhlIGZpcnN0LlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG1wU2RrLlRhZy5vcGVuKHRhZ0lkKTtcbiAgICpcbiAgICogLy8gaWYgdGhlIHRhZyBoYXMgaGFkIGl0cyBgZG9ja2Agb3B0aW9uIHJlbW92ZWQgdGhyb3VnaCBhIGNhbGwgdG8gYFRhZy5hbGxvd0FjdGlvbmAsIGl0IGNhbiBiZSBgZm9yY2VgZCBvcGVuXG4gICAqIG1wU2RrLlRhZy5hbGxvd0FjdGlvbih0YWdJZCwge1xuICAgKiAgIG9wZW5pbmc6IGZhbHNlLFxuICAgKiB9KTtcbiAgICogbXBTZGsuVGFnLm9wZW4odGFnSWQsXG4gICAqICAgZm9yY2U6IHRydWUsXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGlkXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDIzLjIuMVxuICAgKi9cbiAgb3BlbihpZDogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxUYWcuT3Blbk9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2xvc2UgYSB0YWcgYW5kIGl0cyBiaWxsYm9hcmQgb3IgZG9jay5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBwcmV2aW91cyBjYWxscyB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqIG1wU2RrLlRhZy5vcGVuKHRhZ0lkKTtcbiAgICogbXBTZGsuVGFnLmNsb3NlKHRhZ0lkKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZFxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAyMy4yLjFcbiAgICovXG4gIGNsb3NlKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBPcGVuIGEgdGFnIGluIHRoZSBkb2NrZWQgdmlldy5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBwcmV2aW91cyBjYWxscyB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqIG1wU2RrLlRhZy5kb2NrKHRhZ0lkKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZFxuICAgKiBAcGFyYW0gb3B0aW9uc1xuXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDIzLjIuMVxuICAgKi9cbiAgZG9jayhpZDogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxUYWcuT3Blbk9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogRWRpdCB0aGUgdGV4dCBjb250ZW50IGluIGEgVGFnJ3MgYmlsbGJvYXJkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogdGhlc2UgY2hhbmdlcyBhcmUgbm90IHBlcnNpc3RlZCBiZXR3ZWVuIHJlZnJlc2hlcyBvZiBTaG93Y2FzZS4gVGhleSBhcmUgb25seSB2YWxpZCBmb3IgdGhlIGN1cnJlbnQgYnJvd3NlciBzZXNzaW9uLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG1wU2RrLlRhZy5lZGl0QmlsbGJvYXJkKGlkLCB7XG4gICAqICAgbGFiZWw6ICdUaGlzIGlzIGEgbmV3IHRpdGxlJyxcbiAgICogICBkZXNjcmlwdGlvbjogJ1RoaXMgaW1hZ2Ugd2FzIHNldCBkeW5hbWljYWxseSBieSB0aGUgU2hvd2Nhc2Ugc2RrJyxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gaWQgdGhlIGlkIG9mIHRoZSBUYWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gcHJvcGVydGllcyBBIGRpY3Rpb25hcnkgb2YgcHJvcGVydGllcyB0byBzZXRcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGVkaXRCaWxsYm9hcmQoaWQ6IHN0cmluZywgcHJvcGVydGllczogUGFydGlhbDxUYWcuRWRpdGFibGVQcm9wZXJ0aWVzPik6IFByb21pc2U8dm9pZD47XG5cblxuICAvKipcbiAgICogRWRpdCB0aGUgY29sb3Igb2YgYSBUYWcncyBkaXNjLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHRhZ0lkczogc3RyaW5nW107IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIHByZXZpb3VzIGNhbGxzIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICpcbiAgICogLy8gY2hhbmdlIHRoZSBmaXJzdCBUYWcgdG8geWVsbG93XG4gICAqIG1wU2RrLlRhZy5lZGl0Q29sb3IodGFnSWRzWzBdLCB7XG4gICAqICAgcjogMC45LFxuICAgKiAgIGc6IDAsXG4gICAqICAgYjogMC45LFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIFRhZyB0byBlZGl0XG4gICAqIEBwYXJhbSBjb2xvciBUaGUgbmV3IGNvbG9yIHRvIGJlIGFwcGxpZWQgdG8gdGhlIFRhZyBkaXNjXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBlZGl0Q29sb3IoaWQ6IHN0cmluZywgY29sb3I6IENvbG9yKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBpY29uIG9mIHRoZSBUYWcgZGlzY1xuICAgKlxuICAgKiAqKk5vdGUqKjogdGhlc2UgY2hhbmdlcyBhcmUgbm90IHBlcnNpc3RlZCBiZXR3ZWVuIHJlZnJlc2hlcyBvZiBTaG93Y2FzZS4gVGhleSBhcmUgb25seSB2YWxpZCBmb3IgdGhlIGN1cnJlbnQgYnJvd3NlciBzZXNzaW9uLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIGNoYW5nZSB0aGUgaWNvbiBvZiB0aGUgVGFnIHVzaW5nIHRoZSBpZCB1c2VkIGluIGEgcHJldmlvdXMgYEFzc2V0LnJlZ2lzdGVyVGV4dHVyZWAgY2FsbFxuICAgKiBtcFNkay5UYWcuZWRpdEljb24oaWQsICdjdXN0b21JY29uSWQnKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0YWdJZCBUaGUgaWQgb2YgdGhlIFRhZyB0byBlZGl0XG4gICAqIEBwYXJhbSBpY29uSWQgVGhlIGlkIG9mIHRoZSBpY29uIHRvIGFwcGx5XG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBlZGl0SWNvbih0YWdJZDogc3RyaW5nLCBpY29uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEVkaXQgdGhlIG9wYWNpdHkgb2YgYSBUYWcuXG4gICAqXG4gICAqIEEgY29tcGxldGVseSB0cmFuc3BhcmVudC9pbnZpc2libGUgVGFnIGlzIHN0aWxsIGludGVyYWN0YWJsZSBhbmQgd2lsbCByZXNwb25kIHRvIG1vdXNlIGhvdmVycyBhbmQgY2xpY2tzLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHRhZ0lkczogc3RyaW5nW107IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIHByZXZpb3VzIGNhbGxzIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICogLy8gbWFrZSB0aGUgZmlyc3QgVGFnIGludmlzaWJsZVxuICAgKiBtcFNkay5UYWcuZWRpdE9wYWNpdHkodGFnSWRzWzBdLCAwKTtcbiAgICpcbiAgICogLy8gbWFrZSBhbm90aGVyIFRhZyB0cmFuc3BhcmVudFxuICAgKiBtcFNkay5UYWcuZWRpdE9wYWNpdHkodGFnSWRzWzFdLCAwLjUpO1xuICAgKlxuICAgKiAvLyBhbmQgYW5vdGhlciBjb21wbGV0ZWx5IG9wYXF1ZVxuICAgKiBtcFNkay5UYWcuZWRpdE9wYWNpdHkodGFnSWRzWzJdLCAxKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIFRhZyB0byBlZGl0XG4gICAqIEBwYXJhbSBvcGFjaXR5IFRoZSB0YXJnZXQgb3BhY2l0eSBmb3IgdGhlIFRhZyBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBlZGl0T3BhY2l0eShpZDogc3RyaW5nLCBvcGFjaXR5OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG5cbiAgLyoqXG4gICAqIEVkaXQgdGhlIHN0ZW0gb2YgYSBUYWdcbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nID0gdGFnRGF0YVswXS5pZDsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggYSBwcmV2aW91cyBjYWxsIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICpcbiAgICogLy8gbWFrZSB0aGUgZmlyc3QgVGFnIGhhdmUgYW4gaW52c2libGUgc3RlbVxuICAgKiBtcFNkay5UYWcuZWRpdFN0ZW0odGFnSWQsIHtzdGVtVmlzaWJsZTogZmFsc2V9KTtcbiAgICpcbiAgICogLy8gbWFrZSBhbm90aGVyIFRhZyBoYXZlIGEgbG9uZyBzdGVtXG4gICAqIG1wU2RrLlRhZy5lZGl0U3RlbSh0YWdJZCwge3N0ZW1IZWlnaHQ6IDF9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgVGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIHN0ZW1PcHRpb25zIFdoYXQgdG8gY2hhbmdlIGFib3V0IHRoZSBUYWcncyBzdGVtIC0gY2FuIGluY2x1ZGUgc3RlbUhlaWdodCBhbmQgc3RlbVZpc2libGVcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjcwLjEwLTAtZ2U5Y2I4M2IyOGNcbiAgICovXG4gIGVkaXRTdGVtKHRhZ1NpZDogc3RyaW5nLCBvcHRpb25zOiBQYXJ0aWFsPFRhZy5TdGVtSGVpZ2h0RWRpdE9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogTW92ZSBhbmQgcmVvcmllbnQgYSBUYWcuXG4gICAqXG4gICAqIFNlZSBbW1BvaW50ZXIuaW50ZXJzZWN0aW9uXV0gZm9yIGEgd2F5IHRvIHJldHJpZXZlIGEgbmV3IGBhbmNob3JQb3NpdGlvbmAgYW5kIGBzdGVtVmVjdG9yYC5cbiAgICpcbiAgICogKipOb3RlKio6IHRoZXNlIGNoYW5nZXMgYXJlIG5vdCBwZXJzaXN0ZWQgYmV0d2VlbiByZWZyZXNoZXMgb2YgU2hvd2Nhc2UuIFRoZXkgYXJlIG9ubHkgdmFsaWQgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIgc2Vzc2lvbi5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKlxuICAgKiBtcFNkay5UYWcuZWRpdFBvc2l0aW9uKHRhZ0lkLCB7XG4gICAqICBhbmNob3JQb3NpdGlvbjoge1xuICAgKiAgICB4OiAwLFxuICAgKiAgICB5OiAwLFxuICAgKiAgICB6OiAwLFxuICAgKiAgfSxcbiAgICogIHN0ZW1WZWN0b3I6IHsgLy8gbWFrZSB0aGUgVGFnIHN0aWNrIHN0cmFpZ2h0IHVwIGFuZCBtYWtlIGl0IDAuMzAgbWV0ZXJzICh+MSBmb290KSB0YWxsXG4gICAqICAgIHg6IDAsXG4gICAqICAgIHk6IDAuMzAsXG4gICAqICAgIHo6IDAsXG4gICAqICB9LFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIFRhZyB0byByZXBvc2l0aW9uXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBuZXcgYW5jaG9yUG9zaXRpb24sIHN0ZW1WZWN0b3IgYW5kL29yIHJvb21JZCB0byBhc3NvY2lhdGUgdGhlIHRhZyB3aXRoLlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgZWRpdFBvc2l0aW9uKGlkOiBzdHJpbmcsIG9wdGlvbnM6IFBhcnRpYWw8VGFnLlBvc2l0aW9uT3B0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIG9uZSBvciBtb3JlIFRhZ3MgZnJvbSBTaG93Y2FzZS5cbiAgICpcbiAgICogKipOb3RlKio6IHRoZXNlIGNoYW5nZXMgYXJlIG5vdCBwZXJzaXN0ZWQgYmV0d2VlbiByZWZyZXNoZXMgb2YgU2hvd2Nhc2UuIFRoZXkgYXJlIG9ubHkgdmFsaWQgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIgc2Vzc2lvbi5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZHM6IHN0cmluZ1tdOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKiAvLyByZW1vdmUgb25lIHRhZ1xuICAgKiBtcFNkay5UYWcucmVtb3ZlKHRhZ0lkc1swXSk7XG4gICAqXG4gICAqIC8vIG9yIHJlbW92ZSBtdWx0aXBsZSBhdCB0aGUgc2FtZSB0aW1lXG4gICAqIG1wU2RrLlRhZy5yZW1vdmUoLi4udGFnSWRzKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBpZHMgVGhlIFRhZ3MnIGlkcyB0byBiZSByZW1vdmVkLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2l0aCBhbiBhcnJheSBvZiBUYWcgaWRzIHRoYXQgd2VyZSBhY3R1YWxseSByZW1vdmVkLlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgcmVtb3ZlKC4uLmlkczogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpY29uIG9mIHRoZSBUYWcgZGlzYyBiYWNrIHRvIGl0cyBvcmlnaW5hbCBpY29uLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHRhZ0lkczogc3RyaW5nW107IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIGEgcHJldmlvdXMgY2FsbCB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqXG4gICAqIC8vIHJlc2V0IHRoZSBpY29uIG9mIHRoZSBmaXJzdCBUYWcgdG8gaXRzIG9yaWdpbmFsXG4gICAqIG1wU2RrLlRhZy5yZXNldEljb24odGFnSWRzWzBdLmlkKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIFRhZyB0byByZXNldFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgcmVzZXRJY29uKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIG92ZXJoZWFkIG5hdmlnYXRpb24gVUlcbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiAvLyBoaWRlIHRoZSBjb250cm9sc1xuICAgKiBtcFNkay5UYWcudG9nZ2xlTmF2Q29udHJvbHMoZmFsc2UpO1xuICAgKlxuICAgKiAvLyBzaG93IHRoZSBjb250cm9sc1xuICAgKiBtcFNkay5UYWcudG9nZ2xlTmF2Q29udHJvbHModHJ1ZSk7XG4gICAqXG4gICAqIC8vIHRvZ2dsZSB0aGUgY3VycmVudCB2aXNpYmlsaXR5IG9mIHRoZSBjb250cm9sc1xuICAgKiBtcFNkay5UYWcudG9nZ2xlTmF2Q29udHJvbHMoKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBlbmFibGVcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMjMuMy4xXG4gICAqL1xuICB0b2dnbGVOYXZDb250cm9scyhlbmFibGU/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBkb2NrIHNldHRpbmcgdG8gaGlkZSBkb2NrIGJ1dHRvbnMgaW4gYWxsIHRhZ3MuXG4gICAqXG4gICAqIERpc2FibGluZyB0aGUgZG9jayBzZXR0aW5nIHdpbGwgcmVtb3ZlIHRoZSBkb2NrIGJ1dHRvbnMgZnJvbSBhbGwgdGFncy5cbiAgICogRW5hYmxpbmcgdGhlIGRvY2sgc2V0dGluZyBkb2VzIG5vdCBhdXRvbWF0aWNhbGx5IHNob3cgdGhlIGRvY2sgYnV0dG9uIGluIGFsbCB0YWdzLlxuICAgKiBUaGUgZG9jayBidXR0b24gd2lsbCBvbmx5IGJlIGRpc3BsYXllZCBpbiBhIHRhZyBpZiBib3RoIHRoZSBkb2NrIHNldHRpbmcgaXMgdHJ1ZSBhbmQgZG9ja2luZyBpcyBhbGxvd2VkIGJ5IHRoZSB0YWcgKHNlZSBbW1RhZy5hbGxvd0FjdGlvbl1dKS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiAvLyBoaWRlIHRoZSBkb2NrIGJ1dHRvbnNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZURvY2tpbmcoZmFsc2UpO1xuICAgKlxuICAgKiAvLyBzaG93IHRoZSBkb2NrIGJ1dHRvbnNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZURvY2tpbmcodHJ1ZSk7XG4gICAqXG4gICAqIC8vIHRvZ2dsZSB0aGUgY3VycmVudCB2aXNpYmlsaXR5IG9mIHRoZSBkb2NrIGJ1dHRvbnNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZURvY2tpbmcoKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBlbmFibGVcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMjMuNC4yXG4gICAqL1xuICB0b2dnbGVEb2NraW5nKGVuYWJsZT86IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIHNoYXJlIHNldHRpbmcgdG8gaGlkZSBzaGFyZSBidXR0b25zIGluIGFsbCB0YWdzLlxuICAgKlxuICAgKiBEaXNhYmxpbmcgdGhlIHNoYXJlIHNldHRpbmcgd2lsbCByZW1vdmUgdGhlIHNoYXJlIGJ1dHRvbnMgZnJvbSBhbGwgdGFncy5cbiAgICogRW5hYmxpbmcgdGhlIHNoYXJlIHNldHRpbmcgZG9lcyBub3QgYXV0b21hdGljYWxseSBzaG93IHRoZSBzaGFyZSBidXR0b24gaW4gYWxsIHRhZ3MuXG4gICAqIFRoZSBzaGFyZSBidXR0b24gd2lsbCBvbmx5IGJlIGRpc3BsYXllZCBpbiBhIHRhZyBpZiBib3RoIHRoZSBzaGFyZSBzZXR0aW5nIGlzIHRydWUgYW5kIHNoYXJpbmcgaXMgYWxsb3dlZCBieSB0aGUgdGFnIChzZWUgW1tUYWcuYWxsb3dBY3Rpb25dXSkuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gaGlkZSB0aGUgc2hhcmUgYnV0dG9uc1xuICAgKiBtcFNkay5UYWcudG9nZ2xlU2hhcmluZyhmYWxzZSk7XG4gICAqXG4gICAqIC8vIHNob3cgdGhlIHNoYXJlIGJ1dHRvbnNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZVNoYXJpbmcodHJ1ZSk7XG4gICAqXG4gICAqIC8vIHRvZ2dsZSB0aGUgY3VycmVudCB2aXNpYmlsaXR5IG9mIHRoZSBzaGFyZSBidXR0b25zXG4gICAqIG1wU2RrLlRhZy50b2dnbGVTaGFyaW5nKCk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gZW5hYmxlXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDIzLjQuMlxuICAgKi9cbiAgdG9nZ2xlU2hhcmluZyhlbmFibGU/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUsIFZlY3RvcjMgfSBmcm9tICcuL2dsb2JhbCc7XG5pbXBvcnQgdHlwZSB7IE1vZGUgfSBmcm9tICcuL21vZGUnO1xuXG4vKipcbiAqIFNhbXBsZSBjdXN0b20gdG91ci5cbiAqXG4gKiBgYGBcbiAqIGNvbnN0IGNvbm5lY3QgPSBmdW5jdGlvbihzZGspIHtcbiAqICAgY29uc3QgbXBTZGsgPSBzZGs7XG4gKlxuICogICBtcFNkay5Ub3VyLkV2ZW50Lm9uKFRvdXIuRXZlbnQuU1RFUFBFRCwgZnVuY3Rpb24odG91ckluZGV4KXtcbiAqICAgICBjb25zb2xlLmxvZygnVG91ciBpbmRleCAnICsgdG91ckluZGV4KTtcbiAqICAgfSk7XG4gKiAgIG1wU2RrLlRvdXIuRXZlbnQub24oVG91ci5FdmVudC5TVEFSVEVELCBmdW5jdGlvbigpe1xuICogICAgIGNvbnNvbGUubG9nKCdUb3VyIHN0YXJ0ZWQnKTtcbiAqICAgfSk7XG4gKiAgIG1wU2RrLlRvdXIuRXZlbnQub24oVG91ci5FdmVudC5TVE9QUEVELCBmdW5jdGlvbigpe1xuICogICAgIGNvbnNvbGUubG9nKCdUb3VyIHN0b3BwZWQnKTtcbiAqICAgfSk7XG4gKlxuICogICBtcFNkay5Ub3VyLmdldERhdGEoKVxuICogICAgIC50aGVuKGZ1bmN0aW9uKHRvdXIpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCd0b3VyIGhhcyAnICsgdG91ci5sZW5ndGggKyAnIHN0b3BzJyk7XG4gKiAgICAgICByZXR1cm4gbXBTZGsuVG91ci5zdGFydCgwKTtcbiAqICAgICB9KVxuICogICAgIC50aGVuKGZ1bmN0aW9uKCl7XG4gKiAgICAgICAvLyBjb25zb2xlICdUb3VyIHN0YXJ0ZWQnXG4gKiAgICAgICAvLyBjb25zb2xlIC0+ICdUb3VyIGluZGV4IDAnXG4gKiAgICAgICByZXR1cm4gbXBTZGsuVG91ci5uZXh0KCk7XG4gKiAgICAgfSlcbiAqICAgICAudGhlbihmdW5jdGlvbigpe1xuICogICAgICAgLy8gY29uc29sZSAtPiAnVG91ciBpbmRleCAxJ1xuICogICAgICAgcmV0dXJuIG1wU2RrLlRvdXIuc3RlcCgzKTtcbiAqICAgICB9KVxuICogICAgIC50aGVuKGZ1bmN0aW9uKCl7XG4gKiAgICAgICAvLyBjb25zb2xlIC0+ICdUb3VyIGluZGV4IDMnXG4gKiAgICAgICByZXR1cm4gbXBTZGsuVG91ci5wcmV2KCk7XG4gKiAgICAgfSlcbiAqICAgICAudGhlbihmdW5jdGlvbigpe1xuICogICAgICAgLy8gY29uc29sZSAtPiAnVG91ciBpbmRleCAyJ1xuICogICAgICAgLy8gY29uc29sZSAtPiAnVG91ciBzdG9wcGVkJ1xuICogICAgICAgcmV0dXJuIG1wU2RrLlRvdXIuc3RvcCgpO1xuICogICAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICovXG5leHBvcnQgbmFtZXNwYWNlIFRvdXIge1xuICBleHBvcnQgdHlwZSBTbmFwc2hvdCA9IHtcbiAgICBzaWQ6IHN0cmluZztcbiAgICB0aHVtYm5haWxVcmw6IHN0cmluZztcbiAgICBpbWFnZVVybDogc3RyaW5nO1xuICAgIGlzMzYwOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBtb2RlOiBNb2RlLk1vZGUgfCB1bmRlZmluZWQ7XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgcm90YXRpb246IFZlY3RvcjM7XG4gICAgem9vbTogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgU1RBUlRFRCA9ICd0b3VyLnN0YXJ0ZWQnLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBTVE9QUEVEID0gJ3RvdXIuc3RvcHBlZCcsXG4gICAgLyoqIEBldmVudCAqL1xuICAgIEVOREVEID0gJ3RvdXIuZW5kZWQnLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBTVEVQUEVEID0gJ3RvdXIuc3RlcHBlZCcsXG4gIH1cblxuICBleHBvcnQgdHlwZSBDdXJyZW50U3RlcERhdGEgPSB7XG4gICAgc3RlcDogc3RyaW5nIHwgbnVsbDtcbiAgfTtcblxuICBleHBvcnQgZW51bSBQbGF5U3RhdGUge1xuICAgIElOQUNUSVZFID0gJ3RvdXIuaW5hY3RpdmUnLFxuICAgIEFDVElWRSA9ICd0b3VyLmFjdGl2ZScsXG4gICAgU1RPUF9TQ0hFRFVMRUQgPSAndG91ci5zdG9wc2NoZWR1bGVkJyxcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIEN1cnJlbnRTdGF0ZURhdGEgPSB7XG4gICAgY3VycmVudDogUGxheVN0YXRlO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEN1cnJlbnRUcmFuc2l0aW9uRGF0YSA9IHtcbiAgICBmcm9tOiBzdHJpbmcgfCBudWxsO1xuICAgIHRvOiBzdHJpbmcgfCBudWxsO1xuICB9O1xufVxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgVG91ciB7XG4gIEV2ZW50OiB0eXBlb2YgVG91ci5FdmVudDtcbiAgUGxheVN0YXRlOiB0eXBlb2YgVG91ci5QbGF5U3RhdGU7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHN0YXJ0cyB0aGUgdG91ci5cbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IHRvdXJJbmRleCA9IDE7XG4gICAqXG4gICAqIG1wU2RrLlRvdXIuc3RhcnQodG91ckluZGV4KVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gVG91ciBzdGFydCBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gVG91ciBzdGFydCBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBzdGFydChpbmRleD86IG51bWJlcik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc3RvcHMgdGhlIHRvdXIuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Ub3VyLnN0b3AoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gVG91ciBzdG9wIGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBUb3VyIHN0b3AgZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgc3RvcCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG1vdmVzIHRoZSBjYW1lcmEgdG8gYSBzcGVjaWZpYyBzbmFwc2hvdCBpbiB0aGUgdG91ci5cbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IG15U3RlcCA9IDI7XG4gICAqIG1wU2RrLlRvdXIuc3RlcChteVN0ZXApXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAqICAgICAvL1RvdXIgc3RlcCBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gVG91ciBzdGVwIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICovXG4gIHN0ZXAoaW5kZXg6IG51bWJlcik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbW92ZXMgdGhlIGNhbWVyYSB0byB0aGUgbmV4dCBzbmFwc2hvdCBpbiB0aGUgdG91ci5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlRvdXIubmV4dCgpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAqICAgICAvLyBUb3VyIG5leHQgY29tcGxldGUuXG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIFRvdXIgbmV4dCBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBuZXh0KCk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbW92ZXMgdGhlIGNhbWVyYSB0byB0aGUgcHJldmlvdXMgc25hcHNob3QgaW4gdGhlIHRvdXIuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Ub3VyLnByZXYoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gVG91ciBwcmV2IGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBUb3VyIHByZXYgZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgcHJldigpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gYXJyYXkgb2YgU25hcHNob3RzLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuVG91ci5nZXREYXRhKClcbiAgICogICAudGhlbihmdW5jdGlvbihzbmFwc2hvdHMpIHtcbiAgICogICAgIC8vIFRvdXIgZ2V0RGF0YSBjb21wbGV0ZS5cbiAgICogICAgIGlmKHNuYXBzaG90cy5sZW5ndGggPiAwKXtcbiAgICogICAgICAgY29uc29sZS5sb2coJ0ZpcnN0IHNuYXBzaG90IHNpZDogJyArIHNuYXBzaG90c1swXS5zaWQpO1xuICAgKiAgICAgICBjb25zb2xlLmxvZygnRmlyc3Qgc25hcHNob3QgbmFtZTogJyArIHNuYXBzaG90c1swXS5uYW1lKTtcbiAgICogICAgICAgY29uc29sZS5sb2coJ0ZpcnN0IHNuYXBzaG90IHBvc2l0aW9uOiAnICsgc25hcHNob3RzWzBdLnBvc2l0aW9uKTtcbiAgICogICAgIH1cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gVG91ciBnZXREYXRhIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICovXG4gIGdldERhdGEoKTogUHJvbWlzZTxUb3VyLlNuYXBzaG90W10+O1xuXG4gIC8qKlxuICAgKiBUaGUgemVyby1pbmRleGVkIGN1cnJlbnQgVG91ciBzdGVwLlxuICAgKiBUaGUgc3RlcCB3aWxsIGJlIG51bGwgaWYgbm8gVG91ciBpcyBjdXJyZW50bHkgcGxheWluZy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlRvdXIuY3VycmVudFN0ZXAuc3Vic2NyaWJlKGZ1bmN0aW9uIChjdXJyZW50KSB7XG4gICAqICAgLy8gdGhlIHN0ZXAgaW5kZXggaGFzIGNoYW5nZWRcbiAgICogICAvLyAwIGZvciB0aGUgZmlyc3Qgc3RlcCwgMSBmb3IgdGhlIHNlY29uZCwgZXRjLlxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHN0ZXAgaXMgJywgY3VycmVudC5zdGVwKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgY3VycmVudFN0ZXA6IElPYnNlcnZhYmxlPFRvdXIuQ3VycmVudFN0ZXBEYXRhPjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBzdGF0ZSBvZiB0aGUgY3VycmVudCBUb3VyLiBSZXR1cm5zIGEgVG91ci5QbGF5U3RhdGUgb2ZcbiAgICogYElOQUNUSVZFYCAobm8gdG91ciBpbiBwcm9ncmVzcyksIGBBQ1RJVkVgICh0b3VyIGluIHByb2dyZXNzKSwgb3IgYFNUT1BfU0NIRURVTEVEYFxuICAgKiAodG91ciBpbiBwcm9ncmVzcywgYnV0IGEgc3RvcCBoYXMgYmVlbiBxdWV1ZWQgYnkgdGhlIHVzZXIgb3IgYXV0b21hdGljYWxseSBieSB0aGUgdG91ciBlbmRpbmcpLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuVG91ci5zdGF0ZS5zdWJzY3JpYmUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAqICAgLy8gdGhlIHN0YXRlIGhhcyBjaGFuZ2VkXG4gICAqICAgY29uc29sZS5sb2coJ0N1cnJlbnQgc3RhdGUgaXMgJywgc3RhdGUuY3VycmVudCk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIHN0YXRlOiBJT2JzZXJ2YWJsZTxUb3VyLkN1cnJlbnRTdGF0ZURhdGE+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBUb3VyJ3MgdHJhbnNpdGlvbi5cbiAgICpcbiAgICogYHsgZnJvbTogc3RyaW5nIHwgbnVsbCwgdG86IHN0cmluZyB8IG51bGwgfWAuXG4gICAqXG4gICAqIGBmcm9tYCBjYW4gYmUgYG51bGxgIHdoZW4gdHJhbnNpdGlvbmluZyBmcm9tIG91dHNpZGUgb2YgYSB0b3VyLiBgZnJvbWAgYW5kIGB0b2Agd2lsbCBib3RoIGJlIGBudWxsYCB3aGVuXG4gICAqIHRoZXJlIGlzIG5vIGFjdGl2ZSB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuVG91ci50cmFuc2l0aW9uLnN1YnNjcmliZShmdW5jdGlvbiAodHJhbnNpdGlvbikge1xuICAgKiAgIC8vIHRoZSB0cmFuc2l0aW9uIGhhcyBjaGFuZ2VkXG4gICAqICAgY29uc29sZS5sb2coJ0N1cnJlbnQgdHJhbnNpdGlvbiBpcyAnLCB0cmFuc2l0aW9uLmZyb20sIHRyYW5zaXRpb24udG8pO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICB0cmFuc2l0aW9uOiBJT2JzZXJ2YWJsZTxUb3VyLkN1cnJlbnRUcmFuc2l0aW9uRGF0YT47XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvbG9yLCBJRGlzcG9zYWJsZSwgSVN1YnNjcmlwdGlvbiwgVmVjdG9yMyB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB0eXBlICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHR5cGUgeyBFZmZlY3RDb21wb3NlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9FZmZlY3RDb21wb3Nlcic7XG5cbi8qKlxuICogVGhlIFNjZW5lIG5hbWVzcGFjZSBpcyBjdXJyZW50bHkgb25seSBhdmFpbGFibGUgZm9yIEJ1bmRsZSBTREsgZGlzdHJpYnV0aW9ucy5cbiAqIFtMZWFybiBtb3JlIGFib3V0IHRoZSBCdW5kbGUgU0RLXShodHRwczovL21hdHRlcnBvcnQuZ2l0aHViLmlvL3Nob3djYXNlLXNkay9zZGtidW5kbGVfaG9tZS5odG1sKVxuICovXG5leHBvcnQgbmFtZXNwYWNlIFNjZW5lIHtcbiAgZXhwb3J0IGVudW0gQ29tcG9uZW50IHtcbiAgICBPQkpfTE9BREVSID0gJ21wLm9iakxvYWRlcicsXG4gICAgRkJYX0xPQURFUiA9ICdtcC5mYnhMb2FkZXInLFxuICAgIERBRV9MT0FERVIgPSAnbXAuZGFlTG9hZGVyJyxcbiAgICBHTFRGX0xPQURFUiA9ICdtcC5nbHRmTG9hZGVyJyxcbiAgICBTQ1JPTExJTkdfVFVCRSA9ICdtcC5zY3JvbGxpbmdUdWJlJyxcbiAgICBUUkFOU0ZPUk1fQ09OVFJPTFMgPSAnbXAudHJhbnNmb3JtQ29udHJvbHMnLFxuICAgIExJR0hUU19DT01QT05FTlQgPSAnbXAubGlnaHRzJyxcbiAgICBQT0lOVF9MSUdIVCA9ICdtcC5wb2ludExpZ2h0JyxcbiAgICBESVJFQ1RJT05BTF9MSUdIVCA9ICdtcC5kaXJlY3Rpb25hbExpZ2h0JyxcbiAgICBBTUJJRU5UX0xJR0hUID0gJ21wLmFtYmllbnRMaWdodCcsXG4gICAgQ0FNRVJBID0gJ21wLmNhbWVyYScsXG4gICAgSU5QVVQgPSAnbXAuaW5wdXQnLFxuICAgIFhSID0gJ21wLnhyJyxcbiAgfVxuXG4gIC8vIEF1dG9jb21wbGV0ZSBmb3IgbmFtZWQgY29tcG9uZW50IGZhY3Rvcmllc1xuICBleHBvcnQgdHlwZSBTY2VuZUNvbXBvbmVudE5hbWUgPVxuICAgIC8vIGFueSB2YWx1ZXMgZnJvbSBDb21wb25lbnRUeXBlIGVudW0gLSBzZWU6XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUyMzk2NzA2LzE4ODQ5MTMwXG4gICAgYCR7Q29tcG9uZW50fWBcbiAgICAvLyBhZGRpbmcgYChzdHJpbmcgJiB7fSlgIGVuYWJsZXMgYW55IHN0cmluZyB0byBiZSB1c2VkIHdoaWxlIGFsc28gaW5jbHVkaW5nXG4gICAgLy8gYXV0b2NvbXBsZXRlIG9wdGlvbnMgZm9yIHRoZSBsaXN0ZWQgdmFsdWVzXG4gICAgLy8gbGludCBwcmVmZXJzIFJlY29yZDxzdHJpbmcsIGFueT4gYnV0IGZvciBzb21lIHJlYXNvbiB0aGF0IGRvZXNuJ3QgZXZhbHVhdGVcbiAgICAvLyB0aGUgc2FtZSBhcyBzdHJpbmcgJiB7fSwgc28gd2UncmUgdHVybmluZyBsaW50aW5nIG9mZiBmb3IgdGhlIG5leHQgbGluZVxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgfCAoc3RyaW5nICYge30pO1xuXG4gIGludGVyZmFjZSBMaWdodENvbXBvbmVudENvbW1vbk9wdGlvbnMge1xuICAgIC8qKiBJZiB0cnVlIHRoZSBhbWJpZW50IGxpZ2h0IGlzIGFjdGl2ZSBpbiB0aGUgc2NlbmUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGB0cnVlYCAqL1xuICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgIC8qKiBUaGUgY29sb3Igb2YgdGhlIGxpZ2h0LiBFYWNoIGNvbG9yIGNvbXBvbmVudCBpcyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGB7IHI6IDEuMCwgZzogMS4wLCBiOiAxLjAgfWBcbiAgICAgKi9cbiAgICBjb2xvcj86IENvbG9yO1xuICAgIC8qKiBUaGUgbGlnaHQgaW50ZW5zaXR5LlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgMS4wYCBmb3IgYW1iaWVudCBsaWdodHMsIGAyYCBmb3Igb3RoZXJzLlxuICAgICAqL1xuICAgIGludGVuc2l0eT86IG51bWJlcjtcbiAgfVxuICBpbnRlcmZhY2UgTG9hZGVyQ29tbW9uT3B0aW9ucyB7XG4gICAgLyoqIFRoZSB1cmwgdG8gdGhlIGZpbGUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGAnJ2BcbiAgICAgKi9cbiAgICB1cmw/OiBzdHJpbmc7XG4gICAgLyoqIElmIHRydWUsIHRoZSBtb2RlbCBpcyB2aXNpYmxlLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgdHJ1ZWBcbiAgICAgKi9cbiAgICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgICAvKiogVGhlIGxvY2FsIG9mZnNldCBvZiB0aGUgbW9kZWwuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGB7IHg6IDAsIHk6IDAsIHo6IDAgfWBcbiAgICAgKi9cbiAgICBsb2NhbFBvc2l0aW9uPzogVmVjdG9yMztcbiAgICAvKiogVGhlIGxvY2FsIHJvdGF0aW9uIG9mIHRoZSBtb2RlbCBpbiBldWxlciBhbmdsZXMuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGB7IHg6IDAsIHk6IDAsIHo6IDAgfWBcbiAgICAgKi9cbiAgICBsb2NhbFJvdGF0aW9uPzogVmVjdG9yMztcbiAgICAvKiogVGhlIGxvY2FsIHNjYWxlIG9mIHRoZSBtb2RlbC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgYHsgeDogMSwgeTogMSwgejogMSB9YFxuICAgICAqL1xuICAgIGxvY2FsU2NhbGU/OiBWZWN0b3IzO1xuICAgIC8qKiBXaGVuIHNldCwgdGhlIGNvbGxpZGVyIG91dHB1dCBpcyBzZXQgdG8gdGhlIGxvYWRlZCBtb2RlbC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgYHRydWVgXG4gICAgICovXG4gICAgY29sbGlkZXJFbmFibGVkPzogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgU2NlbmVDb21wb25lbnRPcHRpb25zIGV4dGVuZHMgUmVjb3JkPFNjZW5lQ29tcG9uZW50TmFtZSwgYW55PiB7XG4gICAgW0NvbXBvbmVudC5BTUJJRU5UX0xJR0hUXTogTGlnaHRDb21wb25lbnRDb21tb25PcHRpb25zO1xuICAgIFtDb21wb25lbnQuRElSRUNUSU9OQUxfTElHSFRdOiBMaWdodENvbXBvbmVudENvbW1vbk9wdGlvbnMgJiB7XG4gICAgICAvKiogVGhlIHdvcmxkIHNwYWNlIHBvc2l0aW9uIG9mIHRoZSBkaXJlY3Rpb25hbCBsaWdodC5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB7IHg6IDEsIHk6IDUsIHo6IDF9YFxuICAgICAgICovXG4gICAgICBwb3NpdGlvbj86IFZlY3RvcjM7XG4gICAgICAvKiogVGhlIGRpcmVjdGlvbmFsIGxpZ2h04oCZcyB3b3JsZCBzcGFjZSB0YXJnZXQgcG9zaXRpb24uXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgeyB4OiAwLCB5OiAwLCB6OiAwIH1gXG4gICAgICAgKi9cbiAgICAgIHRhcmdldD86IFZlY3RvcjM7XG4gICAgICAvKiogRW5hYmxlcyBkZWJ1Z2dpbmcgdmlzdWFscy5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGBmYWxzZWBcbiAgICAgICAqL1xuICAgICAgZGVidWc/OiBib29sZWFuO1xuICAgIH07XG4gICAgW0NvbXBvbmVudC5QT0lOVF9MSUdIVF06IExpZ2h0Q29tcG9uZW50Q29tbW9uT3B0aW9ucyAmIHtcbiAgICAgIC8qKiBUaGUgd29ybGQgc3BhY2UgcG9zaXRpb24gb2YgdGhlIHBvaW50IGxpZ2h0LlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYHsgeDogMSwgeTogNSwgejogMSB9YFxuICAgICAgICovXG4gICAgICBwb3NpdGlvbj86IFZlY3RvcjM7XG4gICAgICAvKiogTWF4aW11bSByYW5nZSBvZiB0aGUgbGlnaHQuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgMGAgKG5vIGxpbWl0KVxuICAgICAgICovXG4gICAgICBkaXN0YW5jZT86IG51bWJlcjtcbiAgICAgIC8qKiBUaGUgYW1vdW50IHRoZSBsaWdodCBkaW1zIGZyb20gdGhlIHBvaW50IGxpZ2h0LlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYDFgXG4gICAgICAgKi9cbiAgICAgIGRlY2F5PzogbnVtYmVyO1xuICAgICAgLyoqIEVuYWJsZXMgZGVidWdnaW5nIHZpc3VhbHMuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgZmFsc2VgXG4gICAgICAgKi9cbiAgICAgIGRlYnVnPzogYm9vbGVhbjtcbiAgICB9O1xuXG4gICAgW0NvbXBvbmVudC5HTFRGX0xPQURFUl06IExvYWRlckNvbW1vbk9wdGlvbnM7XG4gICAgW0NvbXBvbmVudC5EQUVfTE9BREVSXTogTG9hZGVyQ29tbW9uT3B0aW9ucztcbiAgICBbQ29tcG9uZW50LkZCWF9MT0FERVJdOiBMb2FkZXJDb21tb25PcHRpb25zO1xuICAgIFtDb21wb25lbnQuT0JKX0xPQURFUl06IExvYWRlckNvbW1vbk9wdGlvbnMgJiB7XG4gICAgICAvKiogVGhlIHVybCB0byB0aGUgbWF0ZXJpYWwgZmlsZS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGAnJ2BcbiAgICAgICAqL1xuICAgICAgbWF0ZXJpYWxVcmw/OiBzdHJpbmc7XG4gICAgfTtcblxuICAgIFtDb21wb25lbnQuVFJBTlNGT1JNX0NPTlRST0xTXToge1xuICAgICAgLyoqIElmIHRydWUgdGhlIHRyYW5zZm9ybSBjb250cm9sIGlzIHZpc2libGUgaW4gdGhlIHNjZW5lLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYHRydWVgXG4gICAgICAgKi9cbiAgICAgIHZpc2libGU/OiBib29sZWFuO1xuICAgICAgLyoqIFRoZSB0cmFuc2Zvcm1hdGlvbiBtb2RlLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYHRyYW5zbGF0ZWBcbiAgICAgICAqL1xuICAgICAgbW9kZT86ICd0cmFuc2xhdGUnIHwgJ3JvdGF0ZScgfCAnc2NhbGUnO1xuICAgICAgLyoqIFRoZSB0aHJlZS5qcyBvYmplY3QgYmVpbmcgY29udHJvbGxlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGBudWxsYFxuICAgICAgICovXG4gICAgICBzZWxlY3Rpb24/OiBUSFJFRS5PYmplY3QzRCB8IG51bGw7XG4gICAgICAvKiogWCBheGlzIGNvbnRyb2wgdmlzaWJpbGl0eS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAgICovXG4gICAgICBzaG93WD86IGJvb2xlYW47XG4gICAgICAvKiogWSBheGlzIGNvbnRyb2wgdmlzaWJpbGl0eS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAgICovXG4gICAgICBzaG93WT86IGJvb2xlYW47XG4gICAgICAvKiogWiBheGlzIGNvbnRyb2wgdmlzaWJpbGl0eS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAgICovXG4gICAgICBzaG93Wj86IGJvb2xlYW47XG4gICAgICAvKiogVGhlIHNpemUgb2YgdGhlIHRyYW5zZm9ybSBjb250cm9sLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYDFgXG4gICAgICAgKi9cbiAgICAgIHNpemU/OiBudW1iZXI7XG4gICAgfTtcblxuICAgIFtDb21wb25lbnQuSU5QVVRdOiB7XG4gICAgICAvKiogSWYgdHJ1ZSwgZXZlbnRzIHdpbGwgYmUgYXZhaWxhYmxlIGZvciBiaW5kaW5nIG9yIHNweWluZy4gSWYgZmFsc2UsIG5vIGV2ZW50cyB3aWxsIGZpcmUuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgdHJ1ZWBcbiAgICAgICAqL1xuICAgICAgZXZlbnRzRW5hYmxlZD86IGJvb2xlYW47XG4gICAgICAvKiogSWYgc2V0IHRvIGZhbHNlLCBhbGwgc2hvd2Nhc2UgdXNlciBiYXNlZCBuYXZpZ2F0aW9uIHdpbGwgYmUgdHVybmVkIG9mZi5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAgICovXG4gICAgICB1c2VyTmF2aWdhdGlvbkVuYWJsZWQ/OiBib29sZWFuO1xuICAgICAgLyoqIElmIHNldCB0byBmYWxzZSwgdGhlIGlucHV0IGNvbXBvbmVudCB3aWxsIG9ubHkgcmVjZWl2ZSB1bmhhbmRsZWQgZXZlbnRzLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYHRydWVgXG4gICAgICAgKi9cbiAgICAgIHVuZmlsdGVyZWQ/OiBib29sZWFuO1xuICAgIH07XG5cbiAgICBbQ29tcG9uZW50LkNBTUVSQV06IHtcbiAgICAgIC8qKiBJZiB0cnVlLCB0aGlzIGNvbXBvbmVudHMgYWNxdWlyZXMgY29udHJvbCBvZiB0aGUgY2FtZXJhLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYGZhbHNlYFxuICAgICAgICovXG4gICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgIC8qKiBBIHRocmVlLmpzIGNhbWVyYSBvYmplY3QuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgbnVsbGBcbiAgICAgICAqL1xuICAgICAgY2FtZXJhPzogVEhSRUUuQ2FtZXJhIHwgbnVsbDtcbiAgICB9O1xuXG4gICAgW0NvbXBvbmVudC5YUl06IFJlY29yZDxzdHJpbmcsIG5ldmVyPjtcblxuICAgIFtuYW1lOiBzdHJpbmddOiB1bmtub3duO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgUHJlZGVmaW5lZE91dHB1dHMgPSB7XG4gICAgLyoqXG4gICAgICogU2V0IHRoaXMgdG8gYW55IE9iamVjdDNEIGFuZCBpdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzY2VuZS5cbiAgICAgKi9cbiAgICBvYmplY3RSb290OiBUSFJFRS5PYmplY3QzRCB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyB0byBhbnkgT2JqZWN0M0QgYW5kIGl0IHdpbGwgYmUgaW50ZXJhY3RhYmxlLiBTZWUgW1tJQ29tcG9uZW50Lm9uRXZlbnRdXVxuICAgICAqL1xuICAgIGNvbGxpZGVyOiBUSFJFRS5PYmplY3QzRCB8IG51bGw7XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gSW50ZXJhY3Rpb25UeXBlIHtcbiAgICAvKiogQ0xJQ0sgZXZlbnRzICovXG4gICAgQ0xJQ0sgPSAnSU5URVJBQ1RJT04uQ0xJQ0snLFxuICAgIC8qKiBIT1ZFUiBldmVudHMgKi9cbiAgICBIT1ZFUiA9ICdJTlRFUkFDVElPTi5IT1ZFUicsXG4gICAgLyoqIERSQUcgZXZlbnRzIChtb3VzZWRvd24gdGhlbiBtb3ZlKSAqL1xuICAgIERSQUcgPSAnSU5URVJBQ1RJT04uRFJBRycsXG4gICAgRFJBR19CRUdJTiA9ICdJTlRFUkFDVElPTi5EUkFHX0JFR0lOJyxcbiAgICBEUkFHX0VORCA9ICdJTlRFUkFDVElPTi5EUkFHX0VORCcsXG4gICAgUE9JTlRFUl9NT1ZFID0gJ0lOVEVSQUNUSU9OLlBPSU5URVJfTU9WRScsXG4gICAgUE9JTlRFUl9CVVRUT04gPSAnSU5URVJBQ1RJT04uUE9JTlRFUl9CVVRUT04nLFxuICAgIFNDUk9MTCA9ICdJTlRFUkFDVElPTi5TQ1JPTEwnLFxuICAgIEtFWSA9ICdJTlRFUkFDVElPTi5LRVknLFxuICAgIExPTkdfUFJFU1NfU1RBUlQgPSAnSU5URVJBQ1RJT04uTE9OR19QUkVTU19TVEFSVCcsXG4gICAgTE9OR19QUkVTU19FTkQgPSAnSU5URVJBQ1RJT04uTE9OR19QUkVTU19FTkQnLFxuICAgIE1VTFRJX1NXSVBFID0gJ0lOVEVSQUNUSU9OLk1VTFRJX1NXSVBFJyxcbiAgICBNVUxUSV9TV0lQRV9FTkQgPSAnSU5URVJBQ1RJT04uTVVMVElfU1dJUEVfRU5EJyxcbiAgICBQSU5DSCA9ICdJTlRFUkFDVElPTi5QSU5DSCcsXG4gICAgUElOQ0hfRU5EID0gJ0lOVEVSQUNUSU9OLlBJTkNIX0VORCcsXG4gICAgUk9UQVRFID0gJ0lOVEVSQUNUSU9OLlJPVEFURScsXG4gICAgUk9UQVRFX0VORCA9ICdJTlRFUkFDVElPTi5ST1RBVEVfRU5EJyxcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcGF5bG9hZCBmb3IgYSAzRCBpbnRlcmFjdGlvbiBldmVudC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEludGVyYWN0aW9uRXZlbnQgPSB7XG4gICAgaG92ZXI/OiBib29sZWFuO1xuICAgIGNvbGxpZGVyOiBUSFJFRS5PYmplY3QzRDtcbiAgICBwb2ludDogVEhSRUUuVmVjdG9yMyB8IG51bGw7XG4gICAgbm9ybWFsOiBUSFJFRS5WZWN0b3IzIHwgbnVsbDtcbiAgICBpbnB1dDogdW5rbm93bjtcbiAgfTtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgYSBwYXRoIHdpdGggcmVnYXJkcyB0byB3aGljaCBwcm9wZXJ0eSBvZiBhIGNvbXBvbmVudCBpdCByZXByZXNlbnRzXG4gICAqL1xuICBleHBvcnQgZW51bSBQYXRoVHlwZSB7XG4gICAgSU5QVVQgPSAnaW5wdXQnLFxuICAgIE9VVFBVVCA9ICdvdXRwdXQnLFxuICAgIEVWRU5UID0gJ2V2ZW50JyxcbiAgICBFTUlUID0gJ2VtaXQnLFxuICB9XG5cbiAgLyoqXG4gICAqICoqU2NlbmUgTm9kZSoqXG4gICAqXG4gICAqIEEgc2NlbmUgbm9kZSBpcyBhbiBvYmplY3Qgd2l0aCBhIDNEIHRyYW5zZm9ybTogcG9zaXRpb24sIHJvdGF0aW9uLCBhbmQgc2NhbGUuXG4gICAqIEl0IGNhbiBjb250YWluIGEgY29sbGVjdGlvbiBvZiBjb21wb25lbnRzIGFuZCBtYW5hZ2VzIHRoZWlyIGxpZmUgY3ljbGUuXG4gICAqXG4gICAqIEEgc2NlbmUgbm9kZSBoYXMgdGhlIGZvbGxvd2luZyBzdGF0ZXM6XG4gICAqXG4gICAqICoqSW5pdGlhbGl6aW5nKiogLSBhZnRlciBjb25zdHJ1Y3Rpb24gYnV0IGJlZm9yZSBzdGFydCBoYXMgYmVlbiBjYWxsZWQ8YnI+XG4gICAqICoqVXBkYXRpbmcqKiAtIGFmdGVyIHN0YXJ0IGhhcyBiZWVuIGNhbGxlZCBidXQgYmVmb3JlIHN0b3AgaGFzIGJlZW4gY2FsbGVkPGJyPlxuICAgKiAqKkRlc3Ryb3llZCoqIC0gYWZ0ZXIgc3RvcCBoYXMgYmVlbiBjYWxsZWRcbiAgICpcbiAgICogQ29tcG9uZW50cyBjYW4gb25seSBiZSBhZGRlZCBkdXJpbmcgdGhlIEluaXRpYWxpemluZyBzdGF0ZS4gQSBzY2VuZSBub2RlIGNhbm5vdCBiZSByZXN0YXJ0ZWQuXG4gICAqXG4gICAqIGBgYFxuICAgKiBzZGsuU2NlbmUuY3JlYXRlTm9kZSgpLnRoZW4oZnVuY3Rpb24obm9kZSkge1xuICAgKiAgICBub2RlLmFkZENvbXBvbmVudCgnbXAuZ2x0ZkxvYWRlcicsIHtcbiAgICogICAgICB1cmw6ICdodHRwOi8vd3d3LnNvbWVNb2RlbFNpdGUuY29tL3JhYmJpdC5nbHRmJ1xuICAgKiAgICB9KTtcbiAgICpcbiAgICogICAgbm9kZS5wb3NpdGlvbi5zZXQoMCwgMSwgMCk7XG4gICAqICAgIG5vZGUuc3RhcnQoKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBTZXR0aW5nIHRoZSBwb3NpdGlvbiwgcm90YXRpb24sIG9yIHNjYWxlIG9mIGEgc2NlbmUgbm9kZSBhZmZlY3RzIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElOb2RlIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBjb21wb25lbnQgYW5kIGFkZHMgaXQgdG8gdGhlIG5vZGVzIGludGVybmFsIGNvbXBvbmVudCBsaXN0LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3RoaW5nIGlmIHRoZSBub2RlIGlzIGluIHRoZSBPcGVyYXRpbmcgb3IgRGVzdHJveWVkIHN0YXRlLlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSByZWdpc3RlcmVkIGNvbXBvbmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSBpbml0aWFsSW5wdXRzIGluaXRpYWwga2V5LXZhbHVlIHBhaXJzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQgYmVmb3JlIG9uSW5pdCBpcyBjYWxsZWQuXG4gICAgICogSWYgdGhlIGtleXMgZG8gbm90IG1hdGNoIHRoZSBjb21wb25lbnRzIGlucHV0cywgdGhleSBhcmUgaWdub3JlZC5cbiAgICAgKiBAcGFyYW0gaWQgYW4gb3B0aW9uYWwgaWQgZm9yIHRoaXMgY29tcG9uZW50LCBpZiBub3Qgc3BlY2lmaWVkIGFuIGlkIHdpbGwgYmUgY29tcHV0ZWQgZm9yIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQuXG4gICAgICovXG4gICAgYWRkQ29tcG9uZW50PFQgZXh0ZW5kcyBTY2VuZUNvbXBvbmVudE5hbWU+KFxuICAgICAgbmFtZTogVCxcbiAgICAgIGluaXRpYWxJbnB1dHM/OiBTY2VuZUNvbXBvbmVudE9wdGlvbnNbVF0sXG4gICAgICBpZD86IHN0cmluZ1xuICAgICk6IElDb21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluIGl0ZXJhdG9yIGl0ZXJhdGluZyBvdmVyIGFsbCB0aGUgY29tcG9uZW50cyBjb250YWluZWQgYnkgdGhpcyBub2RlLlxuICAgICAqL1xuICAgIGNvbXBvbmVudEl0ZXJhdG9yKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SUNvbXBvbmVudD47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2l0aW9ucyB0aGUgbm9kZSB0byBPcGVyYXRpbmcgaWYgaXQgaXMgaW4gdGhlIEluaXRpYWxpemluZyBzdGF0ZS5cbiAgICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gaGFzIG5vIGVmZmVjdCBpZiB0aGUgbm9kZSBpcyBhbHJlYWR5IE9wZXJhdGluZy5cbiAgICAgKi9cbiAgICBzdGFydCgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNpdGlvbnMgdGhlIG5vZGUgdG8gRGVzdHJveWVkIHN0YXRlIGlmIGl0IGlzIGluIGFueSBzdGF0ZS5cbiAgICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gaGFzIG5vIGVmZmVjdCBpZiB0aGUgbm9kZSBpcyBhbHJlYWR5IERlc3Ryb3llZC5cbiAgICAgKi9cbiAgICBzdG9wKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbm9kZSBuYW1lLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2VuZSBub2RlIHBvc2l0aW9uLiBZb3UgY2FuIGNhbGwgbWV0aG9kcyBvbiB0aGlzIG9iamVjdCB0byBzZXQgaXRzIHZhbHVlcy5cbiAgICAgKiBTZWUgPGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGgvVmVjdG9yMz5cbiAgICAgKi9cbiAgICByZWFkb25seSBwb3NpdGlvbjogVEhSRUUuVmVjdG9yMztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2VuZSBub2RlIHJvdGF0aW9uLiBZb3UgY2FuIGNhbGwgbWV0aG9kcyBvbiB0aGlzIG9iamVjdCB0byBzZXQgaXRzIHZhbHVlcy5cbiAgICAgKiBTZWUgPGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGgvUXVhdGVybmlvbj5cbiAgICAgKi9cbiAgICByZWFkb25seSBxdWF0ZXJuaW9uOiBUSFJFRS5RdWF0ZXJuaW9uO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjZW5lIG5vZGUgc2NhbGUgdmVjdG9yLiBZb3UgY2FuIGNhbGwgbWV0aG9kcyBvbiB0aGlzIG9iamVjdCB0byBzZXQgaXRzIHZhbHVlcy5cbiAgICAgKiBTZWUgPGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGgvVmVjdG9yMz5cbiAgICAgKi9cbiAgICByZWFkb25seSBzY2FsZTogVEhSRUUuVmVjdG9yMztcblxuICAgIC8qKlxuICAgICAqIEEgcmVhZC1vbmx5IHVuaXF1ZSBpZCB1c2VkIHRvIHJlZmVyZW5jZSB0aGlzIG5vZGUgaW4gYSBwYXRoIGJpbmRpbmcuXG4gICAgICogVGhpcyBpZCBpcyBhdXRvZ2VuZXJhdGVkIHVubGVzcyBpdCBpcyBzcGVjaWZlZCBhbmQgY3JlYXRlZCB2aWEgdGhlIFNjZW5lLk9iamVjdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqICoqQ29tcG9uZW50IENvbnRleHQqKjxicj5cbiAgICogVGhlIGNvbnRleHQgb2JqZWN0IGNvbnRhaW5zIHRoZSB0aHJlZS5qcyBtb2R1bGUgYW5kIHRoZSBtYWluIGFzcGVjdHMgb2YgdGhlIHJlbmRlcmluZyBlbmdpbmUuPGJyPlxuICAgKiBUaGUgY2FtZXJhLCBzY2VuZSwgb3IgcmVuZGVyZXIgbWF5IHdpbGwgbGlrZWx5IGJlIHJlcGxhY2VkIGluIHRoZSBmdXR1cmUgd2l0aCBhbiBzZGsgbW9kdWxlLlxuICAgKlxuICAgKiBgYGBcbiAgICogZnVuY3Rpb24gQ3lsaW5kZXIoKSB7XG4gICAqICAgIHRoaXMub25Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAqICAgICAgdmFyIFRIUkVFID0gdGhpcy5jb250ZXh0LnRocmVlO1xuICAgKiAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KCA1LCA1LCAyMCwgMzIgKTtcbiAgICogICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtjb2xvcjogMHhmZmZmMDB9ICk7XG4gICAqICAgICAgdmFyIGN5bGluZGVyID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgKiAgICB9O1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJQ29tcG9uZW50Q29udGV4dCB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVlLmpzIG1vZHVsZS5cbiAgICAgKi9cbiAgICB0aHJlZTogdHlwZW9mIFRIUkVFO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNob3djYXNlIHRocmVlLmpzIHJlbmRlcmVyLjxicj5cbiAgICAgKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL3JlbmRlcmVycy9XZWJHTFJlbmRlcmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vcmVuZGVyZXJzL1dlYkdMUmVuZGVyZXI8L2E+XG4gICAgICovXG4gICAgcmVuZGVyZXI6IFRIUkVFLldlYkdMUmVuZGVyZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2hvd2Nhc2Ugc2NlbmUuPGJyPlxuICAgICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vc2NlbmVzL1NjZW5lXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vc2NlbmVzL1NjZW5lPC9hPlxuICAgICAqXG4gICAgICovXG4gICAgc2NlbmU6IFRIUkVFLlNjZW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1haW4gY2FtZXJhLiBJdCBpcyByZWFkLW9ubHkuPGJyPlxuICAgICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vY2FtZXJhcy9DYW1lcmFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9jYW1lcmFzL0NhbWVyYTwvYT5cbiAgICAgKi9cbiAgICBjYW1lcmE6IFRIUkVFLkNhbWVyYTtcbiAgfVxuICAvKipcbiAgICogSUNvbXBvbmVudFxuICAgKlxuICAgKiBVc2UgdGhpcyBpbnRlcmZhY2UgdG8gaW1wbGVtZW50IGEgY29tcG9uZW50IGFuZCByZWdpc3RlciBpdCB3aXRoIHRoZSBzZGsuXG4gICAqXG4gICAqIGBgYFxuICAgKiBmdW5jdGlvbiBCb3goKSB7XG4gICAqICAgIHRoaXMuaW5wdXRzID0ge1xuICAgKiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgKiAgICB9O1xuICAgKlxuICAgKiAgICB0aGlzLm9uSW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgIHZhciBUSFJFRSA9IHRoaXMuY29udGV4dC50aHJlZTtcbiAgICogICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSk7XG4gICAqICAgICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgpO1xuICAgKiAgICAgIHZhciBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICk7XG4gICAqICAgICAgdGhpcy5vdXRwdXRzLm9iamVjdFJvb3QgPSBtZXNoO1xuICAgKiAgICB9O1xuICAgKlxuICAgKiAgICB0aGlzLm9uRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBkYXRhKSB7XG4gICAqICAgIH1cbiAgICpcbiAgICogICAgdGhpcy5vbklucHV0c1VwZGF0ZWQgPSBmdW5jdGlvbihwcmV2aW91cykge1xuICAgKiAgICB9O1xuICAgKlxuICAgKiAgICB0aGlzLm9uVGljayA9IGZ1bmN0aW9uKHRpY2tEZWx0YSkge1xuICAgKiAgICB9XG4gICAqXG4gICAqICAgIHRoaXMub25EZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAqICAgICAgdGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAqICAgIH07XG4gICAqIH1cblxuICAgKiBmdW5jdGlvbiBCb3hGYWN0b3J5KCkge1xuICAgKiAgICByZXR1cm4gbmV3IEJveCgpO1xuICAgKiB9XG4gICAqXG4gICAqIC8vIFJlZ2lzdGVyaW5nIHRoZSBjb21wb25lbnQgd2l0aCB0aGUgc2RrXG4gICAqIHNkay5TY2VuZS5yZWdpc3RlcignYm94JywgQm94RmFjdG9yeSk7XG4gICAqXG4gICAqIGBgYFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHR5cGUuIFRoaXMgdmFsdWUgaXMgdGhlIHNhbWUgc3RyaW5nIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGNvbXBvbmVudCBmYWN0b3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXBvbmVudFR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIGRpY3Rpb25hcnkgb2YgcHJvcGVydGllcyB0aGF0IGFmZmVjdHMgdGhlIGJlaGF2aW9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICogVGhlc2UgcHJvcGVydGllcyBjYW4gYmUgY2hhbmdlZCBieSBhbiBleHRlcm5hbCBzb3VyY2UgYXQgYW55IHRpbWUuIEl0IGlzIHVwIHRvIHRoZSBjb21wb25lbnRcbiAgICAgKiB0byByZXNwb25kIGFwcHJvcHJpYXRlbHkgdG8gdGhlIGNoYW5nZXMuIFRoZXNlIGlucHV0IHByb3BlcnRpZXMgY2FuIGFsc28gYmUgYmluZCB0YXJnZXRzIHRvIGFuXG4gICAgICogb2JzZXJ2YWJsZSBzb3VyY2UgZS5nLiB0aGUgb3V0cHV0IHByb3BlcnR5IG9mIGFub3RoZXIgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGlucHV0cz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZGljdGlvbmFyeSBvZiBwcm9wZXJ0aWVzIHRoYXQgdGhpcyBjb21wb25lbnQgY29tcHV0ZXMuXG4gICAgICogVGhpcyBkaWN0aW9uYXJ5IGlzIG9ic2VydmFibGUgYW5kIGNhbiBiZSB0aGUgc291cmNlIG9mIGEgYmluZCB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBvYmplY3RSb290IGFuZCBjb2xsaWRlciBhcmUgcmVzZXJ2ZWQgcHJvcGVydGllcyB3aGljaCBhcmUgYWRkZWQgdG8gYWxsIGNvbXBvbmVudHMgYXV0b21hdGljYWxseS5cbiAgICAgKiBUaGUgdmFsdWUgc2V0IHRvIG9iamVjdFJvb3Qgd2lsbCBnZXQgYWRkZWQgdG8gdGhlIHNjZW5lIGdyYXBoIGFzIGEgY2hpbGQgb2YgdGhlIHNjZW5lIG5vZGUuXG4gICAgICogVGhlIHZhbHVlIHNldCB0byBjb2xsaWRlciB3aWxsIGdldCBpbmNsdWRlZCBpbiByYXljYXN0IGhpdCBkZXRlY3Rpb24uXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBmdW5jdGlvbiBCb3goKSB7XG4gICAgICogICAgdGhpcy5vbkluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgIHZhciBUSFJFRSA9IHRoaXMuY29udGV4dC50aHJlZTtcbiAgICAgKiAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKTtcbiAgICAgKiAgICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoKTtcbiAgICAgKiAgICAgIHZhciBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICk7XG4gICAgICpcbiAgICAgKiAgICAgIHRoaXMub3V0cHV0cy5vYmplY3RSb290ID0gbWVzaDsgICAvLyBnZXRzIGFkZGVkIHRvIHRoZSBzY2VuZSBub2RlXG4gICAgICogICAgICB0aGlzLm91dHB1dHMuY29sbGlkZXIgPSBtZXNoOyAgICAgLy8gd2lsbCBub3cgYmUgcGFydCBvZiByYXljYXN0IHRlc3RpbmdcbiAgICAgKiAgICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG91dHB1dHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ICYgUHJlZGVmaW5lZE91dHB1dHM7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBkaWN0aW9uYXJ5IG9mIGV2ZW50cyB0aGF0IHRoaXMgY29tcG9uZW50IGhhbmRsZXMgdGhyb3VnaCBpdHMgYG9uRXZlbnRgLlxuICAgICAqIFNldHRpbmcgYW4gZXZlbnQgdG8gYSBmYWxzeSB2YWx1ZSB0ZW1wb3JhcmlseSBzdG9wcyB0aGlzIGNvbXBvbmVudCBmcm9tIHJlY2VpdmluZyBzYWlkIGV2ZW50LlxuICAgICAqL1xuICAgIGV2ZW50czogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBkaWN0aW9uYXJ5IG9mIGV2ZW50cyBlbWl0dGVkIGJ5IHRoaXMgY29tcG9uZW50LlxuICAgICAqIFNldHRpbmcgYW4gZW1pdCB0byBhIGZhbHN5IHZhbHVlIHdpbGwgcHJldmVudCB0aGUgY29tcG9uZW50IGZyb20gZW1pdHRpbmcgdGhlIGV2ZW50IHdoZW4gdXNpbmcgYC5ub3RpZnlgLlxuICAgICAqIFRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIGNoYW5nZWQgYnkgYW4gZXh0ZXJuYWwgc291cmNlIGF0IGFueSB0aW1lLlxuICAgICAqIElmIHRoaXMgZGljdGlvbmFyeSBpcyBvbWl0dGVkLCBhbnkgYW5kIGFsbCBldmVudHMgd2lsbCBiZSBlbWl0dGVkIGZyb20gYC5ub3RpZnlgLlxuICAgICAqL1xuICAgIGVtaXRzPzogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udGV4dCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIHVuZGVybHlpbmcgcmVuZGVyaW5nIGVuZ2luZS4gVGhlIHNkayBmcmFtZXdvcmsgYWRkcyBpdFxuICAgICAqIHRvIHRoZSBjb21wb25lbnQgZHVyaW5nIGNvbnN0cnVjdGlvbi5cbiAgICAgKi9cbiAgICBjb250ZXh0OiBJQ29tcG9uZW50Q29udGV4dDtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgdGhlIHNjZW5lIG5vZGUgaXRzIGF0dGFjaGVkIHRvIGhhcyBzdGFydGVkLlxuICAgICAqL1xuICAgIG9uSW5pdD8oKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgZm9yIGVhY2ggaW50ZXJhY3Rpb24gb3IgZXZlbnQgdGhhdCBvY2N1cnJlZCBkdXJpbmcgdGhlIGxhc3QgZnJhbWUuXG4gICAgICogVGhlIGNvbXBvbmVudCBtdXN0IHNldCBvdXRwdXRzLmNvbGxpZGVyIHdpdGggYW4gT2JqZWN0M0QgdG8gZ2V0IGludGVyYWN0aW9uIGNhbGxiYWNrcyBvciBiaW5kRXZlbnQgdG8gcmVjZWl2ZSBvdGhlciBldmVudHMuXG4gICAgICovXG4gICAgb25FdmVudD8oZXZlbnRUeXBlOiBzdHJpbmcgfCBJbnRlcmFjdGlvblR5cGUsIGV2ZW50RGF0YT86IHVua25vd24pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWZ0ZXIgb25lIG9yIG1vcmUgaW5wdXQgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuXG4gICAgICogSXQgd2lsbCBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlIGEgZnJhbWUuXG4gICAgICovXG4gICAgb25JbnB1dHNVcGRhdGVkPyhwcmV2aW91c0lucHV0czogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYSBmcmFtZSBhZnRlciBpbnB1dCBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZC5cbiAgICAgKi9cbiAgICBvblRpY2s/KHRpY2tEZWx0YTogbnVtYmVyKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgcmlnaHQgYmVmb3JlIHRoZSBzY2VuZSBub2RlIGhhcyBzdG9wcGVkLlxuICAgICAqL1xuICAgIG9uRGVzdHJveT8oKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENhbGwgdGhpcyBmdW5jdGlvbiB0byBiaW5kIGFuIGlucHV0IHByb3BlcnR5IHRvIGFuIG91dHB1dCBwcm9wZXJ0eSBvbiBhbm90aGVyXG4gICAgICogY29tcG9uZW50LlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgW3NjZW5lT2JqZWN0XSA9IGF3YWl0IHNkay5TY2VuZS5jcmVhdGVPYmplY3RzKDEpO1xuICAgICAqIGNvbnN0IG5vZGUxID0gc2NlbmVPYmplY3QuY3JlYXRlTm9kZSgpO1xuICAgICAqIGNvbnN0IG5vZGUyID0gc2NlbmVPYmplY3QuY3JlYXRlTm9kZSgpO1xuICAgICAqXG4gICAgICogLy8gbXAub2JqTG9hZGVyIGhhcyBhbiBvdXRwdXRzLnZpc2libGUgcHJvcGVydHlcbiAgICAgKiBjb25zdCBjb21wMSA9IG5vZGUxLmFkZENvbXBvbmVudCgnbXAub2JqTG9hZGVyJyk7XG4gICAgICpcbiAgICAgKiAvLyBteUNvbXBvbmVudCBoYXMgYW4gaW5wdXRzLnRvZ2dsZVN0YXRlIHByb3BlcnR5XG4gICAgICogY29uc3QgY29tcDIgPSBub2RlMi5hZGRDb21wb25lbnQoJ215Q29tcG9uZW50Jyk7XG4gICAgICpcbiAgICAgKiBjb21wMS5iaW5kKCd2aXNpYmxlJywgY29tcDIsICd0b2dnbGVTdGF0ZScpO1xuICAgICAqXG4gICAgICogbm9kZTEuc3RhcnQoKTtcbiAgICAgKiBub2RlMi5zdGFydCgpO1xuICAgICAqXG4gICAgICogLy8gY29tcDEuaW5wdXRzLnZpc2libGUgd2lsbCBub3cgYWx3YXlzIGVxdWFsIGNvbXAyLm91dHB1dHMudG9nZ2xlU3RhdGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBwcm9wIGlucHV0cyBwcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHNyYyBzb3VyY2UgY29tcG9uZW50XG4gICAgICogQHBhcmFtIHNyY1Byb3Agc291cmNlIG91dHB1dHMgcHJvcGVydHkgbmFtZVxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBbW0lPYmplY3QuYmluZFBhdGhdXSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGJpbmQocHJvcDogc3RyaW5nLCBzcmM6IElDb21wb25lbnQsIHNyY1Byb3A6IHN0cmluZyk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyB0aGlzIGNvbXBvbmVudCBvZiBhbiBgZXZlbnRUeXBlYCB3aGVuIHRoZSBgc3JjYCBDb21wb25lbnQgY2FsbHMgYG5vdGlmeWAgd2l0aCBhIGBzcmNFdmVudFR5cGVgIGV2ZW50XG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIFtbSU9iamVjdC5iaW5kUGF0aF1dIGluc3RlYWQuXG4gICAgICovXG4gICAgYmluZEV2ZW50KGV2ZW50VHlwZTogc3RyaW5nLCBzcmM6IElDb21wb25lbnQsIHNyY0V2ZW50VHlwZTogc3RyaW5nKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEVtaXQgYW4gZXZlbnQgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgICAqL1xuICAgIG5vdGlmeShldmVudFR5cGU6IHN0cmluZywgZXZlbnREYXRhPzogdW5rbm93bik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBTcHkgb24gYSBjb21wb25lbnQncyBub3RpZnkgZnJvbSBvdXRzaWRlIG9mIHRoZSBjb21wb25lbnQgc3lzdGVtXG4gICAgICogQHJldHVybnMge0lTdWJzY3JpcHRpb259IGFuIG9iamVjdCByZXNwb25zaWJsZSBmb3IgcmVtb3ZpbmcgdGhlIHNweVxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBbW0lPYmplY3Quc3B5T25FdmVudF1dIGluc3RlYWQuXG4gICAgICovXG4gICAgc3B5T25FdmVudChzcHk6IElDb21wb25lbnRFdmVudFNweSk6IElTdWJzY3JpcHRpb247XG4gIH1cblxuICAvKipcbiAgICogQSBzcHkgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYmUgbm90aWZpZWQgb2YgYSBjb21wb25lbnQgZXZlbnRzIHVzaW5nIGBzcHlPbkV2ZW50YFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJQ29tcG9uZW50RXZlbnRTcHk8VCA9IHVua25vd24+IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBldmVudCB0byBzcHkgb25cbiAgICAgKi9cbiAgICByZWFkb25seSBldmVudFR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBhdHRhY2hlZCBjb21wb25lbnQgbm90aWZpZXMgb2YgYW4gYGV2ZW50VHlwZWAgZXZlbnRcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhXG4gICAgICovXG4gICAgb25FdmVudChldmVudERhdGE/OiBUKTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUNvbXBvbmVudERlc2Mge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBmYWN0b3J5OiAoKSA9PiBJQ29tcG9uZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZGVzY3JpcHRvciBmb3IgYW4gaW5wdXQgY29tcG9uZW50IHByb3BlcnR5IGNvbnRhaW5lZCBieSBhIHNjZW5lIG9iamVjdC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIElucHV0UGF0aERlc2NyaXB0b3IgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgZGVmaW5lZCBpZCBvZiB0aGUgcGF0aC4gVGhpcyBpZCBtdXN0IGJlIGEgdW5pcXVlIHN0cmluZyBmb3IgdGhlIHNjZW5lIG9iamVjdC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBwYXRoOiBQYXRoVHlwZS5JTlBVVFxuICAgICAqL1xuICAgIHR5cGU6IFBhdGhUeXBlLklOUFVUO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXJlbnQgc2NlbmUgbm9kZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIG5vZGU6IFNjZW5lLklOb2RlO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnQgd2l0aCB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgY29tcG9uZW50OiBTY2VuZS5JQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9wZXJ0eSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHJvcGVydHk6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdG9yIGZvciBhbiBvdXRwdXQgY29tcG9uZW50IHByb3BlcnR5IGNvbnRhaW5lZCBieSBhIHNjZW5lIG9iamVjdC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIE91dHB1dFBhdGhEZXNjcmlwdG9yID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyIGRlZmluZWQgaWQgb2YgdGhlIHBhdGguIFRoaXMgaWQgbXVzdCBiZSBhIHVuaXF1ZSBzdHJpbmcgZm9yIHRoZSBzY2VuZSBvYmplY3QuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgcGF0aDogUGF0aFR5cGUuT1VUUFVUXG4gICAgICovXG4gICAgdHlwZTogUGF0aFR5cGUuT1VUUFVUO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXJlbnQgc2NlbmUgbm9kZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIG5vZGU6IFNjZW5lLklOb2RlO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnQgd2l0aCB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgY29tcG9uZW50OiBTY2VuZS5JQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9wZXJ0eSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHJvcGVydHk6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdG9yIGZvciBhbiBldmVudCBjb21wb25lbnQgcHJvcGVydHkgY29udGFpbmVkIGJ5IGEgc2NlbmUgb2JqZWN0LlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgRXZlbnRQYXRoRGVzY3JpcHRvciA9IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBkZWZpbmVkIGlkIG9mIHRoZSBwYXRoLiBUaGlzIGlkIG11c3QgYmUgYSB1bmlxdWUgc3RyaW5nIGZvciB0aGUgc2NlbmUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHBhdGg6IFBhdGhUeXBlLkVWRU5UXG4gICAgICovXG4gICAgdHlwZTogUGF0aFR5cGUuRVZFTlQ7XG4gICAgLyoqXG4gICAgICogVGhlIHBhcmVudCBzY2VuZSBub2RlIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgbm9kZTogU2NlbmUuSU5vZGU7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbXBvbmVudCB3aXRoIHRoZSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBjb21wb25lbnQ6IFNjZW5lLklDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogVGhlIHByb3BlcnR5IG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBwcm9wZXJ0eTogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0b3IgZm9yIGFuIGVtaXQgY29tcG9uZW50IHByb3BlcnR5IGNvbnRhaW5lZCBieSBhIHNjZW5lIG9iamVjdC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEVtaXRQYXRoRGVzY3JpcHRvciA9IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBkZWZpbmVkIGlkIG9mIHRoZSBwYXRoLiBUaGlzIGlkIG11c3QgYmUgYSB1bmlxdWUgc3RyaW5nIGZvciB0aGUgc2NlbmUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHBhdGg6IFBhdGhUeXBlLkVNSVRcbiAgICAgKi9cbiAgICB0eXBlOiBQYXRoVHlwZS5FTUlUO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXJlbnQgc2NlbmUgbm9kZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIG5vZGU6IFNjZW5lLklOb2RlO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnQgd2l0aCB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgY29tcG9uZW50OiBTY2VuZS5JQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9wZXJ0eSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHJvcGVydHk6IHN0cmluZztcbiAgfTtcblxuICBleHBvcnQgaW50ZXJmYWNlIFBhdGhCYXNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgb2JqZWN0IHRoaXMgcGF0aCBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKi9cbiAgICByZWFkb25seSBvYmplY3Q6IFNjZW5lLklPYmplY3Q7XG4gICAgLyoqXG4gICAgICogVGhlIGlkIG9mIHRoaXMgcGF0aC4gU2V0IHRvIGEgcmFuZG9tIHN0cmluZywgb3IgdGhlIGlkIHByb3ZpZGVkIHdoZW4gY3JlYXRpbmcgdGhlIHBhdGhcbiAgICAgKi9cbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICB9XG4gIC8qKlxuICAgKiBBIHBhdGggdG8gYSBjb21wb25lbnQncyBpbnB1dCBwcm9wZXJ0eVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dFBhdGg8VCA9IHVua25vd24+IGV4dGVuZHMgUGF0aEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBhdGhcbiAgICAgKi9cbiAgICBnZXQoKTogVDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXRoXG4gICAgICogQHBhcmFtIG5ld1ZhbFxuICAgICAqL1xuICAgIHNldChuZXdWYWw6IFQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJpbmQgdGhpcyBwYXRoIHRvIGFuIFtbT3V0cHV0UGF0aF1dLiBBcyB0aGUgdmFsdWUgb2YgdGhlIGJvdW5kIG91dHB1dCBwYXRoIGNoYW5nZXMsIHRoZSB2YWx1ZSByZXR1cm5lZCBieSBbW2dldF1dIHdpbGwgYWxzbyBjaGFuZ2VcbiAgICAgKiBAcGFyYW0gb3V0cHV0UGF0aFxuICAgICAqL1xuICAgIGJpbmQob3V0cHV0UGF0aDogT3V0cHV0UGF0aCk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICogQSBwYXRoIHRvIGEgY29tcG9uZW50J3Mgb3V0cHV0IHByb3BlcnR5XG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dFBhdGg8VCA9IHVua25vd24+IGV4dGVuZHMgUGF0aEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBhdGhcbiAgICAgKi9cbiAgICBnZXQoKTogVDtcbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgcGF0aCB0byBhbiBbW0lucHV0UGF0aF1dLiBBcyB0aGUgdmFsdWUgb2YgdGhpcyBvdXRwdXQgY2hhbmdlcywgdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBib3VuZCBbW0lucHV0UGF0aC5nZXRdXSB3aWxsIGFsc28gY2hhbmdlXG4gICAgICogQHBhcmFtIG91dHB1dFBhdGhcbiAgICAgKi9cbiAgICBiaW5kKGlucHV0UGF0aDogSW5wdXRQYXRoKTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHBhdGggdG8gYSBjb21wb25lbnQncyBldmVudCBwcm9wZXJ0eVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFdmVudFBhdGg8VCA9IHVua25vd24+IGV4dGVuZHMgUGF0aEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEJpbmQgdGhpcyBwYXRoIHRvIGFuIFtbRW1pdFBhdGhdXS5cbiAgICAgKi9cbiAgICBiaW5kKGVtaXRQYXRoOiBFbWl0UGF0aCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0IHRoZSBldmVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXRoLiBUaGlzIGlzIHNpbWlsYXIgdG8gY2FsbGluZyBbW0lDb21wb25lbnQub25FdmVudF1dIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIGVtaXQocGF5bG9hZDogVCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGB0aGlzLmVtaXRgIGFuZCB0aGUgYXNzb2NpYXRlZCBDb21wb25lbnQncyBgb25FdmVudGAgZnJvbSBiZWluZyB0cmlnZ2VyZWRcbiAgICAgKi9cbiAgICBkaXNhYmxlKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgYHRoaXMuZW1pdGAgYW5kIHRoZSBhc3NvY2lhdGVkIENvbXBvbmVudCdzIGBvbkV2ZW50YCBzbyBpdCBjYW4gcmVjZWl2ZSB0aGUgZXZlbnQgYWdhaW5cbiAgICAgKi9cbiAgICBlbmFibGUoKTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHBhdGggdG8gYSBjb21wb25lbnQncyBlbWl0IHByb3BlcnR5XG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEVtaXRQYXRoPFQgPSB1bmtub3duPiBleHRlbmRzIFBhdGhCYXNlIHtcbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgcGF0aCB0byBhbiBbW0V2ZW50UGF0aF1dLlxuICAgICAqL1xuICAgIGJpbmQoZXZlbnRQYXRoOiBFdmVudFBhdGgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRW1pdCB0aGUgZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcGF0aC4gVGhpcyBpcyBzaW1pbGFyIHRvIFtbSUNvbXBvbmVudC5ub3RpZnldXVxuICAgICAqL1xuICAgIGVtaXQocGF5bG9hZDogVCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGB0aGlzLmVtaXRgIGFuZCB0aGUgYXNzb2NpYXRlZCBDb21wb25lbnQncyBgbm90aWZ5YFxuICAgICAqL1xuICAgIGRpc2FibGUoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBgdGhpcy5lbWl0YCBhbmQgdGhlIGFzc29jaWF0ZWQgQ29tcG9uZW50J3MgYWJpbGl0eSB0byBgbm90aWZ5YFxuICAgICAqL1xuICAgIGVuYWJsZSgpOiB2b2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3B5IGFsbG93cyBmb3Igc3B5aW5nIG9uIGV2ZW50cyB0cmlnZ2VyZWQgb24gYSBjb21wb25lbnQgZnJvbSBvdXRzaWRlIG9mIHRoZSBjb21wb25lbnQgc3lzdGVtXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElTY2VuZU9iamVjdFNweTxUID0gdW5rbm93bj4ge1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXRoIHRvIHNweSBvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhdGg6IElucHV0UGF0aCB8IE91dHB1dFBhdGggfCBFdmVudFBhdGggfCBFbWl0UGF0aDtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgZGF0YSBhdCBgcGF0aGAgY2hhbmdlcyBvciB3aGVuIGl0cyBldmVudCBpcyB0cmlnZ2VyZWRcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIFRoZSBkYXRhIHNlbnQgd2l0aCBldmVudCBmcm9tIGEgW1tJQ29tcG9uZW50Lm5vdGlmeV1dIGNhbGwgb3IgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgaW5wdXQgb3Igb3V0cHV0IHJlZmVyZW5jZWQgYnkgdGhlIHBhdGguXG4gICAgICovXG4gICAgb25FdmVudChldmVudERhdGE6IFQpOiB2b2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZmFjdG9yeSBhbmQgY29udGFpbmVyIGZvciBhIGNvbGxlY3Rpb24gb2Ygc2NlbmUgbm9kZXMgYW5kIGNvbXBvbmVudHMgY29ubmVjdGVkIHZpYSBwcm9wZXJ0eSBiaW5kaW5ncy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSU9iamVjdCB7XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHNjZW5lIG5vZGUgdG8gdGhpcyBzY2VuZSBvYmplY3QgYW5kIHJldHVybnMgaXQuIElmIGFuIGlkIGlzbid0IHByb3ZpZGVkLCBvbmUgd2lsbCBiZSBhdXRvZ2VuZXJhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIGEgb3B0aW9uYWwgdW5pcXVlIGlkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBuZXcgc2NlbmUgbm9kZS5cbiAgICAgKi9cbiAgICBhZGROb2RlKGlkPzogc3RyaW5nKTogSU5vZGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYXJyYXkgb2Ygc2NlbmUgbm9kZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZUNvdW50IHRoZSBudW1iZXIgb2Ygbm9kZXMgdG8gY3JlYXRlLiBUaGlzIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIEFuIGFycmF5IG9mIG5vZGVzLlxuICAgICAqL1xuICAgIGFkZE5vZGVzKG5vZGVDb3VudDogbnVtYmVyKTogSU5vZGVbXTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhbGwgbm9kZXMgcmVmZXJlbmNlZCBieSB0aGlzIHNjZW5lIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGFydCgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogU3RvcHMgYWxsIG5vZGVzIHJlZmVyZW5jZWQgYnkgdGhpcyBzY2VuZSBvYmplY3QuIFRoZSBzY2VuZSBvYmplY3QgY2Fubm90IGJlIHJlc3RhcnRlZCBhZnRlciB0aGlzIGZ1bmN0aW9uIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgKi9cbiAgICBzdG9wKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gYmluZCBhbiBpbnB1dCBwcm9wZXJ0eSBvZiB0aGUgdGFyZ2V0IGNvbXBvbmVudCB0byBhbiBvdXRwdXQgcHJvcGVydHkgb2YgdGhlIHNvdXJjZVxuICAgICAqIGNvbXBvbmVudCBiZXR3ZWVuIGFueSBub2RlcyBjb250YWluZWQgYnkgdGhpcyBzY2VuZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Q29tcG9uZW50IFRoZSBjb21wb25lbnQgbGlzdGVuaW5nIHRvIHByb3BlcnR5IGNoYW5nZXMuXG4gICAgICogQHBhcmFtIHRhcmdldFByb3AgIFRoZSBjb21wb25lbnQgaW5wdXQgcHJvcGVydHkgbmFtZS5cbiAgICAgKiBAcGFyYW0gc291cmNlQ29tcG9uZW50IFRoZSBjb21wb25lbnQgYnJvYWRjYXN0aW5nIHByb3BlcnR5IGNoYW5nZXMuXG4gICAgICogQHBhcmFtIHNvdXJjZVByb3AgVGhlIGNvbXBvbmVudCBvdXRwdXQgcHJvcGVydHkgbmFtZS5cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tJT2JqZWN0LmJpbmRQYXRoXV0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBiaW5kKHRhcmdldENvbXBvbmVudDogSUNvbXBvbmVudCwgdGFyZ2V0UHJvcDogc3RyaW5nLCBzb3VyY2VDb21wb25lbnQ6IElDb21wb25lbnQsIHNvdXJjZVByb3A6IHN0cmluZyk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwYXRoIGlkZW50aWZpZWQgYnkgYSB1bmlxdWUgc3RyaW5nLlxuICAgICAqIFRoZXkgYHBhdGhEZXNjLnR5cGVgIHdpbGwgZGV0ZXJtaW5lIHdoaWNoIHBhdGggdHlwZSBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoRGVzYyBUaGUgcGF0aCBkZXNjcmlwdG9yIHRvIHRoZSBjb21wb25lbnQgcHJvcGVydHkuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIG9uZSBvZiBbW2FkZElucHV0UGF0aF1dLCBbW2FkZE91dHB1dFBhdGhdXSwgW1thZGRFdmVudFBhdGhdXSwgb3IgW1thZGRFbWl0UGF0aF1dXG4gICAgICovXG4gICAgYWRkUGF0aChwYXRoRGVzYzogSW5wdXRQYXRoRGVzY3JpcHRvcik6IElucHV0UGF0aDtcbiAgICBhZGRQYXRoKHBhdGhEZXNjOiBPdXRwdXRQYXRoRGVzY3JpcHRvcik6IE91dHB1dFBhdGg7XG4gICAgYWRkUGF0aChwYXRoRGVzYzogRXZlbnRQYXRoRGVzY3JpcHRvcik6IEV2ZW50UGF0aDtcbiAgICBhZGRQYXRoKHBhdGhEZXNjOiBFbWl0UGF0aERlc2NyaXB0b3IpOiBFbWl0UGF0aDtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbmQgcmVjZWl2ZSBhbiBbW0lucHV0UGF0aF1dIHRvIHRoZSBwcm9wZXJ0eSBvZiBhbiBbW0lDb21wb25lbnRdXS5cbiAgICAgKiBUaGUgcmV0dXJuZWQgW1tJbnB1dFBhdGhdXSBjYW4gYmUgdXNlZCB0byByZWFkIG9yIHNldCB0aGUgdmFsdWUgb2YgYHByb3BlcnR5YCBvbiBgY29tcG9uZW50YCdzIGlucHV0cy5cbiAgICAgKiBDaGFuZ2VzIHRvIHRoZSB2YWx1ZSBjYW4gYWxzbyBiZSBvYnNlcnZlZCBieSBjcmVhdGluZyBhbiBbW0lTY2VuZU9iamVjdFNweV1dIGFuZCBjYWxsaW5nIFtbc3B5T25FdmVudF1dLlxuICAgICAqIFRoZSBwYXRoIGNhbiBhbHNvIGJlIGJvdW5kIHRvIGFuIFtbT3V0cHV0UGF0aF1dIG9mIGFub3RoZXIgKG9yIHRoZSBzYW1lKSBjb21wb25lbnQgdG8gYXV0b21hdGljYWxseSB1cGRhdGUgYSBjb21wb25lbnQncyBpbnB1dCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY2xhc3MgQ291bnRlciB7XG4gICAgICogICAgcHVibGljIGlucHV0cyA9IHtcbiAgICAgKiAgICAgIGNvdW50OiAxLFxuICAgICAqICAgIH07XG4gICAgICogIH1cbiAgICAgKiAgLy8gY3JlYXRlIGFuIGBJT2JqZWN0YCwgYWRkIGFuIGBJTm9kZWAgYW5kIGFuIGBJQ29tcG9uZW50YCB0byB0aGUgbm9kZSwgc2VlIHRoZSByZWxldmFudCBmdW5jdGlvbnMgKGNyZWF0ZU9iamVjdCwgYWRkTm9kZSwgYWRkQ29tcG9uZW50KVxuICAgICAqICBjb25zdCBbb2JqZWN0LCBub2RlLCBjb21wb25lbnRdO1xuICAgICAqXG4gICAgICogIC8vIGNyZWF0ZSB0aGUgcGF0aFxuICAgICAqICBjb25zdCBpbnB1dFBhdGggPSBvYmplY3QuYWRkSW5wdXRQYXRoKGNvbXBvbmVudCwgJ2NvdW50Jyk7XG4gICAgICpcbiAgICAgKiAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIHRoZSB2YWx1ZSBvZiBgaW5wdXRzLmNvdW50YCBpbiBjb21wb25lbnRcbiAgICAgKiAgb2JqZWN0LnNweU9uRXZlbnQoe1xuICAgICAqICAgIHBhdGg6IGlucHV0UGF0aCxcbiAgICAgKiAgICBvbkV2ZW50KG5ld1ZhbHVlKSB7XG4gICAgICogICAgICBjb25zb2xlLmxvZyhgY29tcG9uZW50LmlucHV0LmNvdW50J3MgbmV3IHZhbHVlIGlzICR7bmV3VmFsdWV9YCk7XG4gICAgICogICAgfSxcbiAgICAgKiAgfSk7XG4gICAgICogIC8vIHJlYWQgYW5kIGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGluIHRoZSBjb21wb25lbnRcbiAgICAgKiAgY29uc3QgY291bnRWYWx1ZSA9IGlucHV0UGF0aC5nZXQoKTtcbiAgICAgKiAgaW5wdXRQYXRoLnNldChjb3VudCArIDEpO1xuICAgICAqXG4gICAgICogLy8gYmluZCB0aGUgcGF0aCB0byB0aGUgdmFsdWUgZnJvbSBhbm90aGVyIChvdXRwdXQpIHBhdGhcbiAgICAgKiAgb2JqZWN0LmJpbmRQYXRoKGlucHV0UGF0aCwgb3V0cHV0UGF0aCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50XG4gICAgICogQHBhcmFtIHByb3BlcnR5XG4gICAgICogQHBhcmFtIGlkXG4gICAgICogQGludHJvZHVjZWQgMy4xLjcxLjE0LTAtZ2FmNzdhZGQzODNcbiAgICAgKi9cbiAgICBhZGRJbnB1dFBhdGgoY29tcG9uZW50OiBJQ29tcG9uZW50LCBwcm9wZXJ0eTogc3RyaW5nLCBpZD86IHN0cmluZyk6IElucHV0UGF0aDtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbmQgcmVjZWl2ZSBhbiBbW091dHB1dFBhdGhdXSB0byB0aGUgcHJvcGVydHkgb2YgYW4gW1tJQ29tcG9uZW50XV0uXG4gICAgICogVGhlIHJldHVybmVkIFtbT3V0cHV0UGF0aF1dIGNhbiBiZSB1c2VkIHRvIHJlYWQgdGhlIHZhbHVlIG9mIGBjb21wb25lbnRgJ3Mgb3V0cHV0IGBwcm9wZXJ0eWAuXG4gICAgICogQ2hhbmdlcyB0byB0aGUgdmFsdWUgY2FuIGFsc28gYmUgb2JzZXJ2ZWQgYnkgY3JlYXRpbmcgYW4gW1tJU2NlbmVPYmplY3RTcHldXSBhbmQgY2FsbGluZyBbW3NweU9uRXZlbnRdXS5cbiAgICAgKiBUaGUgcGF0aCBjYW4gYWxzbyBiZSBib3VuZCB0byBhbiBbW0lucHV0UGF0aF1dIG9mIGFub3RoZXIgKG9yIHRoZSBzYW1lKSBjb21wb25lbnQgdG8gYXV0b21hdGljYWxseSB1cGRhdGUgYSBjb21wb25lbnQncyBpbnB1dCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY2xhc3MgTnVtYmVyR2VuZXJhdG9yIHtcbiAgICAgKiAgICBwdWJsaWMgb3V0cHV0cyA9IHtcbiAgICAgKiAgICAgIGN1cnJlbnQ6IDEsXG4gICAgICogICAgfTtcbiAgICAgKiAgfVxuICAgICAqICAvLyBjcmVhdGUgYW4gYElPYmplY3RgLCBhZGQgYW4gYElOb2RlYCBhbmQgYW4gYElDb21wb25lbnRgIHRvIHRoZSBub2RlLCBzZWUgdGhlIHJlbGV2YW50IGZ1bmN0aW9ucyAoY3JlYXRlT2JqZWN0LCBhZGROb2RlLCBhZGRDb21wb25lbnQpXG4gICAgICogIGNvbnN0IFtvYmplY3QsIG5vZGUsIGNvbXBvbmVudF07XG4gICAgICpcbiAgICAgKiAgLy8gY3JlYXRlIHRoZSBwYXRoXG4gICAgICogIGNvbnN0IG91dHB1dFBhdGggPSBvYmplY3QuYWRkT3V0cHV0UGF0aChjb21wb25lbnQsICdjdXJyZW50Jyk7XG4gICAgICpcbiAgICAgKiAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIHRoZSB2YWx1ZSBvZiBgb3V0cHV0cy5jdXJyZW50YCBpbiBjb21wb25lbnRcbiAgICAgKiAgb2JqZWN0LnNweU9uRXZlbnQoe1xuICAgICAqICAgIHBhdGg6IG91dHB1dFBhdGgsXG4gICAgICogICAgb25FdmVudChuZXdWYWx1ZSkge1xuICAgICAqICAgICAgY29uc29sZS5sb2coYGNvbXBvbmVudC5vdXRwdXQuY3VycmVudCdzIG5ldyB2YWx1ZSBpcyAke25ld1ZhbHVlfWApO1xuICAgICAqICAgIH0sXG4gICAgICogIH0pO1xuICAgICAqICAvLyByZWFkIGFuZCBiaW5kIHRoZSB2YWx1ZSBvZiB0aGUgb3V0cHV0IHRvIGFub3RoZXIgY29tcG9uZW50J3MgaW5wdXQgdmFsdWVcbiAgICAgKiAgY29uc3QgY3VycmVudFZhbHVlID0gb3V0cHV0UGF0aC5nZXQoKTtcbiAgICAgKiAgb2JqZWN0LmJpbmRQYXRoKGlucHV0UGF0aCwgb3V0cHV0UGF0aCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50XG4gICAgICogQHBhcmFtIHByb3BlcnR5XG4gICAgICogQHBhcmFtIGlkXG4gICAgICogQGludHJvZHVjZWQgMy4xLjcxLjE0LTAtZ2FmNzdhZGQzODNcbiAgICAgKi9cbiAgICBhZGRPdXRwdXRQYXRoKGNvbXBvbmVudDogSUNvbXBvbmVudCwgcHJvcGVydHk6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiBPdXRwdXRQYXRoO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGFuZCByZWNlaXZlIGFuIFtbRXZlbnRQYXRoXV0gZm9yIGFuIFtbSUNvbXBvbmVudF1dLlxuICAgICAqIFRoZSBwYXRoIGNhbiBiZSBib3VuZCB0byBhbiBbW0VtaXRQYXRoXV0gb2YgYW5vdGhlciAob3IgdGhlIHNhbWUpIGNvbXBvbmVudCB0byBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlIGNvbXBvbmVudCdzIFtbSUNvbXBvbmVudC5vbkV2ZW50XV0uXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNsYXNzIFJlbmRlcmFibGUge1xuICAgICAqICAgIHB1YmxpYyBldmVudHMgPSB7XG4gICAgICogICAgICByZXJlbmRlcjogdHJ1ZSxcbiAgICAgKiAgICB9O1xuICAgICAqICB9XG4gICAgICogIC8vIGNyZWF0ZSBhbiBgSU9iamVjdGAsIGFkZCBhbiBgSU5vZGVgIGFuZCBhbiBgSUNvbXBvbmVudGAgdG8gdGhlIG5vZGUsIHNlZSB0aGUgcmVsZXZhbnQgZnVuY3Rpb25zIChjcmVhdGVPYmplY3QsIGFkZE5vZGUsIGFkZENvbXBvbmVudClcbiAgICAgKiAgY29uc3QgW29iamVjdCwgbm9kZSwgY29tcG9uZW50XTtcbiAgICAgKlxuICAgICAqICAvLyBjcmVhdGUgdGhlIHBhdGhcbiAgICAgKiAgY29uc3QgZXZlbnRQYXRoID0gb2JqZWN0LmFkZEV2ZW50UGF0aChjb21wb25lbnQsICdyZXJlbmRlcicpO1xuICAgICAqXG4gICAgICogIC8vIGJpbmQgdGhlIGV2ZW50IHBhdGggc28gdGhhdCBpdCB0cmlnZ2VycyB0aGUgY29tcG9uZW50J3Mgb25FdmVudCB3aGVuIGBlbWl0UGF0aGAgZW1pdHMgYW4gZXZlbnRcbiAgICAgKiAgb2JqZWN0LmJpbmRQYXRoKGV2ZW50UGF0aCwgZW1pdFBhdGgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqIEBpbnRyb2R1Y2VkIDMuMS43MS4xNC0wLWdhZjc3YWRkMzgzXG4gICAgICovXG4gICAgYWRkRXZlbnRQYXRoKGNvbXBvbmVudDogSUNvbXBvbmVudCwgcHJvcGVydHk6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiBFdmVudFBhdGg7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW5kIHJlY2VpdmUgYW4gW1tFbWl0UGF0aF1dIGZvciBhbiBbW0lDb21wb25lbnRdXS5cbiAgICAgKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNweSB3aGVuIGFuIGV2ZW50IGlzIGVtaXR0ZWQgYnkgY3JlYXRpbmcgYW4gW1tJU2NlbmVPYmplY3RTcHldXSBhbmQgY2FsbGluZyBbW3NweU9uRXZlbnRdXS5cbiAgICAgKiBUaGUgcGF0aCBjYW4gYmUgYm91bmQgdG8gYW4gW1tFdmVudFBhdGhdXSBvZiBhbm90aGVyIChvciB0aGUgc2FtZSkgY29tcG9uZW50IHRvIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGUgY29tcG9uZW50J3MgW1tJQ29tcG9uZW50Lm9uRXZlbnRdXS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY2xhc3MgQ2xpY2thYmxlIHtcbiAgICAgKiAgICBwdWJsaWMgZXZlbnRzID0ge1xuICAgICAqICAgICAgY2xpY2tlZDogdHJ1ZSxcbiAgICAgKiAgICB9O1xuICAgICAqICB9XG4gICAgICogIC8vIGNyZWF0ZSBhbiBgSU9iamVjdGAsIGFkZCBhbiBgSU5vZGVgIGFuZCBhbiBgSUNvbXBvbmVudGAgdG8gdGhlIG5vZGUsIHNlZSB0aGUgcmVsZXZhbnQgZnVuY3Rpb25zIChjcmVhdGVPYmplY3QsIGFkZE5vZGUsIGFkZENvbXBvbmVudClcbiAgICAgKiAgY29uc3QgW29iamVjdCwgbm9kZSwgY29tcG9uZW50XTtcbiAgICAgKlxuICAgICAqICAvLyBjcmVhdGUgdGhlIHBhdGhcbiAgICAgKiAgY29uc3QgZW1pdFBhdGggPSBvYmplY3QuYWRkRW1pdFBhdGgoY29tcG9uZW50LCAnY2xpY2tlZCcpO1xuICAgICAqXG4gICAgICogIC8vIGJpbmQgdGhlIGVtaXQgcGF0aCBzbyB0aGF0IGl0IHRyaWdnZXJzIHRoZSBgZW1pdFBhdGhgJ3MgYXNzb2NpYXRlZCBjb21wb25lbnQncyBvbkV2ZW50IHdoZW4gYW4gZXZlbnQgaXMgZW1pdHRlZFxuICAgICAqICBvYmplY3QuYmluZFBhdGgoZXZlbnRQYXRoLCBlbWl0UGF0aCk7XG4gICAgICpcbiAgICAgKiAgLy8gb2JzZXJ2ZSBlbWlzc2lvbnMgb2YgJ2NsaWNrZWQnIGV2ZW50cyBpbiBjb21wb25lbnRcbiAgICAgKiAgb2JqZWN0LnNweU9uRXZlbnQoe1xuICAgICAqICAgIHBhdGg6IGVtaXRQYXRoLFxuICAgICAqICAgIG9uRXZlbnQoZXZlbnREYXRhKSB7XG4gICAgICogICAgICBjb25zb2xlLmxvZyhgYSAnY2xpY2tlZCcgZXZlbnQgd2FzIGVtaXR0ZWQgd2l0aCB0aGUgZGF0YTogJHtldmVudERhdGF9YCk7XG4gICAgICogICAgfSxcbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50XG4gICAgICogQHBhcmFtIHByb3BlcnR5XG4gICAgICogQHBhcmFtIGlkXG4gICAgICogQGludHJvZHVjZWQgMy4xLjcxLjE0LTAtZ2FmNzdhZGQzODNcbiAgICAgKi9cbiAgICBhZGRFbWl0UGF0aChjb21wb25lbnQ6IElDb21wb25lbnQsIHByb3BlcnR5OiBzdHJpbmcsIGlkPzogc3RyaW5nKTogRW1pdFBhdGg7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRoZSB2YWx1ZSByZWZlcmVuY2VkIGJ5IGBpbnB1dFBhdGhgIHRvIHRoZSB2YWx1ZSBvZiBgb3V0cHV0UGF0aGAuXG4gICAgICogQXMgdGhlIHZhbHVlIGF0IGBvdXRwdXRQYXRoYCBjaGFuZ2VzLCB0aGUgdmFsdWUgb2YgYGlucHV0UGF0aGAgd2lsbCByZWZsZWN0IGl0LlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgW3NjZW5lT2JqZWN0XSA9IGF3YWl0IHNkay5TY2VuZS5jcmVhdGVPYmplY3RzKDEpO1xuICAgICAqIGNvbnN0IG5vZGUgPSBzY2VuZU9iamVjdC5hZGROb2RlKCk7XG4gICAgICpcbiAgICAgKiAvLyBtcC5vYmpMb2FkZXIgaGFzIGFuIG91dHB1dHMudmlzaWJsZSBwcm9wZXJ0eVxuICAgICAqIGNvbnN0IGNvbXAxID0gbm9kZS5hZGRDb21wb25lbnQoJ21wLm9iakxvYWRlcicpO1xuICAgICAqIGNvbnN0IG91dHB1dFBhdGggPSBzY2VuZU9iamVjdC5hZGRPdXRwdXRQYXRoKGNvbXAxLCAndmlzaWJsZScsICdvYmpMb2FkZXItdmlzaWJsZScpO1xuICAgICAqXG4gICAgICogLy8gbXlDb21wb25lbnQgaGFzIGFuIGlucHV0cy50b2dnbGVTdGF0ZSBwcm9wZXJ0eVxuICAgICAqIGNvbnN0IGNvbXAyID0gbm9kZS5hZGRDb21wb25lbnQoJ215Q29tcG9uZW50Jyk7XG4gICAgICogY29uc3QgaW5wdXRQYXRoID0gc2NlbmVPYmplY3QuYWRkSW5wdXRQYXRoKGNvbXAyLCAndG9nZ2xlU3RhdGUnLCAnbXlDb21wb25lbnQtdG9nZ2xlJyk7XG4gICAgICogc2NlbmVPYmplY3QuYmluZFBhdGgoaW5wdXRQYXRoLCBvdXRwdXRQYXRoKTtcbiAgICAgKlxuICAgICAqIG5vZGUuc3RhcnQoKTtcbiAgICAgKiAvLyBjb21wMS5pbnB1dHMudmlzaWJsZSB3aWxsIG5vdyBhbHdheXMgZXF1YWwgY29tcDIub3V0cHV0cy50b2dnbGVTdGF0ZVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbnB1dFBhdGhcbiAgICAgKiBAcGFyYW0gb3V0cHV0UGF0aFxuICAgICAqL1xuICAgIGJpbmRQYXRoKGlucHV0UGF0aDogSW5wdXRQYXRoLCBvdXRwdXRQYXRoOiBPdXRwdXRQYXRoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IHJlZmVyZW5jZWQgYnkgYGV2ZW50UGF0aGAgdG8gYSBbW0lDb21wb25lbnQubm90aWZ5XV0gY2FsbCBhdCBgZW1pdFBhdGhgXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBbc2NlbmVPYmplY3RdID0gYXdhaXQgc2RrLlNjZW5lLmNyZWF0ZU9iamVjdCgxKTtcbiAgICAgKiBjb25zdCBub2RlID0gc2NlbmVPYmplY3QuY3JlYXRlTm9kZSgpO1xuICAgICAqXG4gICAgICogLy8gbXlSZWNlaXZlciBoYXMgYW4gYG9uRXZlbnRgIGxpZmVjeWNsZSBmdW5jdGlvbiBhbmQgYW4gYGV2ZW50c1snZG8udXBkYXRlJ11gIHByb3BlcnR5XG4gICAgICogY29uc3QgcmVjZWl2ZXIgPSBub2RlLmFkZENvbXBvbmVudChgbXlSZWNlaXZlcicpO1xuICAgICAqIGNvbnN0IGV2ZW50UGF0aCA9IHNjZW5lT2JqZWN0LmFkZEV2ZW50UGF0aChyZWNlaXZlciwgJ2RvLnVwZGF0ZScsICdteS1yZWNpZXZlci11cGRhdGUnKTtcbiAgICAgKlxuICAgICAqIC8vIG15RW1pdHRlciBjYWxscyBub3RpZnkgd2l0aCBhbiAndXBkYXRlZCcgZXZlbnQgYW5kIGhhcyBhbiBgZW1pdHNbJ3VwZGF0ZWQnXWAgcHJvcGVydHlcbiAgICAgKiBjb25zdCBlbWl0dGVyID0gbm9kZS5hZGRDb21wb25lbnQoJ215RW1pdHRlcicpO1xuICAgICAqIGNvbnN0IGVtaXRQYXRoID0gc2NlbmVPYmplY3QuYWRkRW1pdFBhdGgoZW1pdHRlciwgJ3VwZGF0ZWQnLCAnbXktY29tcG9uZW50LXVwZGF0ZWQnKTtcbiAgICAgKiBzY2VuZU9iamVjdC5iaW5kUGF0aChldmVudFBhdGgsIGVtaXRQYXRoKTtcbiAgICAgKlxuICAgICAqIG5vZGUuc3RhcnQoKTtcbiAgICAgKiAvLyByZWNlaXZlci5vbkV2ZW50KCdkby51cGRhdGUnLCAuLi4pIHdpbGwgbm93IGJlIGNhbGxlZCB3aGVuZXZlciBlbWl0dGVyIGNhbGxzIG5vdGlmeSgndXBkYXRlZCcpXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGV2ZW50UGF0aFxuICAgICAqIEBwYXJhbSBlbWl0UGF0aFxuICAgICAqL1xuICAgIGJpbmRQYXRoKGV2ZW50UGF0aDogRXZlbnRQYXRoLCBlbWl0UGF0aDogRW1pdFBhdGgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogU3B5IG9uIGV2ZW50cyBvciBpbnB1dCBhbmQgb3V0cHV0IHZhbHVlIGNoYW5nZXNcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IFtzY2VuZU9iamVjdF0gPSBhd2FpdCBzZGsuU2NlbmUuY3JlYXRlT2JqZWN0cygxKTtcbiAgICAgKiBjb25zdCBub2RlID0gc2NlbmVPYmplY3QuY3JlYXRlTm9kZSgpO1xuICAgICAqXG4gICAgICogLy8gbXAub2JqTG9hZGVyIGhhcyBhbiBvdXRwdXRzLnZpc2libGUgcHJvcGVydHlcbiAgICAgKiBjb25zdCBjb21wMSA9IG5vZGUuYWRkQ29tcG9uZW50KCdtcC5vYmpMb2FkZXInKTtcbiAgICAgKiBjb25zdCBvdXRwdXRQYXRoID0gc2NlbmVPYmplY3QuYWRkT3V0cHV0UGF0aChjb21wMSwgJ3Zpc2libGUnLCAnb2JqTG9hZGVyLXZpc2libGUnKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IG91dHB1dFNweSA9IHtcbiAgICAgKiAgIHBhdGg6IG91dHB1dFBhdGgsXG4gICAgICogICBvbkV2ZW50KHR5cGUsIGRhdGEpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ291dHB1dHMgdXBkYXRlZCcsIHR5cGUsIGRhdGEpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBzY2VuZU9iamVjdC5zcHlPbkV2ZW50KG91dHB1dFNweSk7XG4gICAgICpcbiAgICAgKiBub2RlLnN0YXJ0KCk7XG4gICAgICogLy8gb3V0cHV0U3B5Lm9uRXZlbnQoJ291dHB1dHNVcGRhdGVkJywgY29tcDEub3V0cHV0cy52aXNpYmxlKSB3aWxsIG5vdyBiZSBjYWxsZWQgd2hlbmV2ZXIgY29tcDEub3V0cHV0cy52aXNpYmxlIGNoYW5nZXNcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gc3B5XG4gICAgICovXG4gICAgc3B5T25FdmVudChzcHk6IElTY2VuZU9iamVjdFNweSk6IElTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbnB1dCBwcm9wZXJ0eSBvZiBhIHBhdGguIFRoZSBwYXRoIG11c3QgYmUgYWRkZWQgcHJpb3IgdG8gY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGhJZCBUaGUgcGF0aCBpZC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tJbnB1dFBhdGguc2V0XV0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBzZXRWYWx1ZUF0UGF0aChwYXRoSWQ6IHN0cmluZywgdmFsdWU6IHVua25vd24pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIG91dHB1dCBwcm9wZXJ0eSBvZiBhIHBhdGguIFRoZSBwYXRoIG11c3QgYmUgYWRkZWQgcHJpb3IgdG8gY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGhJZFxuICAgICAqIEByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgb3V0cHV0IHByb3BlcnR5LlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBbW0lucHV0UGF0aC5nZXRdXSBvciBbW091dHB1dFBhdGguZ2V0XV0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXRWYWx1ZUF0UGF0aChwYXRoSWQ6IHN0cmluZyk6IHVua25vd247XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhdG9yIGNvbnRhaW5pbmcgYSBwYXRoIGFuZCBpdHMgZGVzY3JpcHRvci4gVHlwaWNhbGx5IHVzZWQgdG8gYWNjZXNzIHRoZSBwYXRocyBmcm9tIGEgZGVzZXJpYWxpemVkIHNjZW5lIG9iamVjdC5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIC8vIFRoaXMgZXhhbXBsZSBzZXRzIHRoZSB2YWx1ZXMgb2YgYWxsIGlucHV0IHBhdGhzIHByb3ZpZGVkIGJ5IGRlc2VyaWFsaXplZCBzY2VuZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBjb25zdCBkZXNlcmlhbGl6ZWQgPSBhd2FpdCBzZGsuU2NlbmUuZGVzZXJpYWxpemUobXlTdHJpbmcpO1xuICAgICAqIGNvbnN0IHBhdGhzID0gZGVzZXJpYWxpemVkLnBhdGhJdGVyYXRvcigpO1xuICAgICAqIGZvciAoY29uc3QgeyBkZXNjLCBwYXRoIH0gb2YgcGF0aHMpIHtcbiAgICAgKiAgIGlmIChkZXNjLnR5cGUgPT09IFNjZW5lLlBhdGhUeXBlLklOUFVUKSB7XG4gICAgICogICAgIC8vIHdlIGtub3cgdGhpcyBwYXRoIGlzIGFuIGlucHV0IHBhdGhcbiAgICAgKiAgICAgY29uc3QgaW5wdXRQYXRoID0gZGVzYy5wYXRoIGFzIFNjZW5lLklucHV0UGF0aDtcbiAgICAgKlxuICAgICAqICAgICAvLyBOb3cgeW91IGNhbiBzZXQgdGhlIHZhbHVlIGF0IHRoZSBwYXRoXG4gICAgICogICAgIC8vIFlvdSBjYW4gY2FjaGUgdGhlIHJldHVybmVkIGlucHV0IHBhdGggdG8gdXNlIGl0IGxhdGVyLlxuICAgICAqICAgICBpbnB1dFBhdGguc2V0KDEwKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcGF0aEl0ZXJhdG9yKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UGF0aEluZm8+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbiBpdGVyYXRvciBpdGVyYXRpbmcgb3ZlciBhbGwgdGhlIG5vZGVzIGNvbnRhaW5lZCBieSB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBub2RlSXRlcmF0b3IoKTogSXRlcmFibGVJdGVyYXRvcjxJTm9kZT47XG4gIH1cblxuICAvKipcbiAgICogVGhlIG9iamVjdHMgcmV0dXJuZWQgYnkgdGhlIFtbcGF0aEl0ZXJhdG9yXV0gaW1wbGVtZW50IHRoaXMgaW50ZXJmYWNlLiBFYWNoIGRlc2NyaXB0b3IgYW5kIHBhdGggc2hvdWxkIGNvcnJlbGF0ZSBieSB0eXBlLlxuICAgKiBGb3IgZXhhbXBsZSwgYSBwYXRoIG9mIHR5cGUgW1tQYXRoVHlwZS5JTlBVVF1dIHdvdWxkIGhhdmUgYSBkZXNjcmlwdG9yIG9mIHR5cGUgW1tJbnB1dFBhdGhEZXNjcmlwdG9yXV0gYW5kIHBhdGggb2YgdHlwZSBbW0lucHV0UGF0aF1dLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBQYXRoSW5mbyB7XG4gICAgZGVzYzogSW5wdXRQYXRoRGVzY3JpcHRvciB8IE91dHB1dFBhdGhEZXNjcmlwdG9yIHwgRW1pdFBhdGhEZXNjcmlwdG9yIHwgRXZlbnRQYXRoRGVzY3JpcHRvcjtcbiAgICBwYXRoOiBJbnB1dFBhdGggfCBPdXRwdXRQYXRoIHwgRW1pdFBhdGggfCBFdmVudFBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY2VuZSB7XG4gIENvbXBvbmVudDogdHlwZW9mIFNjZW5lLkNvbXBvbmVudDtcbiAgSW50ZXJhY3Rpb25UeXBlOiB0eXBlb2YgU2NlbmUuSW50ZXJhY3Rpb25UeXBlO1xuICBQYXRoVHlwZTogdHlwZW9mIFNjZW5lLlBhdGhUeXBlO1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhyZWUuanMgZnJhbWV3b3JrIG9iamVjdHMuXG4gICAqIFR5cGljYWxseSB1c2VkIHRvIGNvbmZpZ3VyZSBnbG9iYWwgcHJvcGVydGllcyBvbiB0aGUgcmVuZGVyZXIgb3IgZWZmZWN0IGNvbXBvc2VyLlxuICAgKlxuICAgKiBgYGBcbiAgICogYXdhaXQgc2RrLlNjZW5lLmNvbmZpZ3VyZShmdW5jdGlvbihyZW5kZXJlciwgdGhyZWUsIGVmZmVjdENvbXBvc2VyKXtcbiAgICogICAvLyBjb25maWd1cmUgUEJSXG4gICAqICAgcmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSB0cnVlO1xuICAgKlxuICAgKiAgIC8vIGNvbmZpZ3VyZSBzaGFkb3cgbWFwcGluZ1xuICAgKiAgIHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcbiAgICogICByZW5kZXJlci5zaGFkb3dNYXAuYmlhcyA9IDAuMDAwMTtcbiAgICogICByZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IHRocmVlLlBDRlNvZnRTaGFkb3dNYXA7XG4gICAqXG4gICAqICAgaWYgKGVmZmVjdENvbXBvc2VyKSB7XG4gICAqICAgICAvLyBhZGQgYSBjdXN0b20gcGFzcyBoZXJlXG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjay5yZW5kZXJlciBNYXR0ZXJwb3J0J3MgV2ViR0xSZW5kZXJlciBvYmplY3QuXG4gICAqIEBwYXJhbSBjYWxsYmFjay50aHJlZSB0aHJlZS5qcyBtb2R1bGUuXG4gICAqIEBwYXJhbSBjYWxsYmFjay5lZmZlY3RDb21wb3NlciBNYXR0ZXJwb3J0J3MgRWZmZWN0Q29tcG9zZXIgb2JqZWN0LiBUaGlzIHZhbHVlIGNhbiBiZSBudWxsLlxuICAgKiBUbyBlbmFibGUgdGhlIGVmZmVjdCBjb21wb3NlciwgeW91IG11c3Qgc2V0IHVzZUVmZmVjdENvbXBvc2VyOiAxIGluIHlvdXIgYXBwbGljYXRpb24gY29uZmlnLlxuICAgKiBQbGVhc2Ugbm90ZSB0aGF0IGVuYWJsaW5nIGVmZmVjdCBjb21wb3NlciBkaXNhYmxlcyByZW5kZXJlci5hbnRpYWxpYXMgKCZhYT0xKVxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBjb25maWd1cmUoXG4gICAgY2FsbGJhY2s6IChyZW5kZXJlcjogVEhSRUUuV2ViR0xSZW5kZXJlciwgdGhyZWU6IHR5cGVvZiBUSFJFRSwgZWZmZWN0Q29tcG9zZXI6IEVmZmVjdENvbXBvc2VyIHwgbnVsbCkgPT4gdm9pZFxuICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc2NlbmUgbm9kZS5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBuZXcgc2NlbmUgbm9kZS5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbY3JlYXRlT2JqZWN0c11dIHRvIGNyZWF0ZSBhbiBvYmplY3QgdG8gdGhlbiBjcmVhdGUgbm9kZXMgaW5zdGVhZC5cbiAgICpcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgY3JlYXRlTm9kZSgpOiBQcm9taXNlPFNjZW5lLklOb2RlPjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzY2VuZSBub2Rlcy5cbiAgICogQHBhcmFtIGNvdW50IFRoZSBudW1iZXIgb2Ygc2NlbmUgbm9kZXMgdG8gY3JlYXRlLlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGFycmF5IG9mIHNjZW5lIG5vZGVzLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tjcmVhdGVPYmplY3RzXV0gdG8gY3JlYXRlIGFuIG9iamVjdCB0byB0aGVuIGNyZWF0ZSBub2RlcyBpbnN0ZWFkLlxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBjcmVhdGVOb2Rlcyhjb3VudDogbnVtYmVyKTogUHJvbWlzZTxTY2VuZS5JTm9kZVtdPjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzY2VuZSBvYmplY3RzLlxuICAgKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiBzY2VuZSBvYmplY3RzIHRvIGNyZWF0ZS5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBhcnJheSBvZiBzY2VuZSBvYmplY3RzLlxuICAgKiBgYGBcbiAgICogLy8gY3JlYXRlIGEgc2luZ2xlIG9iamVjdCBhbmQgZGVzdHJ1Y3R1cmUgaXQgZnJvbSB0aGUgcmV0dXJuZWQgYXJyYXlcbiAgICogY29uc3QgW3NjZW5lT2JqZWN0XSA9IGF3YWl0IHNkay5TY2VuZS5jcmVhdGVPYmplY3RzKDEpO1xuICAgKiBjb25zdCBub2RlID0gc2NlbmVPYmplY3QuY3JlYXRlTm9kZSgpO1xuICAgKiAvLyAuLi5cbiAgICogYGBgXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICovXG4gIGNyZWF0ZU9iamVjdHMoY291bnQ6IG51bWJlcik6IFByb21pc2U8U2NlbmUuSU9iamVjdFtdPjtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgc2NlbmUgb2JqZWN0IHdpdGggYWxsIG9mIGl0cyBzY2VuZSBub2RlcyBmcm9tIGEgc2VyaWFsaXplZCBzY2VuZS5cbiAgICogVGhlIHJldHVybmVkIHNjZW5lIG9iamVjdCBoYXMgbm90IGJlZW4gc3RhcnRlZCB5ZXQuXG4gICAqIEBwYXJhbSB0ZXh0IFRoZSBzZXJpYWxpemVkIHNjZW5lLlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBzY2VuZSBvYmplY3QuXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICovXG4gIGRlc2VyaWFsaXplKHRleHQ6IHN0cmluZyk6IFByb21pc2U8U2NlbmUuSU9iamVjdD47XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSBhIHNjZW5lIG9iamVjdCwgaXRzIG5vZGVzLCBhbmQgdGhlaXIgY29tcG9uZW50cyB0byBhIHN0cmluZy5cbiAgICogQHBhcmFtIHNjZW5lT2JqZWN0XG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2VyaWFsaXplZCBzdHJpbmcuXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICovXG4gIHNlcmlhbGl6ZShzY2VuZU9iamVjdDogU2NlbmUuSU9iamVjdCk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBzZXJpYWxpemVzIGFuIGFycmF5IG9mIHNjZW5lIG5vZGVzIGFuZCB0aGVpciBjb21wb25lbnRzIHRvIGEgc3RyaW5nLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgcHJvdmlkZWQgdG8gcHJvdmlkZSBhbiB1cGdyYWRlIHBhdGggZnJvbSBub2RlcyB0aGF0IHdlcmUgY3JlYXRlZCBiZWZvcmUgdGhlIGludHJvZHVjdGlvbiBvZiBgSU9iamVjdGBzLlxuICAgKlxuICAgKiBAcGFyYW0gc2NlbmVOb2RlcyBBbiBhcnJheSBvZiBzY2VuZSBub2Rlcy5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBzZXJpYWxpemVkIHN0cmluZy5cbiAgICpcbiAgICogQGJ1bmRsZVxuICAgKiBAZGVwcmVjYXRlZCBQcmVmZXIgdG8gc2VyaWFsaXplIGFuIGFycmF5IG9mIGBTY2VuZS5JTm9kZWAgdGhyb3VnaCB0aGVpciBjb250YWluaW5nIGBTY2VuZS5JT2JqZWN0YCBpbnN0ZWFkLlxuICAgKi9cbiAgc2VyaWFsaXplKHNjZW5lTm9kZXM6IFNjZW5lLklOb2RlW10pOiBQcm9taXNlPHN0cmluZz47XG5cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjb21wb25lbnQgZmFjdG9yeS5cbiAgICogQHBhcmFtIG5hbWUgQSB1bmlxdWUgY29tcG9uZW50IG5hbWUuXG4gICAqIEBwYXJhbSBmYWN0b3J5IEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICogQHJldHVybiBhIGRpc3Bvc2FibGUgdGhhdCBjYW4gYmUgdXNlZCB0byB1bnJlZ2lzdGVyIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICByZWdpc3RlcihuYW1lOiBzdHJpbmcsIGZhY3Rvcnk6ICgpID0+IFNjZW5lLklDb21wb25lbnQpOiBQcm9taXNlPElEaXNwb3NhYmxlIHwgbnVsbD47XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGFuIGFycmF5IG9mIGNvbXBvbmVudCBmYWN0b3JpZXMgYWxsIGF0IG9uY2UgYW5kIHJldHVybiBhbiBhcnJheSBvZiBkaXNwb3NhYmxlcy5cbiAgICogQ2FsbGluZyBkaXNwb3NlIG9uIGFueSBvZiB0aGUgcmV0dXJuZWQgZGlzcG9zYWJsZXMsIHVucmVnaXN0ZXJzIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqXG4gICAqIGBgYFxuICAgKiBmdW5jdGlvbiBteUNvbXBvbmVudDFGYWN0b3J5KCkge1xuICAgKiAgICByZXR1cm4gbmV3IE15Q29tcG9uZW50MSgpO1xuICAgKiB9XG4gICAqXG4gICAqIGZ1bmN0aW9uIG15Q29tcG9uZW50MkZhY3RvcnkoKSB7XG4gICAqICAgIHJldHVybiBuZXcgTXlDb21wb25lbnQyKCk7XG4gICAqIH1cbiAgICpcbiAgICogY29uc3QgZGlzcG9zYWJsZXMgPSBhd2FpdCBzZGsuU2NlbmUucmVnaXN0ZXJDb21wb25lbnRzKFtcbiAgICogICB7XG4gICAqICAgICBuYW1lOiAnbXlDb21wb25lbnQxJyxcbiAgICogICAgIGZhY3Rvcnk6IG15Q29tcG9uZW50MUZhY3RvcnksXG4gICAqICAgfSxcbiAgICogICB7XG4gICAqICAgICBuYW1lOiAnbXlDb21wb25lbnQyJyxcbiAgICogICAgIGZhY3Rvcnk6IG15Q29tcG9uZW50MkZhY3RvcnksXG4gICAqICAgfSxcbiAgICogXSk7XG4gICAqXG4gICAqIC8vIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhlIGNvbXBvbmVudHMsIHlvdSBjYW4gdW5yZWdpc3RlciB0aGUgY29tcG9uZW50cyBieSBjYWxsaW5nIGRpc3Bvc2Ugb24gZWFjaCBpdGVtIGluIHRoZSByZXR1cm4gcmVzdWx0LlxuICAgKiBmb3IgKGNvbnN0IGRpc3Bvc2FibGUgb2YgZGlzcG9zYWJsZXMpIHtcbiAgICogICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICogfVxuICAgKlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudHMgQW4gYXJyYXkgb2YgW1tJQ29tcG9uZW50RGVzY11dXG4gICAqIEByZXR1cm4gYW4gYXJyYXkgb2YgZGlzcG9zYWJsZXMgdGhhdCB1bnJlZ2lzdGVyIHRoZSBjb21wb25lbnRzIHdoZW4gZGlzcG9zZWQuXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICovXG4gIHJlZ2lzdGVyQ29tcG9uZW50cyhjb21wb25lbnRzOiBTY2VuZS5JQ29tcG9uZW50RGVzY1tdKTogUHJvbWlzZTxJRGlzcG9zYWJsZVtdIHwgbnVsbD47XG5cbiAgdW5yZWdpc3RlckNvbXBvbmVudHMoY29tcG9uZW50czogU2NlbmUuSUNvbXBvbmVudERlc2NbXSk6IFByb21pc2U8dm9pZD47XG59XG4iLCJleHBvcnQgZW51bSBLZXlzIHtcbiAgQkFDS1NQQUNFID0gOCxcbiAgVEFCID0gOSxcbiAgUkVUVVJOID0gMTMsXG4gIFNISUZUID0gMTYsXG4gIENPTlRST0wgPSAxNyxcbiAgQUxUID0gMTgsXG4gIEVTQ0FQRSA9IDI3LFxuICBTUEFDRSA9IDMyLFxuICBIQVNIID0gMzUsXG4gIExFRlRBUlJPVyA9IDM3LFxuICBVUEFSUk9XID0gMzgsXG4gIFJJR0hUQVJST1cgPSAzOSxcbiAgRE9XTkFSUk9XID0gNDAsXG4gIERFTEVURSA9IDQ2LFxuICBaRVJPID0gNDgsXG4gIE9ORSA9IDQ5LFxuICBUV08gPSA1MCxcbiAgVEhSRUUgPSA1MSxcbiAgRk9VUiA9IDUyLFxuICBGSVZFID0gNTMsXG4gIFNJWCA9IDU0LFxuICBTRVZFTiA9IDU1LFxuICBFSUdIVCA9IDU2LFxuICBOSU5FID0gNTcsXG4gIEFUID0gNjQsXG4gIEEgPSA2NSxcbiAgQiA9IDY2LFxuICBDID0gNjcsXG4gIEQgPSA2OCxcbiAgRSA9IDY5LFxuICBGID0gNzAsXG4gIEcgPSA3MSxcbiAgSCA9IDcyLFxuICBJID0gNzMsXG4gIEogPSA3NCxcbiAgSyA9IDc1LFxuICBMID0gNzYsXG4gIE0gPSA3NyxcbiAgTiA9IDc4LFxuICBPID0gNzksXG4gIFAgPSA4MCxcbiAgUSA9IDgxLFxuICBSID0gODIsXG4gIFMgPSA4MyxcbiAgVCA9IDg0LFxuICBVID0gODUsXG4gIFYgPSA4NixcbiAgVyA9IDg3LFxuICBYID0gODgsXG4gIFkgPSA4OSxcbiAgWiA9IDkwLFxuICBTRU1JQ09MT04gPSAxODYsXG4gIFBMVVNFUVVBTFMgPSAxODcsXG4gIENPTU1BID0gMTg4LFxuICBEQVNIVU5ERVJTQ09SRSA9IDE4OSxcbiAgUEVSSU9EID0gMTkwLFxuICBPUEVOQlJBQ0tFVCA9IDIxOSxcbn1cbiIsImV4cG9ydCBlbnVtIEtleVN0YXRlIHtcbiAgRE9XTixcbiAgUFJFU1NFRCxcbiAgVVAsXG59XG4iLCJleHBvcnQgZW51bSBQb2ludGVyQnV0dG9uIHtcbiAgUFJJTUFSWSxcbiAgTUlERExFLFxuICBTRUNPTkRBUlksXG4gIEJBQ0ssXG4gIEZPUldBUkQsXG4gIENPVU5UXG59XG5cbmV4cG9ydCBlbnVtIFBvaW50ZXJCdXR0b25NYXNrIHtcbiAgTk9ORSxcbiAgUFJJTUFSWSA9IDEgPDwgUG9pbnRlckJ1dHRvbi5QUklNQVJZLFxuICBTRUNPTkRBUlkgPSAxIDw8IFBvaW50ZXJCdXR0b24uU0VDT05EQVJZLFxuICBNSURETEUgPSAxIDw8IFBvaW50ZXJCdXR0b24uTUlERExFLFxuICBCQUNLID0gMSA8PCBQb2ludGVyQnV0dG9uLkJBQ0ssXG4gIEZPUldBUkQgPSAxIDw8IFBvaW50ZXJCdXR0b24uRk9SV0FSRCxcbiAgQUxMID0gKDEgPDwgUG9pbnRlckJ1dHRvbi5DT1VOVCkgLSAxXG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsYWJlbDogc3RyaW5nO1xuICBjcmVhdGVMaW5rKCk6IFByb21pc2U8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExpbmtDcmVhdGUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbGluaywgc2V0TGlua10gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBuZXdMaW5rID0gYXdhaXQgcHJvcHMuY3JlYXRlTGluaygpO1xuICAgIHNldExpbmsobmV3TGluayk7XG4gIH0sIFtwcm9wc10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjYWxsYmFja30+e3Byb3BzLmxhYmVsfTwvYnV0dG9uPlxuICAgICAgPGJyLz5cbiAgICAgIDx0ZXh0YXJlYSBzdHlsZT17e2hlaWdodDogJzMuNWVtJ319IHZhbHVlPXtsaW5rfSByZWFkT25seT17dHJ1ZX0vPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBMaW5rIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBDcmVhdGlvblByb3BzIHtcbiAgc2V0UG9saWN5KHBvbGljeTogTGluay5DcmVhdGlvblBvbGljeSwgb3B0aW9ucz86IFBhcnRpYWw8TGluay5DcmVhdGVMaW5rT3B0aW9ucz4pOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRpb25Qb2xpY3kocHJvcHM6IENyZWF0aW9uUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IG9wdGlvbktleXMgPSBPYmplY3Qua2V5cyhMaW5rLkNyZWF0aW9uUG9saWN5KSBhcyBBcnJheTxrZXlvZiB0eXBlb2YgTGluay5DcmVhdGlvblBvbGljeT47XG4gIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25LZXlzLm1hcCgoa2V5LCBpKSA9PiA8b3B0aW9uIGtleT17aX0gdmFsdWU9e0xpbmsuQ3JlYXRpb25Qb2xpY3lba2V5XX0+e2tleX08L29wdGlvbj4pO1xuXG4gIGNvbnN0IHNldFBvbGljeSA9IHVzZUNhbGxiYWNrKChzZWxlY3RvcjogU3ludGhldGljRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgcG9saWN5ID0gc2VsZWN0b3IuY3VycmVudFRhcmdldC52YWx1ZSBhcyBMaW5rLkNyZWF0aW9uUG9saWN5O1xuICAgIGlmIChwb2xpY3kgPT09IExpbmsuQ3JlYXRpb25Qb2xpY3kuTUFUVEVSUE9SVCkge1xuICAgICAgcHJvcHMuc2V0UG9saWN5KHBvbGljeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLnNldFBvbGljeShwb2xpY3ksIHtcbiAgICAgICAgaW5jbHVkZVBhcmFtczogcG9saWN5ID09PSBMaW5rLkNyZWF0aW9uUG9saWN5LlJFRkVSUkVSID8gWydhcGlIb3N0JywgJ2FwcGxpY2F0aW9uS2V5J106IFsnYXBpSG9zdCddLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcHJvcHNdKTtcblxuICByZXR1cm4gKFxuICAgIDxzZWxlY3Qgb25DaGFuZ2U9e3NldFBvbGljeX0+XG4gICAgICB7b3B0aW9uc31cbiAgICA8L3NlbGVjdD5cbiAgKTtcbn1cblxuaW50ZXJmYWNlIE9wZW5Qcm9wcyB7XG4gIHNldFBvbGljeShwb2xpY3k6IExpbmsuT3BlblBvbGljeSwgb3B0aW9uczogUGFydGlhbDxMaW5rLk9wZW5Qb2xpY3lPcHRpb25zPik6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBPcGVuaW5nUG9saWN5KHByb3BzOiBPcGVuUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IG9wdGlvbktleXMgPSBPYmplY3Qua2V5cyhMaW5rLk9wZW5Qb2xpY3kpIGFzIEFycmF5PGtleW9mIHR5cGVvZiBMaW5rLk9wZW5Qb2xpY3k+O1xuICBjb25zdCBvcHRpb25zID0gb3B0aW9uS2V5cy5tYXAoKGtleSwgaSkgPT4gPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtMaW5rLk9wZW5Qb2xpY3lba2V5XX0+e2tleX08L29wdGlvbj4pO1xuXG4gIGNvbnN0IHNldFBvbGljeSA9IHVzZUNhbGxiYWNrKChzZWxlY3RvcjogU3ludGhldGljRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgcG9saWN5ID0gc2VsZWN0b3IuY3VycmVudFRhcmdldC52YWx1ZSBhcyBMaW5rLk9wZW5Qb2xpY3k7XG4gICAgcHJvcHMuc2V0UG9saWN5KHBvbGljeSwge1xuICAgICAgdGVtcGxhdGVIcmVmOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJz8ke2J1bmRsZVZlcnNpb259JiR7YXBpSG9zdH0mJHttZHN9JiR7YXBwbGljYXRpb25LZXl9JyxcbiAgICB9KTtcbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8c2VsZWN0IG9uQ2hhbmdlPXtzZXRQb2xpY3l9PlxuICAgICAge29wdGlvbnN9XG4gICAgPC9zZWxlY3Q+XG4gICk7XG59XG5cbmludGVyZmFjZSBFeHRlcm5hbExpbmtQb2xpY3lQcm9wcyB7XG4gIHNldFBvbGljeShvcGVuSW5OZXdXaW5kb3c6IGJvb2xlYW4pOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRXh0ZXJuYWxMaW5raW5nUG9saWN5KHByb3BzOiBFeHRlcm5hbExpbmtQb2xpY3lQcm9wcyk6IEpTWC5FbGVtZW50IHtcblxuICBjb25zdCBzZXRQb2xpY3kgPSB1c2VDYWxsYmFjaygoc2VsZWN0b3I6IFN5bnRoZXRpY0V2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IG5ld1dpbmRvd1BvbGljeSA9IHNlbGVjdG9yLmN1cnJlbnRUYXJnZXQudmFsdWUgPT09ICduZXcgd2luZG93JztcbiAgICBwcm9wcy5zZXRQb2xpY3kobmV3V2luZG93UG9saWN5KTtcbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8c2VsZWN0IG9uQ2hhbmdlPXtzZXRQb2xpY3l9PlxuICAgICAgPG9wdGlvbiB2YWx1ZT17J25ldyB3aW5kb3cnfT5ORVcgV0lORE9XPC9vcHRpb24+XG4gICAgICA8b3B0aW9uIHZhbHVlPXsnc2FtZSB3aW5kb3cnfT5TQU1FIFdJTkRPVzwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rQ3JlYXRlIH0gZnJvbSAnLi9MaW5rQ3JlYXRlJztcbmltcG9ydCB7IE9wZW5pbmdQb2xpY3ksIEV4dGVybmFsTGlua2luZ1BvbGljeSwgQ3JlYXRpb25Qb2xpY3kgfSBmcm9tICcuL0xpbmtQb2xpY3knO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGluayhwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YExpbmsgLSBDcmVhdGVgfTwvZGl2PlxuICAgICAgICA8bGFiZWw+UG9saWN5OjwvbGFiZWw+PENyZWF0aW9uUG9saWN5IHNldFBvbGljeT17cHJvcHMuc2RrLkxpbmsuc2V0U2hhcmVMaW5rUG9saWN5fS8+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxMaW5rQ3JlYXRlIGxhYmVsPXsnY3JlYXRlTGluayd9IGNyZWF0ZUxpbms9e3Byb3BzLnNkay5MaW5rLmNyZWF0ZUxpbmt9Lz5cbiAgICAgICAgPGJyLz5cbiAgICAgICAgPExpbmtDcmVhdGUgbGFiZWw9eydjcmVhdGVEZWVwTGluayd9IGNyZWF0ZUxpbms9e3Byb3BzLnNkay5MaW5rLmNyZWF0ZURlZXBMaW5rfS8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BMaW5rIC0gU2V0IFBvbGljeWB9PC9kaXY+XG4gICAgICAgIE9wZW5pbmcgcG9saWNpZXM6XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD5Nb2RlbDo8L3RkPjx0ZD48T3BlbmluZ1BvbGljeSBzZXRQb2xpY3k9e3Byb3BzLnNkay5MaW5rLnNldE1vZGVsTGlua1BvbGljeX0vPjwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQ+TmF2aWdhdGlvbjo8L3RkPjx0ZD48T3BlbmluZ1BvbGljeSBzZXRQb2xpY3k9e3Byb3BzLnNkay5MaW5rLnNldE5hdmlnYXRpb25MaW5rUG9saWN5fS8+PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD5TYW1lIE9yaWdpbjo8L3RkPjx0ZD48T3BlbmluZ1BvbGljeSBzZXRQb2xpY3k9e3Byb3BzLnNkay5MaW5rLnNldFNhbWVPcmlnaW5MaW5rUG9saWN5fS8+PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD5FeHRlcm5hbDo8L3RkPjx0ZD48RXh0ZXJuYWxMaW5raW5nUG9saWN5IHNldFBvbGljeT17cHJvcHMuc2RrLkxpbmsuc2V0RXh0ZXJuYWxMaW5rUG9saWN5fS8+PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkTWF0dGVydGFnOiBzdHJpbmc7XG4gIHNlbGVjdGVkQXNzZXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVkaXRJY29uKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcblxuICBjb25zdCBlZGl0SWNvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBwcm9wcy5zZGsuTWF0dGVydGFnLmVkaXRJY29uKHByb3BzLnNlbGVjdGVkTWF0dGVydGFnLCBwcm9wcy5zZWxlY3RlZEFzc2V0KTtcbiAgfSwgW3Byb3BzLnNkay5NYXR0ZXJ0YWcsIHByb3BzLnNlbGVjdGVkQXNzZXQsIHByb3BzLnNlbGVjdGVkTWF0dGVydGFnXSk7XG5cbiAgY29uc3QgcmVzZXRJY29uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHByb3BzLnNkay5NYXR0ZXJ0YWcucmVzZXRJY29uKHByb3BzLnNlbGVjdGVkTWF0dGVydGFnKTtcbiAgfSwgW3Byb3BzLnNkay5NYXR0ZXJ0YWcsIHByb3BzLnNlbGVjdGVkTWF0dGVydGFnXSk7XG5cblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17ZWRpdEljb259PkVkaXQgSWNvbjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3Jlc2V0SWNvbn0+UmVzZXQgSWNvbjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZE1hdHRlcnRhZzogc3RyaW5nO1xuICBzZWxlY3RlZEFzc2V0OiBzdHJpbmc7XG4gIGFkZEFzc2V0KGlkOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZ2lzdGVySWNvbihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGlkSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHNyY0lucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHJlZ2lzdGVySWNvbiA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoaWRJbnB1dC5jdXJyZW50ICYmIHNyY0lucHV0LmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IGlkID0gaWRJbnB1dC5jdXJyZW50LnZhbHVlO1xuICAgICAgY29uc3Qgc3JjID0gc3JjSW5wdXQuY3VycmVudC52YWx1ZTtcbiAgICAgIGF3YWl0IHByb3BzLnNkay5NYXR0ZXJ0YWcucmVnaXN0ZXJJY29uKGlkLCBzcmMpO1xuICAgICAgcHJvcHMuYWRkQXNzZXQoaWQsIHNyYyk7XG4gICAgfVxuICB9LCBbcHJvcHNdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiAnMTUlJyB9fT5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nbWF0dGVydGFnLWljb24taWQnPmlkOiA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJywgd2lkdGg6ICc4NSUnICB9fT5cbiAgICAgICAgICA8aW5wdXQgcmVmPXtpZElucHV0fSBpZD0nbWF0dGVydGFnLWljb24taWQnIHR5cGU9J3N0cmluZycvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJywgd2lkdGg6ICcxNSUnIH19PlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdtYXR0ZXJ0YWctaWNvbi1zcmMnPnNyYzogPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiAnODUlJyAgfX0+XG4gICAgICAgICAgPGlucHV0IHJlZj17c3JjSW5wdXR9IGlkPSdtYXR0ZXJ0YWctaWNvbi1zcmMnIHR5cGU9J3N0cmluZycvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZWdpc3Rlckljb259PlJlZ2lzdGVyPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IENvbnRyb2xQYW5lbCB9IGZyb20gJy4uL0NvbnRyb2xQYW5lbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQ29sbGVjdGlvbiB9IGZyb20gJy4uL09ic2VydmFibGVDb2xsZWN0aW9uJztcbmltcG9ydCB7IENvbGxlY3Rpb25JbnNwZWN0b3IgfSBmcm9tICcuLi9Db2xsZWN0aW9uSW5zcGVjdG9yJztcbmltcG9ydCB7IEVkaXRJY29uIH0gZnJvbSAnLi9FZGl0SWNvbic7XG5pbXBvcnQgeyBSZWdpc3Rlckljb24gfSBmcm9tICcuL1JlZ2lzdGVySWNvbic7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uL0V2ZW50JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRBc3NldDogc3RyaW5nO1xuICBhZGRBc3NldChpZDogc3RyaW5nLCBzcmM6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNYXR0ZXJ0YWcocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbc2VsZWN0ZWRNYXR0ZXJ0YWcsIHNlbGVjdE1hdHRlcnRhZ10gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgbWF0dGVydGFnT3B0aW9uTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaXRlbTogTXBTZGsuTWF0dGVydGFnLk9ic2VydmFibGVNYXR0ZXJ0YWdEYXRhKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXRlbS5sYWJlbCB8fCAnKG5vIGxhYmVsKSc7XG4gIH0sIFtdKTtcblxuICBjb25zdCBtYXR0ZXJ0YWdPcHRpb25Tb3J0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGl0ZW0xOiBNcFNkay5NYXR0ZXJ0YWcuT2JzZXJ2YWJsZU1hdHRlcnRhZ0RhdGEsIGl0ZW0yOiBNcFNkay5NYXR0ZXJ0YWcuT2JzZXJ2YWJsZU1hdHRlcnRhZ0RhdGEpOiBudW1iZXIge1xuICAgIGlmIChpdGVtMS5sYWJlbCA8IGl0ZW0yLmxhYmVsKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpdGVtMS5sYWJlbCA+IGl0ZW0yLmxhYmVsKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sIFtdKTtcblxuXG4gIGNvbnN0IHsgc2RrIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J01hdHRlcnRhZyAtIENvbGxlY3Rpb24nfT5cbiAgICAgICAgPE9ic2VydmFibGVDb2xsZWN0aW9uXG4gICAgICAgICAgY29sbGVjdGlvbj17c2RrLk1hdHRlcnRhZy5kYXRhfVxuICAgICAgICAgIG5hbWU9eydNYXR0ZXJ0YWdzJ31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29sbGVjdGlvbkluc3BlY3RvclxuICAgICAgICBsYWJlbD17J01hdHRlcnRhZyd9XG4gICAgICAgIGNvbGxlY3Rpb249e3Nkay5NYXR0ZXJ0YWcuZGF0YX1cbiAgICAgICAgb25DaGFuZ2VkPXtzZWxlY3RNYXR0ZXJ0YWd9XG4gICAgICAgIG9wdGlvbkxhYmVsPXttYXR0ZXJ0YWdPcHRpb25MYWJlbH1cbiAgICAgICAgc29ydD17bWF0dGVydGFnT3B0aW9uU29ydH1cbiAgICAgIC8+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BNYXR0ZXJ0YWdgfTwvZGl2PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPEV2ZW50IHNkaz17c2RrfSBlbnVtPXtwcm9wcy5zZGsuTWF0dGVydGFnLkV2ZW50fSAvPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydNYXR0ZXJ0YWcgLSBFZGl0IEljb24nfT5cbiAgICAgICAgPEVkaXRJY29uXG4gICAgICAgICAgc2RrPXtzZGt9XG4gICAgICAgICAgc2VsZWN0ZWRNYXR0ZXJ0YWc9e3NlbGVjdGVkTWF0dGVydGFnfVxuICAgICAgICAgIHNlbGVjdGVkQXNzZXQ9e3Byb3BzLnNlbGVjdGVkQXNzZXR9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydNYXR0ZXJ0YWcgLSBSZWdpc3RlciBJY29uJ30+XG4gICAgICAgIDxSZWdpc3Rlckljb25cbiAgICAgICAgICBzZGs9e3Nka31cbiAgICAgICAgICBzZWxlY3RlZE1hdHRlcnRhZz17c2VsZWN0ZWRNYXR0ZXJ0YWd9XG4gICAgICAgICAgc2VsZWN0ZWRBc3NldD17cHJvcHMuc2VsZWN0ZWRBc3NldH1cbiAgICAgICAgICBhZGRBc3NldD17cHJvcHMuYWRkQXNzZXR9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmNvbnN0IHRleHRBcmVhU3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7XG4gIGhlaWdodDogNTAsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTWVhc3VyZW1lbnRzR2V0RGF0YShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGxldCBtZWFzdXJlbWVudHNEYXRhOiBhbnk7XG4gICAgdHJ5IHtcbiAgICAgIG1lYXN1cmVtZW50c0RhdGEgPSBhd2FpdCBwcm9wcy5zZGsuTWVhc3VyZW1lbnRzLmdldERhdGEoKTtcblxuICAgICAgc2V0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtZWFzdXJlbWVudHNEYXRhKSk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yICR7ZX1gKTtcbiAgICB9XG5cbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPHRyPlxuICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5nZXREYXRhPC9idXR0b24+XG4gICAgICA8L3RkPlxuICAgICAgPHRkIGNvbFNwYW49ezJ9PlxuICAgICAgICA8dGV4dGFyZWEgcm93cz17M30gc3R5bGU9e3RleHRBcmVhU3R5bGV9IHZhbHVlPXttZXNzYWdlfSByZWFkT25seT17dHJ1ZX0vPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufVxuIiwiaW1wb3J0IHsgdHlwZSBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNkazogTXBTZGtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBNZWFzdXJlbWVudE1vZGVUb2dnbGUoe3Nka306IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbYWN0aXZlLCBzZXRBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKT0+IHtcbiAgICBjb25zdCBzdWIgPSBzZGsuTWVhc3VyZW1lbnRzLm1vZGUuc3Vic2NyaWJlKChtb2RlKSA9PiBzZXRBY3RpdmUobW9kZS5hY3RpdmUpKTtcbiAgICByZXR1cm4gKCkgPT4gc3ViLmNhbmNlbCgpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdG9nZ2xlTW9kZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZGsuTWVhc3VyZW1lbnRzLnRvZ2dsZU1vZGUoIWFjdGl2ZSk7XG4gIH0sIFthY3RpdmUsIHNkay5NZWFzdXJlbWVudHNdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlTW9kZX1cbiAgICAgICAgPlRvZ2dsZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBBY3RpdmU6IDxzcGFuPntTdHJpbmcoYWN0aXZlKX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IE1lYXN1cmVtZW50c0dldERhdGEgfSBmcm9tICcuLi9NZWFzdXJlbWVudHNHZXREYXRhJztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IENvbnRyb2xQYW5lbCB9IGZyb20gJy4uL0NvbnRyb2xQYW5lbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5cbmltcG9ydCB7IE1lYXN1cmVtZW50TW9kZVRvZ2dsZSB9IGZyb20gJy4vVG9nZ2xlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1lYXN1cmVtZW50cyh7c2RrfTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxDb2xsZWN0aW9uSW5zcGVjdG9yXG4gICAgICAgIGNvbGxlY3Rpb249e3Nkay5NZWFzdXJlbWVudHMuZGF0YX1cbiAgICAgICAgbGFiZWw9eydNZWFzdXJlbWVudHMnfVxuICAgICAgLz5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTWVhc3VyZW1lbnRzIC0gTW9kZSd9PlxuICAgICAgICA8T2JzZXJ2YWJsZVxuICAgICAgICAgIG5hbWU9eydtb2RlJ31cbiAgICAgICAgICBvYnNlcnZhYmxlPXtzZGsuTWVhc3VyZW1lbnRzLm1vZGV9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTWVhc3VyZW1lbnRzIC0gVG9nZ2xlJ30+XG4gICAgICAgIDxNZWFzdXJlbWVudE1vZGVUb2dnbGVcbiAgICAgICAgICBzZGs9e3Nka31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydNZWFzdXJlbWVudHMgLSBHZXREYXRhJ30+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8TWVhc3VyZW1lbnRzR2V0RGF0YSBzZGs9e3Nka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuY29uc3QgdGV4dEFyZWFTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgaGVpZ2h0OiA1MCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2RlbEdldERhdGEocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBsZXQgbW9kZWxEYXRhOiBhbnk7XG4gICAgdHJ5IHtcbiAgICAgIG1vZGVsRGF0YSA9IGF3YWl0IHByb3BzLnNkay5Nb2RlbC5nZXREYXRhKCk7XG5cbiAgICAgIHNldE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkobW9kZWxEYXRhKSk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yICR7ZX1gKTtcbiAgICB9XG5cbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPHRyPlxuICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5nZXREYXRhPC9idXR0b24+XG4gICAgICA8L3RkPlxuICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICA8dGV4dGFyZWEgcm93cz17M30gc3R5bGU9e3RleHRBcmVhU3R5bGV9IHZhbHVlPXttZXNzYWdlfSByZWFkT25seT17dHJ1ZX0vPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIE1vZGVsR2V0RGV0YWlscyhwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGxldCBtb2RlbERldGFpbHM6IGFueTtcbiAgICB0cnkge1xuICAgICAgbW9kZWxEZXRhaWxzID0gYXdhaXQgcHJvcHMuc2RrLk1vZGVsLmdldERldGFpbHMoKTtcblxuICAgICAgc2V0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtb2RlbERldGFpbHMpKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgc2V0TWVzc2FnZShgZXJyb3IgJHtlfWApO1xuICAgIH1cblxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8dHI+XG4gICAgICA8dGQgY29sU3Bhbj17MX0+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17Y2FsbGJhY2t9PmdldERldGFpbHM8L2J1dHRvbj5cbiAgICAgIDwvdGQ+XG4gICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgIDx0ZXh0YXJlYSByb3dzPXszfSBzdHlsZT17dGV4dEFyZWFTdHlsZX0gdmFsdWU9e21lc3NhZ2V9IHJlYWRPbmx5PXt0cnVlfS8+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vZGVsR2V0RGF0YSB9IGZyb20gJy4vTW9kZWxHZXREYXRhJztcbmltcG9ydCB7IE1vZGVsR2V0RGV0YWlscyB9IGZyb20gJy4vTW9kZWxHZXREZXRhaWxzJztcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi9FdmVudCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2RlbChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YE1vZGVsYH08L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxNb2RlbEdldERhdGEgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgICAgICAgIDxNb2RlbEdldERldGFpbHMgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgICAgICAgIDxFdmVudCBzZGs9e3Byb3BzLnNka30gZW51bT17cHJvcHMuc2RrLk1vZGVsLkV2ZW50fS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IEludGVybmFsTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBJbnRlcm5hbE1wU2RrLk1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUGx1Z2luTG9hZChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuICBjb25zdCB1cmxJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGFwcEtleUlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgcGx1Z2luSWRJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgbG9hZFBsdWdpbiA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXVybElucHV0RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IHVybElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICBjb25zdCBhcHBsaWNhdGlvbktleSA9IGFwcEtleUlucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICBjb25zdCBwbHVnaW5JZCA9IHBsdWdpbklkSW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuXG4gICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IGFwcGxpY2F0aW9uS2V5ID09PSB1bmRlZmluZWQgfHwgcGx1Z2luSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwbHVnaW4gPSBwcm9wcy5zZGsuUGx1Z2luO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHBsdWdpbi5sb2FkKHtcbiAgICAgICAgYXBwbGljYXRpb25LZXksXG4gICAgICAgIGlkOiBwbHVnaW5JZCxcbiAgICAgIH0sIG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKS5ocmVmKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgc2V0TWVzc2FnZShgZXJyb3I6ICR7ZX1gKTtcbiAgICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHVubG9hZFBsdWdpbiA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXVybElucHV0RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFwcGxpY2F0aW9uS2V5ID0gYXBwS2V5SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgIGNvbnN0IHBsdWdpbklkID0gcGx1Z2luSWRJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICBpZiAoYXBwbGljYXRpb25LZXkgPT09IHVuZGVmaW5lZCB8fCBwbHVnaW5JZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGx1Z2luID0gcHJvcHMuc2RrLlBsdWdpbjtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwbHVnaW4udW5sb2FkKHtcbiAgICAgICAgYXBwbGljYXRpb25LZXksXG4gICAgICAgIGlkOiBwbHVnaW5JZCxcbiAgICAgIH0pO1xuICAgICAgLy8gc2V0TWVzc2FnZShgdXJsIHNldG8gOiR7c3dlZXBJZH0gZGlzYWJsZWRgKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgc2V0TWVzc2FnZShgZXJyb3I6ICR7ZX1gKTtcbiAgICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPHNwYW4+QXBwIEtleTwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPSdhcHBsaWNhdGlvbiBrZXknIGRlZmF1bHRWYWx1ZT0ncWEzMTRhcGYyOGQ0dW03Nm40NWN6OTFtZCcgcmVmPXthcHBLZXlJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8c3Bhbj5QbHVnaW4gSWQ8L3NwYW4+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj0ncGx1Z2luIGlkJyByZWY9e3BsdWdpbklkSW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPHNwYW4+VXJsPC9zcGFuPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J3NjZW5lLXNvdXJjZS11cmwnIHBsYWNlaG9sZGVyPSdzb3VyY2UgdXJsJyByZWY9e3VybElucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17bG9hZFBsdWdpbn0+TG9hZDwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17dW5sb2FkUGx1Z2lufT5VbmxvYWQ8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgICA8ZGl2IGlkPSdzY2VuZS1zZXRwbHVnaW4tbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgSW50ZXJuYWxNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbXBvcnQgeyBQbHVnaW5Mb2FkIH0gZnJvbSAnLi9QbHVnaW5Mb2FkJztcbmltcG9ydCB7IE9ic2VydmFibGVDb2xsZWN0aW9uIH0gZnJvbSAnLi9PYnNlcnZhYmxlQ29sbGVjdGlvbic7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuL0NvbnRyb2xQYW5lbCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogSW50ZXJuYWxNcFNkay5NcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFBsdWdpbihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHBsdWdpbiA9IHByb3BzLnNkay5QbHVnaW47XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BQbHVnaW5gfT5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxQbHVnaW5Mb2FkIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BQbHVnaW4gLSBDb2xsZWN0aW9uYH0+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvbiBjb2xsZWN0aW9uPXtwbHVnaW4uZGF0YX0gbmFtZT0nUGx1Z2luLmRhdGEnIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZEFzc2V0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFZGl0VGV4dHVyZShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGVkaXRJY29uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHByb3BzLnNkay5Qb2ludGVyLmVkaXRUZXh0dXJlKHByb3BzLnNlbGVjdGVkQXNzZXQpO1xuICB9LCBbcHJvcHMuc2RrLlBvaW50ZXIsIHByb3BzLnNlbGVjdGVkQXNzZXRdKTtcblxuICBjb25zdCByZXNldEljb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcHJvcHMuc2RrLlBvaW50ZXIucmVzZXRUZXh0dXJlKCk7XG4gIH0sIFtwcm9wcy5zZGsuUG9pbnRlcl0pO1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIFNlbGVjdGVkQXNzZXQ6IHtwcm9wcy5zZWxlY3RlZEFzc2V0fVxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtlZGl0SWNvbn0+RWRpdCBUZXh0dXJlPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17cmVzZXRJY29ufT5SZXNldCBUZXh0dXJlPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNkazogTXBTZGs7XG4gIGFkZEFzc2V0KGlkOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZ2lzdGVyVGV4dHVyZShwcm9wczogT21pdDxQcm9wcywgJ3NlbGVjdGVkQXNzZXQnPik6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgaWRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgc3JjSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgcmVnaXN0ZXJUZXh0dXJlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpZElucHV0LmN1cnJlbnQgJiYgc3JjSW5wdXQuY3VycmVudCkge1xuICAgICAgY29uc3QgaWQgPSBpZElucHV0LmN1cnJlbnQudmFsdWU7XG4gICAgICBjb25zdCBzcmMgPSBzcmNJbnB1dC5jdXJyZW50LnZhbHVlO1xuICAgICAgYXdhaXQgcHJvcHMuc2RrLlBvaW50ZXIucmVnaXN0ZXJUZXh0dXJlKGlkLCBzcmMpO1xuICAgICAgcHJvcHMuYWRkQXNzZXQoaWQsIHNyYyk7XG4gICAgfVxuICB9LCBbcHJvcHNdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdwb2ludGVyLXRleHR1cmUtaWQnPmlkOiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtpZElucHV0fSBpZD0ncG9pbnRlci10ZXh0dXJlLWlkJyB0eXBlPSdzdHJpbmcnLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3BvaW50ZXItdGV4dHVyZS1zcmMnPnNyYzogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17c3JjSW5wdXR9IGlkPSdwb2ludGVyLXRleHR1cmUtc3JjJyB0eXBlPSdzdHJpbmcnLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZWdpc3RlclRleHR1cmV9PlJlZ2lzdGVyPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi4vQ29udHJvbFBhbmVsJztcbmltcG9ydCB7IEVkaXRUZXh0dXJlIH0gZnJvbSAnLi9FZGl0VGV4dHVyZSc7XG5pbXBvcnQgeyBSZWdpc3RlclRleHR1cmUgfSBmcm9tICcuL1JlZ2lzdGVyVGV4dHVyZSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkQXNzZXQ6IHN0cmluZztcbiAgYWRkQXNzZXQoaWQ6IHN0cmluZywgc3JjOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUG9pbnRlcihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHsgc2RrLCBzZWxlY3RlZEFzc2V0LCBhZGRBc3NldCB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnUG9pbnRlciAtIFJlZ2lzdGVyIFRleHR1cmUnfT5cbiAgICAgICAgPFJlZ2lzdGVyVGV4dHVyZSBzZGs9e3Nka30gYWRkQXNzZXQ9e2FkZEFzc2V0fSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnUG9pbnRlciAtIEVkaXQgVGV4dHVyZSd9PlxuICAgICAgICA8RWRpdFRleHR1cmUgc2RrPXtzZGt9IHNlbGVjdGVkQXNzZXQ9e3NlbGVjdGVkQXNzZXR9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTW91c2VFdmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlbmRlcmVyR2V0U2NyZWVuUG9zaXRpb24ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgeElucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeklucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBleGVjdXRlID0gdXNlQ2FsbGJhY2soKGVsZW1lbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBjb21wdXRlVmFsdWUgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgheElucHV0RWxlbWVudC5jdXJyZW50IHx8ICF5SW5wdXRFbGVtZW50LmN1cnJlbnQgfHwgIXpJbnB1dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHggPSB4SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgICAgY29uc3QgeSA9IHlJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG4gICAgICBjb25zdCB6ID0geklucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcblxuICAgICAgaWYgKCF4IHx8ICF5IHx8ICF6KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHByb3BzLnNkay5SZW5kZXJlci5nZXRTY3JlZW5Qb3NpdGlvbih7eDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KSwgejogcGFyc2VGbG9hdCh6KX0pKTtcbiAgICAgICAgcmVzdWx0LnggPSBNYXRoLnRydW5jKHJlc3VsdC54KTtcbiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLnRydW5jKHJlc3VsdC55KTtcblxuICAgICAgICBzZXRNZXNzYWdlKGBzdWNjZXNzIHg6JHtyZXN1bHQueH0geToke3Jlc3VsdC55fWApO1xuICAgICAgfVxuICAgICAgY2F0Y2goZSkge1xuICAgICAgICBzZXRNZXNzYWdlKGBlcnJvcmApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb21wdXRlVmFsdWUoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtleGVjdXRlfT5nZXRTY3JlZW5Qb3NpdGlvbjwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBpZD0ncmVuZGVyZXItZ2V0c2NyZWVucG9zaXRpb24teCcgY2xhc3NOYW1lPVwic21hbGwtaW5wdXRcIiBwbGFjZWhvbGRlcj0neCcgcmVmPXt4SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPSdyZW5kZXJlci1nZXRzY3JlZW5wb3NpdGlvbi15JyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSd5JyByZWY9e3lJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9J3JlbmRlcmVyLWdldHNjcmVlbnBvc2l0aW9uLXonIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3onIHJlZj17eklucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICAgIDxkaXYgaWQ9J3JlbmRlcmVyLWdldHNjcmVlbnBvc2l0aW9uLW1lc3NhZ2UnPnttZXNzYWdlfTwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuICBjb25zdCB4SW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB5SW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGV4ZWN1dGUgPSB1c2VDYWxsYmFjaygoZWxlbWVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IGNvbXB1dGVWYWx1ZSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF4SW5wdXRFbGVtZW50LmN1cnJlbnQgfHwgIXlJbnB1dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHggPSB4SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgICAgY29uc3QgeSA9IHlJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICAgIGlmICgheCB8fCAheSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3BzLnNkay5SZW5kZXJlci5nZXRXb3JsZFBvc2l0aW9uRGF0YSh7eDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KX0pO1xuICAgICAgICBzZXRNZXNzYWdlKGBzdWNjZXNzICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgc2V0TWVzc2FnZShgZXJyb3JgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29tcHV0ZVZhbHVlKCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17ZXhlY3V0ZX0+Z2V0V29ybGRQb3NpdGlvbkRhdGE8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9J3JlbmRlcmVyLWdldHdvcmxkcG9zaXRpb25kYXRhLXgnIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3gnIHJlZj17eElucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBpZD0ncmVuZGVyZXItZ2V0d29ybGRwb3NpdGlvbmRhdGEteScgY2xhc3NOYW1lPVwic21hbGwtaW5wdXRcIiBwbGFjZWhvbGRlcj0neScgcmVmPXt5SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGRpdiBpZD0ncmVuZGVyZXItZ2V0c2NyZWVucG9zaXRpb24tbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlbmRlcmVyR2V0U2NyZWVuUG9zaXRpb24gfSBmcm9tICcuL1JlbmRlcmVyR2V0U2NyZWVuUG9zaXRpb24nO1xuaW1wb3J0IHsgUmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YSB9IGZyb20gJy4vUmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YSc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZW5kZXJlcihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YFJlbmRlcmVyYH08L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxSZW5kZXJlckdldFNjcmVlblBvc2l0aW9uIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgICA8UmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YSBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQ29sbGVjdGlvbiB9IGZyb20gJy4vT2JzZXJ2YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuL0NvbnRyb2xQYW5lbCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSb29tKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YFJvb20gLSBDdXJyZW50YH0+XG4gICAgICAgIDxPYnNlcnZhYmxlIG9ic2VydmFibGU9e3Byb3BzLnNkay5Sb29tLmN1cnJlbnR9IG5hbWU9J1Jvb20uY3VycmVudCcvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YFJvb20gLSBDb2xsZWN0aW9uYH0+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvbiBjb2xsZWN0aW9uPXtwcm9wcy5zZGsuUm9vbS5kYXRhfSBuYW1lPSdSb29tLmRhdGEnLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpZDogc3RyaW5nO1xuICBwYXRoOiBTY2VuZS5JbnB1dFBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTY2VuZVBhdGgocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudD8udmFsdWUpIHtcbiAgICAgIHByb3BzLnBhdGguc2V0KGlucHV0UmVmLmN1cnJlbnQ/LnZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDx0cj5cbiAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjYWxsYmFja30+e3Byb3BzLmlkfTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9J3N0cmluZycgcmVmPXtpbnB1dFJlZn0vPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2NlbmUgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IFNjZW5lUGF0aCB9IGZyb20gJy4vU2NlbmVQYXRoJztcbmltcG9ydCBzY2VuZUxvYWRlckpzb24gZnJvbSAnLi9zY2VuZS1sb2FkZXIuanNvbic7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbnR5cGUgU2NlbmVPYmplY3RJbmZvID0ge1xuICBvYmplY3Q6IFNjZW5lLklPYmplY3R8bnVsbDtcbiAgb2JqZWN0czogU2NlbmUuSU5vZGVbXXxudWxsO1xuICBwYXRoczogc3RyaW5nW107XG59XG5jb25zdCBtb2RlbEpzb24gPSBKU09OLnN0cmluZ2lmeShzY2VuZUxvYWRlckpzb24pO1xuZXhwb3J0IGZ1bmN0aW9uIFNjZW5lRGVzZXJpYWxpemUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbc2NlbmVPYmplY3RJbmZvLCBzZXRTY2VuZU9iamVjdEluZm9dID0gdXNlU3RhdGU8U2NlbmVPYmplY3RJbmZvfG51bGw+KG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBjbGVhclNjZW5lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNjZW5lT2JqZWN0SW5mbykge1xuICAgICAgaWYgKHNjZW5lT2JqZWN0SW5mby5vYmplY3QpIHtcbiAgICAgICAgc2NlbmVPYmplY3RJbmZvLm9iamVjdC5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2VuZU9iamVjdEluZm8ub2JqZWN0cykge1xuICAgICAgICBmb3IgKGNvbnN0IG9iamVjdCBvZiBzY2VuZU9iamVjdEluZm8ub2JqZWN0cykge1xuICAgICAgICAgIG9iamVjdC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFNjZW5lT2JqZWN0SW5mbyhudWxsKTtcbiAgICB9XG4gIH07XG5cblxuICBjb25zdCBwcm9jZXNzVGV4dEZyb21GaWxlTG9hZGVkID0gYXN5bmMgZnVuY3Rpb24gKHRleHRGcm9tRmlsZUxvYWRlZDogc3RyaW5nKSB7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gYXdhaXQgcHJvcHMuc2RrLlNjZW5lLmRlc2VyaWFsaXplKHRleHRGcm9tRmlsZUxvYWRlZCk7XG4gICAgaWYgKGRlc2VyaWFsaXplZCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGVzZXJpYWxpemVkKSkge1xuICAgICAgICBjb25zdCBvYmplY3RzID0gZGVzZXJpYWxpemVkIGFzIFNjZW5lLklOb2RlW107XG4gICAgICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIG9iamVjdHMpIHtcbiAgICAgICAgICBvYmplY3Quc3RhcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFNjZW5lT2JqZWN0SW5mbyh7XG4gICAgICAgICAgb2JqZWN0OiBudWxsLFxuICAgICAgICAgIG9iamVjdHMsXG4gICAgICAgICAgcGF0aHM6IFtdLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBkZXNlcmlhbGl6ZWQgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgLy8gdXNlIGpzb24gdG8gZXh0cmFjdCBwYXRoIG5hbWVzXG4gICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHRleHRGcm9tRmlsZUxvYWRlZCk7XG4gICAgICAgIGNvbnN0IHBhdGhzID0ganNvbj8ucGF5bG9hZD8ucGF0aHMgYXMgQXJyYXk8W3N0cmluZyxzdHJpbmddPjtcbiAgICAgICAgY29uc3QgbmV3UGF0aHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChwYXRocykge1xuICAgICAgICAgIGZvciAoY29uc3QgcGF0aCBvZiBwYXRocykge1xuICAgICAgICAgICAgbmV3UGF0aHMucHVzaChwYXRoWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvYmogPSBkZXNlcmlhbGl6ZWQgYXMgU2NlbmUuSU9iamVjdDtcbiAgICAgICAgb2JqLnN0YXJ0KCk7XG5cbiAgICAgICAgc2V0U2NlbmVPYmplY3RJbmZvKHtcbiAgICAgICAgICBvYmplY3Q6IG9iaixcbiAgICAgICAgICBvYmplY3RzOiBudWxsLFxuICAgICAgICAgIHBhdGhzOiBuZXdQYXRocyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uTW9kZWxKc29uQ2xpY2sgPSAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50KSBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gJyc7XG4gICAgcHJvY2Vzc1RleHRGcm9tRmlsZUxvYWRlZChtb2RlbEpzb24pO1xuICB9O1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBhbnkpID0+IHtcbiAgICBjbGVhclNjZW5lKCk7XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0LmZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gYXN5bmMoZmlsZUxvYWRlZEV2ZW50OiBQcm9ncmVzc0V2ZW50PEZpbGVSZWFkZXI+KSA9PiB7XG4gICAgICBpZiAoZmlsZUxvYWRlZEV2ZW50LnRhcmdldCkge1xuICAgICAgICBjb25zdCB0ZXh0RnJvbUZpbGVMb2FkZWQgPSBmaWxlTG9hZGVkRXZlbnQudGFyZ2V0LnJlc3VsdCBhcyBzdHJpbmc7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKHRleHRGcm9tRmlsZUxvYWRlZCk7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NUZXh0RnJvbUZpbGVMb2FkZWQodGV4dEZyb21GaWxlTG9hZGVkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZmlsZVJlYWRlci5yZWFkQXNUZXh0KGV2ZW50LnRhcmdldC5maWxlc1swXSwgJ1VURi04Jyk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBjbGVhckNhbGxiYWNrID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBhbnkpID0+IHtcbiAgICBjbGVhclNjZW5lKCk7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSAnJztcbiAgICB9XG5cbiAgfSwgW3NjZW5lT2JqZWN0SW5mb10pO1xuXG4gIGNvbnN0IHJlbmRlclBhdGhzID0gKCkgPT4ge1xuICAgIGlmIChzY2VuZU9iamVjdEluZm8gJiYgc2NlbmVPYmplY3RJbmZvLm9iamVjdCkge1xuICAgICAgdHlwZSBQYXRoRGVzYyA9IHsgZGVzYzogU2NlbmUuSW5wdXRQYXRoRGVzY3JpcHRvciwgcGF0aDogU2NlbmUuSW5wdXRQYXRoIH07XG5cbiAgICAgIGNvbnN0IGlucHV0UGF0aHM6IFBhdGhEZXNjW10gPSBbXTtcbiAgICAgIGZvciAoY29uc3Qge2Rlc2MsIHBhdGh9IG9mIHNjZW5lT2JqZWN0SW5mby5vYmplY3QucGF0aEl0ZXJhdG9yKCkpIHtcbiAgICAgICAgaWYgKGRlc2MudHlwZSA9PT0gU2NlbmUuUGF0aFR5cGUuSU5QVVQpIHtcbiAgICAgICAgICBpbnB1dFBhdGhzLnB1c2goe1xuICAgICAgICAgICAgZGVzYzogZGVzYyBhcyBTY2VuZS5JbnB1dFBhdGhEZXNjcmlwdG9yLFxuICAgICAgICAgICAgcGF0aDogcGF0aCBhcyBTY2VuZS5JbnB1dFBhdGgsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZXZlbnRzID0gaW5wdXRQYXRocy5tYXAoZnVuY3Rpb24oZGVzYzogUGF0aERlc2MpIHtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgIDxTY2VuZVBhdGggaWQ9e2Rlc2MuZGVzYy5pZH0ga2V5PXtkZXNjLmRlc2MuaWR9IHBhdGg9e2Rlc2MucGF0aH0vPlxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBldmVudHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBpZD0nc2NlbmUtZGVzZXJpYWxpemUta2V5JyBwbGFjZWhvbGRlcj0na2V5JyBhY2NlcHQ9XCIuanNvblwiIG9uQ2hhbmdlPXtjYWxsYmFja30gcmVmPXtpbnB1dFJlZn0vPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17b25Nb2RlbEpzb25DbGlja30gdmFsdWU9XCJNb2RlbCBMb2FkZXJcIi8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjbGVhckNhbGxiYWNrfT5DbGVhcjwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIHtyZW5kZXJQYXRocygpfVxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG5cbiIsImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2NlbmVEZXNlcmlhbGl6ZSB9IGZyb20gJy4vU2NlbmVEZXNlcmlhbGl6ZSc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTY2VuZShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YFNjZW5lYH08L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxTY2VuZURlc2VyaWFsaXplIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNlbnNvckFkZFNvdXJjZShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGRpdj5UQkQ8L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfS8+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IFNlbnNvckFkZFNvdXJjZSB9IGZyb20gJy4vU2Vuc29yQWRkU291cmNlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNlbnNvcihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YFNlbnNvcmB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8U2Vuc29yQWRkU291cmNlIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXR0aW5nc0dldChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IGlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZ2V0U2V0dGluZyA9IHVzZUNhbGxiYWNrKGFzeW5jIChlbGVtZW50OiBhbnkpID0+IHtcbiAgICBpZiAoIWlucHV0RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbmV3S2V5ID0gaW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gYXdhaXQgKChwcm9wcy5zZGsgYXMgYW55KS5TZXR0aW5ncy5nZXQobmV3S2V5KSkgYXMgc3RyaW5nfHVuZGVmaW5lZDtcbiAgICBzZXRNZXNzYWdlKGBrZXk6JHtuZXdLZXl9IHZhbHVlOiR7bmV3VmFsdWV9YCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17Z2V0U2V0dGluZ30+Z2V0PC9idXR0b24+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD0nc2V0dGluZ3MtZ2V0LWtleScgY2xhc3NOYW1lPVwic21hbGwtaW5wdXRcIiBwbGFjZWhvbGRlcj0na2V5JyByZWY9e2lucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezJ9PlxuICAgICAgICAgIDxkaXYgaWQ9J3NldHRpbmdzLWdldC1tZXNzYWdlJz57bWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNldHRpbmdzVXBkYXRlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IGtleUlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgdmFsdWVJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgdXBkYXRlU2V0dGluZyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWtleUlucHV0RWxlbWVudCB8fCAhdmFsdWVJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBrZXlJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZUlucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcblxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHByb3BzLnNkay5TZXR0aW5ncy51cGRhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICBzZXRNZXNzYWdlKGBzdWNjZXNzIGtleToke2tleX0gdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yIGtleToke2tleX0gdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3VwZGF0ZVNldHRpbmd9PnVwZGF0ZTwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J3NldHRpbmdzLXVwZGF0ZS1rZXknIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J2tleScgcmVmPXtrZXlJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdzZXR0aW5ncy11cGRhdGUtdmFsdWUnIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3ZhbHVlJyByZWY9e3ZhbHVlSW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGRpdiBpZD0nc2V0dGluZ3MtdXBkYXRlLW1lc3NhZ2UnPnttZXNzYWdlfTwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgU2V0dGluZ3NHZXQgfSBmcm9tICcuL1NldHRpbmdzR2V0JztcbmltcG9ydCB7IFNldHRpbmdzVXBkYXRlIH0gZnJvbSAnLi9TZXR0aW5nc1VwZGF0ZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXR0aW5ncyhwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BTZXR0aW5nc2B9PC9kaXY+XG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICA8U2V0dGluZ3NHZXQgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgICAgICA8U2V0dGluZ3NVcGRhdGUgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTd2VlcERpc2FibGUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3Qgc3dlZXBJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgdXBkYXRlU3dlZXAgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFzd2VlcElucHV0RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN3ZWVwSWQgPSBzd2VlcElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcblxuICAgIGlmIChzd2VlcElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLmRpc2FibGUoc3dlZXBJZCk7XG4gICAgICBzZXRNZXNzYWdlKGBzd2VlcElkOiR7c3dlZXBJZH0gZGlzYWJsZWRgKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgc2V0TWVzc2FnZShgZXJyb3IgZGlzYWJsaW5nIHN3ZWVwSWQ6JHtzd2VlcElkfWApO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt1cGRhdGVTd2VlcH0+ZGlzYWJsZTwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J3N3ZWVwLWRpc2FibGUtc3dlZXBJZCcgcGxhY2Vob2xkZXI9J3N3ZWVwIGlkJyByZWY9e3N3ZWVwSW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGRpdiBpZD0nc3dlZXAtZGlzYWJsZS1tZXNzYWdlJz57bWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN3ZWVwRW5hYmxlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IHN3ZWVwSW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHVwZGF0ZVN3ZWVwID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc3dlZXBJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzd2VlcElkID0gc3dlZXBJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICBpZiAoc3dlZXBJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHByb3BzLnNkay5Td2VlcC5lbmFibGUoc3dlZXBJZCk7XG4gICAgICBzZXRNZXNzYWdlKGBzd2VlcElkOiR7c3dlZXBJZH0gZW5hYmxlZGApO1xuICAgIH1cbiAgICBjYXRjaChlKSB7XG4gICAgICBzZXRNZXNzYWdlKGBlcnJvciBlbmFibGluZyBzd2VlcElkOiR7c3dlZXBJZH1gKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17dXBkYXRlU3dlZXB9PmVuYWJsZTwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J3N3ZWVwLWVuYWJsZS1zd2VlcElkJyBwbGFjZWhvbGRlcj0nc3dlZXAgaWQnIHJlZj17c3dlZXBJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgICA8ZGl2IGlkPSdzd2VlcC1lbmFibGUtbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IElTdWJzY3JpcHRpb24sIE1wU2RrLCBTd2VlcCB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdHlwZSBDaGFuZ2VFdmVudCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgY29uc3QgU3dlZXBNb2RpZnlOZWlnaGJvcnMgPSAocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xuICBjb25zdCBbbGFiZWxNYXAsIHNldExhYmVsTWFwXSA9IHVzZVN0YXRlPHtba2V5OiBzdHJpbmddOiBzdHJpbmd9Pih7fSk7XG4gIGNvbnN0IFthbGxTd2VlcHMsIHNldEFsbFN3ZWVwc10gPSB1c2VTdGF0ZTx7W2tleTogc3RyaW5nXTogU3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YX0+KHt9KTtcbiAgY29uc3QgW2FsbFN3ZWVwSWRzLCBzZXRBbGxTd2VlcElkc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuXG4gIGNvbnN0IFthY3RpdmVTd2VlcE5laWdoYm9ycywgc2V0QWN0aXZlU3dlZXBOZWlnaGJvcnNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgY29uc3QgW2N1cnJlbnRTd2VlcElkLCBzZXRDdXJyZW50U3dlZXBJZF0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgW2FjdGl2ZVN3ZWVwSWQsIHNldEFjdGl2ZVN3ZWVwSWRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgaW5pdGlhbGl6ZWQgPSB1c2VSZWY8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBhY3RpdmVTd2VlcElkUmVmID0gdXNlUmVmPHN0cmluZz4oJycpO1xuXG5cbiAgZnVuY3Rpb24gYWN0aXZhdGVTd2VlcChpZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3dlZXA6IE1wU2RrLlN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGEgPSBhbGxTd2VlcHNbaWRdO1xuICAgIGlmICghc3dlZXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWQgZG9lc25cXCd0IGNvcnJlc3BvbmQgdG8gc3dlZXA6ICcgKyBpZCk7XG4gICAgfVxuICAgIHNldEFjdGl2ZVN3ZWVwTmVpZ2hib3JzKHN3ZWVwLm5laWdoYm9ycyk7XG4gICAgc2V0QWN0aXZlU3dlZXBJZChpZCk7XG4gICAgYWN0aXZlU3dlZXBJZFJlZi5jdXJyZW50ID0gaWQ7XG4gIH1cbiAgZnVuY3Rpb24gb25TZWxlY3RTd2VlcChldmVudDogQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgaWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xuICAgIGFjdGl2YXRlU3dlZXAoaWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQWxsU3dlZXBzRGljdChjb2xsZWN0aW9uOiBNcFNkay5EaWN0aW9uYXJ5PE1wU2RrLlN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGE+LCBtYXA6IE1wU2RrLkRpY3Rpb25hcnk8c3RyaW5nPik6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBhbGxTd2VlcERpY3Q6IHtba2V5OiBzdHJpbmddOiBTd2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhfSA9IHt9O1xuICAgIGNvbnN0IG5ld0FsbFN3ZWVwSWRzID0gT2JqZWN0LnZhbHVlcyhjb2xsZWN0aW9uKS5tYXAoKHN3ZWVwKSA9PiB7XG4gICAgICBjb25zdCB1c2VJZCA9IG1hcFtzd2VlcC5pZF0gPz8gc3dlZXAuaWQ7XG4gICAgICBhbGxTd2VlcERpY3RbdXNlSWRdID0gc3dlZXA7XG4gICAgICByZXR1cm4gdXNlSWQ7XG4gICAgfSk7XG4gICAgc2V0QWxsU3dlZXBzKGFsbFN3ZWVwRGljdCk7XG4gICAgY29uc3QgYWN0aXZlSWQgPSBtYXBbYWN0aXZlU3dlZXBJZFJlZi5jdXJyZW50XSA/PyBhY3RpdmVTd2VlcElkUmVmLmN1cnJlbnQ7XG4gICAgaWYgKGFsbFN3ZWVwRGljdCAmJiBhbGxTd2VlcERpY3RbYWN0aXZlSWRdKXtcbiAgICAgIHNldEFjdGl2ZVN3ZWVwTmVpZ2hib3JzKGFsbFN3ZWVwRGljdFthY3RpdmVJZF0ubmVpZ2hib3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FsbFN3ZWVwSWRzO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbWFwSWRzVG9MYWJlbHMgKGNvbGxlY3Rpb246IE1wU2RrLkRpY3Rpb25hcnk8TXBTZGsuU3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YT4sIG1hcDogTXBTZGsuRGljdGlvbmFyeTxzdHJpbmc+KSB7XG4gICAgLy8gY3JlYXRlL3VwZGF0ZSBtYXAgb2YgaWRzIHRvIGxhYmVsc1xuICAgIGNvbnN0IG5ld0xhYmVsTWFwOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuICAgIGF3YWl0IFByb21pc2UuYWxsKE9iamVjdC52YWx1ZXMoY29sbGVjdGlvbikubWFwKGFzeW5jIChzd2VlcCkgPT4ge1xuICAgICAgY29uc3QgbGFiZWwgPSBhd2FpdCBwcm9wcy5zZGsuU3dlZXAuQ29udmVyc2lvbi5nZXRMYWJlbEZyb21JZChzd2VlcC5pZCk7XG4gICAgICBuZXdMYWJlbE1hcFtzd2VlcC5pZF0gPSBsYWJlbDtcbiAgICAgIG5ld0xhYmVsTWFwW21hcFtzd2VlcC5pZF1dID0gbGFiZWw7XG4gICAgfSkpLnRoZW4oKCkgPT4ge1xuICAgICAgc2V0TGFiZWxNYXAobmV3TGFiZWxNYXApO1xuICAgICAgaWYgKGN1cnJlbnRTd2VlcElkKSB7XG4gICAgICAgIGFjdGl2YXRlU3dlZXAoY3VycmVudFN3ZWVwSWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBzaG91bGQgb25seSBydW4gb25jZVxuICAgIGNvbnN0IHN1YnM6IElTdWJzY3JpcHRpb25bXSA9IFtdO1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJ1blVzZUVmZmVjdCgpIHtcbiAgICAgIC8vIHdhaXQgZm9yIGRhdGEgdG8gYmUgcmVhZHlcbiAgICAgIGF3YWl0IHByb3BzLnNkay5BcHAuc3RhdGUud2FpdFVudGlsKChzdGF0ZSkgPT4gc3RhdGUucGhhc2UgPT09IHByb3BzLnNkay5BcHAuUGhhc2UuUExBWUlORyk7XG5cbiAgICAgIC8vIGZpcnN0LCBidWlsZCBhIG1hcCB0byBiZSBpbmRlcGVuZGVudCBvZiB1c2VMZWdhY3lJZHMuLi5cbiAgICAgIGNvbnN0IG1hcDogTXBTZGsuRGljdGlvbmFyeTxzdHJpbmc+ID0gYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAodHJ1ZSk7XG5cbiAgICAgIC8vIHN1YnNjcmliZSB0byBjdXJyZW50IHN3ZWVwIC0gbmVlZHMgbWFwXG4gICAgICBzdWJzLnB1c2gocHJvcHMuc2RrLlN3ZWVwLmN1cnJlbnQuc3Vic2NyaWJlKChzd2VlcERhdGE6IFN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGEpID0+IHtcbiAgICAgICAgaWYgKCFzd2VlcERhdGEuaWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHNldEN1cnJlbnRTd2VlcElkKG1hcFtzd2VlcERhdGEuaWRdID8/IHN3ZWVwRGF0YS5pZCk7XG4gICAgICB9KSk7XG4gICAgICBzdWJzLnB1c2gocHJvcHMuc2RrLlN3ZWVwLmRhdGEuc3Vic2NyaWJlKHtcbiAgICAgICAgYXN5bmMgb25Db2xsZWN0aW9uVXBkYXRlZChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgLy8gc2hvdWxkIHJ1biBlYWNoIHRpbWUgc3dlZXBzIGNoYW5nZVxuICAgICAgICAgIGNvbnN0IGlkRGljdCA9IHVwZGF0ZUFsbFN3ZWVwc0RpY3QoY29sbGVjdGlvbiwgbWFwKTtcbiAgICAgICAgICBpZiAoIWluaXRpYWxpemVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgbmVlZCB0byBkbyBmaXJzdCB0aW1lXG4gICAgICAgICAgICBzZXRBbGxTd2VlcElkcyhpZERpY3QpO1xuICAgICAgICAgICAgaW5pdGlhbGl6ZWQuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICBtYXBJZHNUb0xhYmVscyhjb2xsZWN0aW9uLCBtYXApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhbGwgc3dlZXBzIHNob3VsZCBoYXZlIGJlZW4gdXBkYXRlZCBieSB0aGlzIHBvaW50IC0gcnVuIGV2ZXJ5IHRpbWVcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3dlZXBJZCkgYWN0aXZhdGVTd2VlcChjdXJyZW50U3dlZXBJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSkpO1xuICAgIH1cbiAgICBydW5Vc2VFZmZlY3QoKS5jYXRjaCgoZSkgPT4ge2NvbnNvbGUuZXJyb3IoZSk7fSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIHByb2JhYmx5IG5vdCBjYWxsZWQsIGJ1dCBsZXQncyBiZSBwcm9hY3RpdmVcbiAgICAgIHN1YnMuZm9yRWFjaCggKHN1YikgPT4ge3N1Yi5jYW5jZWwoKTt9ICk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gYWRkU3dlZXAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGFkZElkID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICBpZiAoIWFkZElkKSB7IGNvbnNvbGUud2FybignY2Fubm90IHNlbGVjdCBzcGFjZXIgYXMgSUQhJyk7IHJldHVybjt9XG4gICAgY29uc3QgbWFwOiBNcFNkay5EaWN0aW9uYXJ5PHN0cmluZz4gPSBhd2FpdCBwcm9wcy5zZGsuU3dlZXAuQ29udmVyc2lvbi5jcmVhdGVJZE1hcCh0cnVlKTtcbiAgICBhd2FpdCBwcm9wcy5zZGsuU3dlZXAuYWRkTmVpZ2hib3JzKGFjdGl2ZVN3ZWVwSWQsIFttYXBbYWRkSWRdID8/IGFkZElkXSk7XG4gICAgY29uc29sZS5sb2coJ2FkZGVkIHN3ZWVwJywgYWRkSWQpO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlU3dlZXAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlbW92ZUlkID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICBpZiAoIXJlbW92ZUlkKSB7IGNvbnNvbGUud2FybignY2Fubm90IHNlbGVjdCBzcGFjZXIgYXMgSUQhJyk7IHJldHVybjt9XG4gICAgY29uc3QgbWFwOiBNcFNkay5EaWN0aW9uYXJ5PHN0cmluZz4gPSBhd2FpdCBwcm9wcy5zZGsuU3dlZXAuQ29udmVyc2lvbi5jcmVhdGVJZE1hcCh0cnVlKTtcbiAgICBhd2FpdCBwcm9wcy5zZGsuU3dlZXAucmVtb3ZlTmVpZ2hib3JzKGFjdGl2ZVN3ZWVwSWQsIFttYXBbcmVtb3ZlSWRdID8/IHJlbW92ZUlkXSk7XG4gICAgY29uc29sZS5sb2coJ3JlbW92ZWQgc3dlZXAnLCByZW1vdmVJZCk7XG4gIH1cblxuICBjb25zdCBkZWZhdWx0T3B0aW9uID0gPG9wdGlvbiBrZXk9ey0xfSB2YWx1ZT17Jyd9Pi08L29wdGlvbj47XG4gIGNvbnN0IGFsbFN3ZWVwT3B0aW9ucyA9IGFsbFN3ZWVwSWRzLm1hcCgoa2V5LCBpKSA9PiA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2tleX0+e2xhYmVsTWFwW2tleV19PC9vcHRpb24+KTtcbiAgYWxsU3dlZXBPcHRpb25zLnVuc2hpZnQoZGVmYXVsdE9wdGlvbik7XG4gIHJldHVybiAoPD5cbiAgICA8cD5TZWxlY3QgU3dlZXA6Jm5ic3A7XG4gICAgICA8c2VsZWN0IG9uQ2hhbmdlPXtvblNlbGVjdFN3ZWVwfSB2YWx1ZT17YWN0aXZlU3dlZXBJZH0+XG4gICAgICAgIHthbGxTd2VlcE9wdGlvbnN9XG4gICAgICA8L3NlbGVjdD5cbiAgICAgIDxidXR0b24gc3R5bGU9e3sgZmxvYXQ6ICdyaWdodCcgfX1cbiAgICAgICAgZGlzYWJsZWQ9eyFjdXJyZW50U3dlZXBJZCB8fCBjdXJyZW50U3dlZXBJZD09PWFjdGl2ZVN3ZWVwSWR9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHsgYWN0aXZhdGVTd2VlcChjdXJyZW50U3dlZXBJZCk7fX1cbiAgICAgID4gVXNlIEN1cnJlbnQgKHtsYWJlbE1hcFtjdXJyZW50U3dlZXBJZF19KSA8L2J1dHRvbj5cbiAgICA8L3A+XG4gICAgPGRpdiBzdHlsZT17e3dpZHRoOiAnMjUwcHgnfX0+XG4gICAgICBOZWlnaGJvcnM6IHsgYWN0aXZlU3dlZXBOZWlnaGJvcnMubWFwKChrZXksIGkpID0+IGxhYmVsTWFwW2tleV0pLmpvaW4oJywgJykgfVxuICAgIDwvZGl2PlxuICAgIDxoci8+XG4gICAgPGRpdj5cbiAgICAgIFJlbW92ZSBzd2VlcCBuZWlnaGJvcjpcbiAgICAgIDxzZWxlY3Qgb25DaGFuZ2U9e3JlbW92ZVN3ZWVwfSB2YWx1ZT17LTF9IHN0eWxlPXt7ZmxvYXQ6J3JpZ2h0Jywgd2lkdGg6ICc0MHB4J319PlxuICAgICAgICB7IGRlZmF1bHRPcHRpb24gfVxuICAgICAgICB7IGFjdGl2ZVN3ZWVwTmVpZ2hib3JzLm1hcCgoa2V5LCBpKSA9PiA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2tleX0+e2xhYmVsTWFwW2tleV19PC9vcHRpb24+KSB9XG4gICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PlxuICAgICAgQWRkIHN3ZWVwIG5laWdoYm9yOlxuICAgICAgPHNlbGVjdCBvbkNoYW5nZT17YWRkU3dlZXB9IHZhbHVlPXstMX0gc3R5bGU9e3tmbG9hdDoncmlnaHQnLCB3aWR0aDogJzQwcHgnfX0+XG4gICAgICAgIHthbGxTd2VlcE9wdGlvbnN9XG4gICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbiAgPC8+KTtcbn07XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IFN3ZWVwRGlzYWJsZSB9IGZyb20gJy4vU3dlZXBEaXNhYmxlJztcbmltcG9ydCB7IFN3ZWVwRW5hYmxlIH0gZnJvbSAnLi9Td2VlcEVuYWJsZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQ29sbGVjdGlvbiB9IGZyb20gJy4vT2JzZXJ2YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQnO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuaW1wb3J0IHsgU3dlZXBNb2RpZnlOZWlnaGJvcnMgfSBmcm9tICcuL1N3ZWVwTW9kaWZ5TmVpZ2hib3JzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN3ZWVwKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1N3ZWVwIC0gQ3VycmVudCd9PlxuICAgICAgICA8T2JzZXJ2YWJsZSBvYnNlcnZhYmxlPXtwcm9wcy5zZGsuU3dlZXAuY3VycmVudH0gbmFtZT0nU3dlZXAuY3VycmVudCcgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydTd2VlcCAtIENvbGxlY3Rpb24nfT5cbiAgICAgICAgPE9ic2VydmFibGVDb2xsZWN0aW9uIGNvbGxlY3Rpb249e3Byb3BzLnNkay5Td2VlcC5kYXRhfSBuYW1lPSdTd2VlcC5kYXRhJyAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PntgU3dlZXBgfTwvZGl2PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPFN3ZWVwRGlzYWJsZSBzZGs9e3Byb3BzLnNka30gLz5cbiAgICAgICAgICAgIDxTd2VlcEVuYWJsZSBzZGs9e3Byb3BzLnNka30gLz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PntgU3dlZXBgfTwvZGl2PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPEV2ZW50IHNkaz17cHJvcHMuc2RrfSBlbnVtPXtwcm9wcy5zZGsuU3dlZXAuRXZlbnR9Lz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YFN3ZWVwIE5laWdoYm9yIENvbm5lY3Rpb25zYH0+XG4gICAgICAgIDxTd2VlcE1vZGlmeU5laWdoYm9ycyBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29sbGVjdGlvblNlbGVjdCB9IGZyb20gJy4vQ29sbGVjdGlvblNlbGVjdG9yJztcbmltcG9ydCB7IEdyYXBoIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IElTdWJzY3JpcHRpb24sIE1wU2RrLCBTd2VlcCB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3dlZXBHcmFwaChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtwYXRoRGlydHksIHNldFBhdGhEaXJ0eV0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcblxuICBjb25zdCBncmFwaCA9IHVzZVJlZjxNcFNkay5HcmFwaC5JRGlyZWN0ZWRHcmFwaDxTd2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhPj4oKTtcbiAgY29uc3QgcGF0aEVuZFBvaW50czogW3N0cmluZywgc3RyaW5nXSA9IFsnJywgJyddO1xuXG4gIGNvbnN0IGFTdGFyU3ViID0gdXNlUmVmPElTdWJzY3JpcHRpb24+KCk7XG4gIGNvbnN0IHJ1bm5lciA9IHVzZVJlZjxNcFNkay5HcmFwaC5JQVN0YXJSdW5uZXI8U3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YT4+KCk7XG4gIGNvbnN0IG9uU3RhcnRDaGFuZ2VkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGlkOiBzdHJpbmcpIHtcbiAgICBwYXRoRW5kUG9pbnRzWzBdID0gaWQ7XG4gICAgdXBkYXRlUGF0aCgpO1xuICB9LCBbXSk7XG4gIGNvbnN0IG9uRW5kQ2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpZDogc3RyaW5nKSB7XG4gICAgcGF0aEVuZFBvaW50c1sxXSA9IGlkO1xuICAgIHVwZGF0ZVBhdGgoKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvcHMuc2RrLlN3ZWVwLmNyZWF0ZUdyYXBoKCkudGhlbigoc3dlZXBHcmFwaCkgPT4gZ3JhcGguY3VycmVudCA9IHN3ZWVwR3JhcGgpO1xuICB9KTtcblxuICBmdW5jdGlvbiB1cGRhdGVQYXRoKCkge1xuICAgIGlmIChncmFwaC5jdXJyZW50KSB7XG4gICAgICBjb25zdCBzdGFydCA9IGdyYXBoLmN1cnJlbnQudmVydGV4KHBhdGhFbmRQb2ludHNbMF0pO1xuICAgICAgY29uc3QgZW5kID0gZ3JhcGguY3VycmVudC52ZXJ0ZXgocGF0aEVuZFBvaW50c1sxXSk7XG4gICAgICBpZiAoc3RhcnQgJiYgZW5kKSB7XG4gICAgICAgIGlmIChhU3RhclN1Yi5jdXJyZW50KSB7XG4gICAgICAgICAgYVN0YXJTdWIuY3VycmVudC5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICBydW5uZXIuY3VycmVudCA9IHByb3BzLnNkay5HcmFwaC5jcmVhdGVBU3RhclJ1bm5lcihncmFwaC5jdXJyZW50LCBzdGFydCwgZW5kKTtcbiAgICAgICAgYVN0YXJTdWIuY3VycmVudCA9IHJ1bm5lci5jdXJyZW50LnN1YnNjcmliZSh7XG4gICAgICAgICAgb25DaGFuZ2VkKCkge1xuICAgICAgICAgICAgc2V0UGF0aERpcnR5KHRydWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzZXRQYXRoRGlydHkodHJ1ZSk7XG4gIH1cblxuICBjb25zdCByZXN1bHRSZWYgPSB1c2VSZWY8SFRNTFRleHRBcmVhRWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHJlY2FsY1BhdGggPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJ1bm5lci5jdXJyZW50KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBydW5uZXIuY3VycmVudC5leGVjKCk7XG4gICAgICBpZiAocmVzdWx0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgIT09IEdyYXBoLkFTdGFyU3RhdHVzLlNVQ0NFU1MpIHtcbiAgICAgICAgICByZXN1bHRSZWYuY3VycmVudC52YWx1ZSA9ICdObyBwYXRoIGZvdW5kJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRSZWYuY3VycmVudC52YWx1ZSA9IHJlc3VsdC5wYXRoLm1hcCgodiwgaSkgPT4gaSArICc6ICcgKyB2LmlkKS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0UGF0aERpcnR5KGZhbHNlKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+R3JhcGggLSBTd2VlcDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIFN0YXJ0OiA8Q29sbGVjdGlvblNlbGVjdFxuICAgICAgICAgICAgY29sbGVjdGlvbj17cHJvcHMuc2RrLlN3ZWVwLmRhdGF9XG4gICAgICAgICAgICBmaWx0ZXI9e2VuYWJsZWRTd2VlcEZpbHRlcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlZD17b25TdGFydENoYW5nZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgRW5kOiA8Q29sbGVjdGlvblNlbGVjdFxuICAgICAgICAgICAgY29sbGVjdGlvbj17cHJvcHMuc2RrLlN3ZWVwLmRhdGF9XG4gICAgICAgICAgICBmaWx0ZXI9e2VuYWJsZWRTd2VlcEZpbHRlcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlZD17b25FbmRDaGFuZ2VkfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIFBhdGggRGlydHk6IHtwYXRoRGlydHkudG9TdHJpbmcoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZWNhbGNQYXRofT5DQUxDVUxBVEUgUEFUSDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8dGV4dGFyZWEgc3R5bGU9e3t3aWR0aDogJzMwMHB4JywgaGVpZ2h0OiAnNzJweCcsIHdoaXRlU3BhY2U6ICdwcmUnfX0gcmVmPXtyZXN1bHRSZWZ9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuXG5mdW5jdGlvbiBlbmFibGVkU3dlZXBGaWx0ZXIoc3dlZXA6IE1wU2RrLlN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGEpOiBib29sZWFuIHtcbiAgcmV0dXJuIHN3ZWVwLmVuYWJsZWQ7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRBc3NldDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgbGFiZWxJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZGVzY0lucHV0ID0gdXNlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHhJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB6SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgeE5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeU5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgek5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBpZElucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBvcGFjaXR5SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHN1Ym1pdEljb24gPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgYWRkVGFnID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGxhYmVsSW5wdXQuY3VycmVudCAmJlxuICAgICAgZGVzY0lucHV0LmN1cnJlbnQgJiZcbiAgICAgIHhJbnB1dC5jdXJyZW50ICYmXG4gICAgICB5SW5wdXQuY3VycmVudCAmJlxuICAgICAgeklucHV0LmN1cnJlbnQgJiZcbiAgICAgIHhOb3JtSW5wdXQuY3VycmVudCAmJlxuICAgICAgeU5vcm1JbnB1dC5jdXJyZW50ICYmXG4gICAgICB6Tm9ybUlucHV0LmN1cnJlbnQgJiZcbiAgICAgIGlkSW5wdXQuY3VycmVudCAmJlxuICAgICAgb3BhY2l0eUlucHV0LmN1cnJlbnRcbiAgICApIHtcbiAgICAgIHByb3BzLnNkay5UYWcuYWRkKHtcbiAgICAgICAgaWQ6IGlkSW5wdXQuY3VycmVudC52YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiBpZElucHV0LmN1cnJlbnQudmFsdWUsXG4gICAgICAgIGxhYmVsOiBsYWJlbElucHV0LmN1cnJlbnQudmFsdWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjSW5wdXQuY3VycmVudC52YWx1ZSxcbiAgICAgICAgYW5jaG9yUG9zaXRpb246IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHhJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHlJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB6OiBwYXJzZUZsb2F0KHpJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RlbVZlY3Rvcjoge1xuICAgICAgICAgIHg6IHBhcnNlRmxvYXQoeE5vcm1JbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHlOb3JtSW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgICAgejogcGFyc2VGbG9hdCh6Tm9ybUlucHV0LmN1cnJlbnQudmFsdWUpLFxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiBwYXJzZUZsb2F0KG9wYWNpdHlJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgaWNvbklkOiAoc3VibWl0SWNvbi5jdXJyZW50Py5jaGVja2VkICYmIHByb3BzLnNlbGVjdGVkQXNzZXQpID8gcHJvcHMuc2VsZWN0ZWRBc3NldCA6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkQXNzZXRdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC10aXRsZSc+VGl0bGU6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17bGFiZWxJbnB1dH0gdHlwZT0ndGV4dCcgaWQ9J3RhZzItYWRkLXRpdGxlJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hZGQtZGVzYyc+RGVzYzo8L2xhYmVsPlxuICAgICAgICA8dGV4dGFyZWEgcmVmPXtkZXNjSW5wdXR9IGlkPSd0YWcyLWFkZC1kZXNjJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2PnBvc2l0aW9uOjwvZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hZGQtcG9zLXgnPng6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3hJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItYWRkLXBvcy14JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDAxJyBkZWZhdWx0VmFsdWU9JzAnIC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC1wb3MteSc+eTogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1hZGQtcG9zLXknIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWRkLXBvcy16Jz56OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt6SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWFkZC1wb3MteicgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2Pm5vcm1hbDo8L2Rpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWRkLW5vcm0teCc+eDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eE5vcm1JbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItYWRkLW5vcm0teCcgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hZGQtbm9ybS15Jz55OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt5Tm9ybUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1hZGQtbm9ybS15JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDAxJyBkZWZhdWx0VmFsdWU9JzEnIC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC1ub3JtLXonPno6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3pOb3JtSW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWFkZC1ub3JtLXonIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWRkLWlkJz5pZDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17aWRJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItYWRkLWlkJyB0eXBlPSdzdHJpbmcnIC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC1vcGFjaXR5Jz5vcGFjaXR5OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtvcGFjaXR5SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWFkZC1vcGFjaXR5JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDEnIGRlZmF1bHRWYWx1ZT0nMScgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgaWNvbjogPGlucHV0IHJlZj17c3VibWl0SWNvbn0gdHlwZT0nY2hlY2tib3gnIGRlZmF1bHRDaGVja2VkPXtmYWxzZX0gLz5cbiAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIHJlYWRPbmx5PXt0cnVlfSB2YWx1ZT17cHJvcHMuc2VsZWN0ZWRBc3NldH0gLz5cbiAgICAgICAgPGJ1dHRvbiBpZD0ndGFnMi1hZGQnIG9uQ2xpY2s9e2FkZFRhZ30+QWRkPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWxsb3dBY3Rpb24ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBhbGxvd0RvY2tpbmcgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGFsbG93T3BlbmluZyA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgYWxsb3dOYXZpZ2F0aW9uID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBhbGxvd1NoYXJpbmcgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgW2FsbG93ZWRBY3Rpb25zLCBzZXRBbGxvd2VkQWN0aW9uc10gPSB1c2VTdGF0ZShuZXcgTWFwPHN0cmluZywgeyBkb2NraW5nOiBib29sZWFuOyBvcGVuaW5nOiBib29sZWFuOyBuYXZpZ2F0aW5nOiBib29sZWFuOyBzaGFyaW5nOiBib29sZWFuOyB9PigpKTtcblxuICBjb25zdCBhbGxvd0FjdGlvbnMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGFsbG93RG9ja2luZy5jdXJyZW50ICYmIGFsbG93T3BlbmluZy5jdXJyZW50ICYmIGFsbG93TmF2aWdhdGlvbi5jdXJyZW50ICYmIGFsbG93U2hhcmluZy5jdXJyZW50KSB7XG4gICAgICBwcm9wcy5zZGsuVGFnLmFsbG93QWN0aW9uKHByb3BzLnNlbGVjdGVkVGFnLCB7XG4gICAgICAgIGRvY2tpbmc6IGFsbG93RG9ja2luZy5jdXJyZW50LmNoZWNrZWQsXG4gICAgICAgIG9wZW5pbmc6IGFsbG93T3BlbmluZy5jdXJyZW50LmNoZWNrZWQsXG4gICAgICAgIG5hdmlnYXRpbmc6IGFsbG93TmF2aWdhdGlvbi5jdXJyZW50LmNoZWNrZWQsXG4gICAgICAgIHNoYXJpbmc6IGFsbG93U2hhcmluZy5jdXJyZW50LmNoZWNrZWQsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm9wcy5zZGsuVGFnLCBwcm9wcy5zZWxlY3RlZFRhZ10pO1xuXG4gIGNvbnN0IGNoYW5nZUFsbG93ZWRBY3Rpb25zOiBSZWFjdC5DaGFuZ2VFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD4gPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRBY3Rpb25zID0gYWxsb3dlZEFjdGlvbnMuZ2V0KHByb3BzLnNlbGVjdGVkVGFnKSB8fCB7IGRvY2tpbmc6IHRydWUsIG9wZW5pbmc6IHRydWUsIG5hdmlnYXRpbmc6IHRydWUsIHNoYXJpbmc6IHRydWUgfTtcbiAgICBpZiAoZS50YXJnZXQgPT09IGFsbG93RG9ja2luZy5jdXJyZW50KSB7XG4gICAgICBjdXJyZW50QWN0aW9ucy5kb2NraW5nID0gIWN1cnJlbnRBY3Rpb25zLmRvY2tpbmc7XG4gICAgfVxuICAgIGlmIChlLnRhcmdldCA9PT0gYWxsb3dOYXZpZ2F0aW9uLmN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnRBY3Rpb25zLm5hdmlnYXRpbmcgPSAhY3VycmVudEFjdGlvbnMubmF2aWdhdGluZztcbiAgICB9XG4gICAgaWYgKGUudGFyZ2V0ID09PSBhbGxvd09wZW5pbmcuY3VycmVudCkge1xuICAgICAgY3VycmVudEFjdGlvbnMub3BlbmluZyA9ICFjdXJyZW50QWN0aW9ucy5vcGVuaW5nO1xuICAgIH1cbiAgICBpZiAoZS50YXJnZXQgPT09IGFsbG93U2hhcmluZy5jdXJyZW50KSB7XG4gICAgICBjdXJyZW50QWN0aW9ucy5zaGFyaW5nID0gIWN1cnJlbnRBY3Rpb25zLnNoYXJpbmc7XG4gICAgfVxuXG4gICAgYWxsb3dlZEFjdGlvbnMuc2V0KHByb3BzLnNlbGVjdGVkVGFnLCBjdXJyZW50QWN0aW9ucyk7XG4gICAgc2V0QWxsb3dlZEFjdGlvbnMobmV3IE1hcChhbGxvd2VkQWN0aW9ucykpO1xuICAgIGFsbG93QWN0aW9ucygpO1xuICB9LCBbYWxsb3dBY3Rpb25zLCBhbGxvd2VkQWN0aW9ucywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICBjb25zdCBzZWxlY3RlZFRhZ0FjdGlvbnMgPSBhbGxvd2VkQWN0aW9ucy5nZXQocHJvcHMuc2VsZWN0ZWRUYWcpIHx8IHsgZG9ja2luZzogdHJ1ZSwgb3BlbmluZzogdHJ1ZSwgbmF2aWdhdGluZzogdHJ1ZSwgc2hhcmluZzogdHJ1ZSB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdj5cbiAgICAgICAgKGNoZWNrZWQgPT0gYWxsb3dlZClcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWxsb3ctb3Blbic+QmlsbGJvYXJkOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93T3BlbmluZ30gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LW9wZW4nIG9uQ2hhbmdlPXtjaGFuZ2VBbGxvd2VkQWN0aW9uc30gY2hlY2tlZD17c2VsZWN0ZWRUYWdBY3Rpb25zLm9wZW5pbmd9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWxsb3ctbmF2Jz5OYXZpZ2F0aW9uOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93TmF2aWdhdGlvbn0gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LW5hdicgb25DaGFuZ2U9e2NoYW5nZUFsbG93ZWRBY3Rpb25zfSBjaGVja2VkPXtzZWxlY3RlZFRhZ0FjdGlvbnMubmF2aWdhdGluZ30vPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hbGxvdy1kb2NrJz5Eb2NrOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93RG9ja2luZ30gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LWRvY2snIG9uQ2hhbmdlPXtjaGFuZ2VBbGxvd2VkQWN0aW9uc30gY2hlY2tlZD17c2VsZWN0ZWRUYWdBY3Rpb25zLmRvY2tpbmd9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWxsb3ctc2hhcmUnPlNoYXJlOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93U2hhcmluZ30gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LXNoYXJlJyBvbkNoYW5nZT17Y2hhbmdlQWxsb3dlZEFjdGlvbnN9IGNoZWNrZWQ9e3NlbGVjdGVkVGFnQWN0aW9ucy5zaGFyaW5nfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xuICBzZWxlY3RlZEF0dGFjaG1lbnQ6IHN0cmluZztcbn1cblxuY29uc3QgbGFiZWxTdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHdpZHRoOiAnODBweCcsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gQXR0YWNoKHsgc2RrLCBzZWxlY3RlZFRhZywgc2VsZWN0ZWRBdHRhY2htZW50fTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGF0dGFjaCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZGsuVGFnLmF0dGFjaChzZWxlY3RlZFRhZywgc2VsZWN0ZWRBdHRhY2htZW50KTtcbiAgfSwgW3Nkay5UYWcsIHNlbGVjdGVkQXR0YWNobWVudCwgc2VsZWN0ZWRUYWddKTtcblxuICBjb25zdCBkZXRhY2ggPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2RrLlRhZy5kZXRhY2goc2VsZWN0ZWRUYWcsIHNlbGVjdGVkQXR0YWNobWVudCk7XG4gIH0sIFtzZGsuVGFnLCBzZWxlY3RlZEF0dGFjaG1lbnQsIHNlbGVjdGVkVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgc3R5bGU9e2xhYmVsU3R5bGV9PlRhZzo8L2xhYmVsPjxpbnB1dCB0eXBlPSd0ZXh0JyByZWFkT25seSBwbGFjZWhvbGRlcj17Jyhub25lKSd9IHZhbHVlPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIHN0eWxlPXtsYWJlbFN0eWxlfT5BdHRhY2htZW50OjwvbGFiZWw+PGlucHV0IHR5cGU9J3RleHQnIHJlYWRPbmx5IHBsYWNlaG9sZGVyPXsnKG5vbmUpJ30gdmFsdWU9e3NlbGVjdGVkQXR0YWNobWVudH0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXthdHRhY2h9PkF0dGFjaDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2RldGFjaH0+RGV0YWNoPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFZGl0QmlsbGJvYXJkKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgdGl0bGVJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZGVzY0lucHV0ID0gdXNlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGVkaXRUYWcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHRpdGxlSW5wdXQuY3VycmVudCAmJiBkZXNjSW5wdXQuY3VycmVudCkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0QmlsbGJvYXJkKHByb3BzLnNlbGVjdGVkVGFnLCB7XG4gICAgICAgIGxhYmVsOiB0aXRsZUlucHV0LmN1cnJlbnQudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBkZXNjcmlwdGlvbjogZGVzY0lucHV0LmN1cnJlbnQudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWVkaXQtdGl0bGUnPlRpdGxlOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3RpdGxlSW5wdXR9IHR5cGU9J3RleHQnIGlkPSd0YWcyLWVkaXQtdGl0bGUnLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItZWRpdC1kZXNjJz5EZXNjOjwvbGFiZWw+XG4gICAgICAgIDx0ZXh0YXJlYSByZWY9e2Rlc2NJbnB1dH0gaWQ9J3RhZzItZWRpdC1kZXNjJy8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gaWQ9J3RhZzItZWRpdCcgb25DbGljaz17ZWRpdFRhZ30+RWRpdDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRWRpdENvbG9yKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgcklucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBnSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGJJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBlZGl0Q29sb3IgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgcklucHV0LmN1cnJlbnQgJiZcbiAgICAgIGdJbnB1dC5jdXJyZW50ICYmXG4gICAgICBiSW5wdXQuY3VycmVudFxuICAgICkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0Q29sb3IocHJvcHMuc2VsZWN0ZWRUYWcsIHtcbiAgICAgICAgcjogcGFyc2VGbG9hdChySW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgIGc6IHBhcnNlRmxvYXQoZ0lucHV0LmN1cnJlbnQudmFsdWUpLFxuICAgICAgICBiOiBwYXJzZUZsb2F0KGJJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1jb2xvci1yJz5SOiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtySW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWNvbG9yLXInIHR5cGU9J251bWJlcicgc3RlcD17MC4wMX0gZGVmYXVsdFZhbHVlPXsxfSAgbWluPXswfSBtYXg9ezAuNzV9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWNvbG9yLWcnPkc6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2dJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItY29sb3ItZycgdHlwZT0nbnVtYmVyJyBzdGVwPXswLjAxfSBkZWZhdWx0VmFsdWU9ezB9ICBtaW49ezB9IG1heD17MX0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItY29sb3ItYic+QjogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17YklucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1jb2xvci1iJyB0eXBlPSdudW1iZXInIHN0ZXA9ezAuMDF9IGRlZmF1bHRWYWx1ZT17MX0gIG1pbj17MH0gbWF4PXswLjc1fSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLWVkaXQtY29sb3InIG9uQ2xpY2s9e2VkaXRDb2xvcn0+RWRpdCBDb2xvcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRUYWc6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVkaXRTdGVtKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3N1Ym1pdEhlaWdodCwgc2V0U3VibWl0SGVpZ2h0XSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbc3VibWl0VmlzaWJpbGl0eSwgc2V0U3VibWl0VmlzaWJpbGl0eV0gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBoZWlnaHRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgdmlzaWJsZUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHN1Ym1pdEhlaWdodENoYW5nZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0U3VibWl0SGVpZ2h0KCFzdWJtaXRIZWlnaHQpO1xuICB9LCBbc3VibWl0SGVpZ2h0XSk7XG5cbiAgY29uc3Qgc3VibWl0VmlzaWJpbGl0eUNoYW5nZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0U3VibWl0VmlzaWJpbGl0eSghc3VibWl0VmlzaWJpbGl0eSk7XG4gIH0sIFtzdWJtaXRWaXNpYmlsaXR5XSk7XG5cbiAgY29uc3QgZWRpdFN0ZW0gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgaGVpZ2h0SW5wdXQuY3VycmVudCAmJiB2aXNpYmxlSW5wdXQuY3VycmVudFxuICAgICkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0U3RlbShwcm9wcy5zZWxlY3RlZFRhZywge1xuICAgICAgICBzdGVtVmlzaWJsZTogc3VibWl0VmlzaWJpbGl0eSA/IHZpc2libGVJbnB1dC5jdXJyZW50LmNoZWNrZWQgOiB1bmRlZmluZWQsXG4gICAgICAgIHN0ZW1IZWlnaHQ6ICBzdWJtaXRIZWlnaHQgPyBwYXJzZUZsb2F0KGhlaWdodElucHV0LmN1cnJlbnQudmFsdWUpIDogdW5kZWZpbmVkLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWcsIHN1Ym1pdEhlaWdodCwgc3VibWl0VmlzaWJpbGl0eV0pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94JyBjaGVja2VkPXtzdWJtaXRIZWlnaHR9IG9uQ2hhbmdlPXtzdWJtaXRIZWlnaHRDaGFuZ2VkfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1zdGVtLWhlaWdodCc+c3RlbSBoZWlnaHQ6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2hlaWdodElucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1oZWlnaHQtc3RlbScgdHlwZT0nbnVtYmVyJyBzdGVwPXswLjF9IGRlZmF1bHRWYWx1ZT17MX0gIG1pbj17MH0gZGlzYWJsZWQ9eyFzdWJtaXRIZWlnaHR9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgY2hlY2tlZD17c3VibWl0VmlzaWJpbGl0eX0gb25DaGFuZ2U9e3N1Ym1pdFZpc2liaWxpdHlDaGFuZ2VkfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1zdGVtLXZpc2libGUnPnN0ZW0gdmlzaWJsZTo8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt2aXNpYmxlSW5wdXR9IHR5cGU9J2NoZWNrYm94JyBpZD0ndGFnMi1zdGVtLXZpc2libGUnIGRpc2FibGVkPXshc3VibWl0VmlzaWJpbGl0eX0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBpZD0ndGFnMi1lZGl0LXN0ZW0nIG9uQ2xpY2s9e2VkaXRTdGVtfT5FZGl0IFN0ZW08L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG4gIHNlbGVjdGVkQXNzZXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVkaXRJY29uKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgZWRpdEljb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcHJvcHMuc2RrLlRhZy5lZGl0SWNvbihwcm9wcy5zZWxlY3RlZFRhZywgcHJvcHMuc2VsZWN0ZWRBc3NldCk7XG4gIH0sIFtwcm9wcy5zZGsuVGFnLCBwcm9wcy5zZWxlY3RlZEFzc2V0LCBwcm9wcy5zZWxlY3RlZFRhZ10pO1xuXG4gIGNvbnN0IHJlc2V0SWNvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBwcm9wcy5zZGsuVGFnLnJlc2V0SWNvbihwcm9wcy5zZWxlY3RlZFRhZyk7XG4gIH0sIFtwcm9wcy5zZGsuVGFnLCBwcm9wcy5zZWxlY3RlZFRhZ10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBpZD0ndGFnMi1lZGl0LWljb24nIG9uQ2xpY2s9e2VkaXRJY29ufT5FZGl0IEljb248L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBpZD0ndGFnMi1yZXNldC1pY29uJyBvbkNsaWNrPXtyZXNldEljb259PlJlc2V0IEljb248L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRUYWc6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVkaXRPcGFjaXR5KHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3Qgb3BhY2l0eUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGVkaXRPcGFjaXR5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChvcGFjaXR5SW5wdXQuY3VycmVudCkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0T3BhY2l0eShwcm9wcy5zZWxlY3RlZFRhZywgcGFyc2VGbG9hdChvcGFjaXR5SW5wdXQuY3VycmVudC52YWx1ZSkpO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1vcGFjaXR5Jz5vcGFjaXR5OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtvcGFjaXR5SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLW9wYWNpdHknIHR5cGU9J251bWJlcicgc3RlcD17MC4wMX0gZGVmYXVsdFZhbHVlPXswLjV9IG1pbj17MH0gbWF4PXsxfSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLWVkaXQtb3BhY2l0eScgb25DbGljaz17ZWRpdE9wYWNpdHl9PkVkaXQgT3BhY2l0eTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRUYWc6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vdmUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbc3VibWl0UG9zLCBzZXRTdWJtaXRQb3NdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtzdWJtaXROb3JtLCBzZXRTdWJtaXROb3JtXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIGNvbnN0IHhJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB6SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgeE5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeU5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgek5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBzdWJtaXRQb3NDaGFuZ2VkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHNldFN1Ym1pdFBvcyghc3VibWl0UG9zKTtcbiAgfSwgW3N1Ym1pdFBvc10pO1xuICBjb25zdCBzdWJtaXROb3JtQ2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRTdWJtaXROb3JtKCFzdWJtaXROb3JtKTtcbiAgfSwgW3N1Ym1pdE5vcm1dKTtcblxuICBjb25zdCBtb3ZlVGFnID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIHhJbnB1dC5jdXJyZW50ICYmXG4gICAgICB5SW5wdXQuY3VycmVudCAmJlxuICAgICAgeklucHV0LmN1cnJlbnQgJiZcbiAgICAgIHhOb3JtSW5wdXQuY3VycmVudCAmJlxuICAgICAgeU5vcm1JbnB1dC5jdXJyZW50ICYmXG4gICAgICB6Tm9ybUlucHV0LmN1cnJlbnRcbiAgICApIHtcbiAgICAgIHByb3BzLnNkay5UYWcuZWRpdFBvc2l0aW9uKHByb3BzLnNlbGVjdGVkVGFnLCB7XG4gICAgICAgIGFuY2hvclBvc2l0aW9uOiBzdWJtaXRQb3MgPyB7XG4gICAgICAgICAgeDogcGFyc2VGbG9hdCh4SW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgICAgeTogcGFyc2VGbG9hdCh5SW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgICAgejogcGFyc2VGbG9hdCh6SW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgIHN0ZW1WZWN0b3I6IHN1Ym1pdE5vcm0gPyB7XG4gICAgICAgICAgeDogcGFyc2VGbG9hdCh4Tm9ybUlucHV0LmN1cnJlbnQudmFsdWUpLFxuICAgICAgICAgIHk6IHBhcnNlRmxvYXQoeU5vcm1JbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB6OiBwYXJzZUZsb2F0KHpOb3JtSW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm9wcy5zZGsuVGFnLCBwcm9wcy5zZWxlY3RlZFRhZywgc3VibWl0Tm9ybSwgc3VibWl0UG9zXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICBwb3NpdGlvbjpcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94JyBjaGVja2VkPXtzdWJtaXRQb3N9IG9uQ2hhbmdlPXtzdWJtaXRQb3NDaGFuZ2VkfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1tb3ZlLXBvcy14Jz54OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt4SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLW1vdmUtcG9zLXgnIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgZGlzYWJsZWQ9eyFzdWJtaXRQb3N9IC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLW1vdmUtcG9zLXknPnk6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3lJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItbW92ZS1wb3MteScgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyBkaXNhYmxlZD17IXN1Ym1pdFBvc30gLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItbW92ZS1wb3Mteic+ejogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eklucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1tb3ZlLXBvcy16JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDAxJyBkZWZhdWx0VmFsdWU9JzAnIGRpc2FibGVkPXshc3VibWl0UG9zfSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBub3JtYWw6XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgY2hlY2tlZD17c3VibWl0Tm9ybX0gb25DaGFuZ2U9e3N1Ym1pdE5vcm1DaGFuZ2VkfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1tb3ZlLW5vcm0teCc+eDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eE5vcm1JbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItbW92ZS1ub3JtLXgnIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgZGlzYWJsZWQ9eyFzdWJtaXROb3JtfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1tb3ZlLW5vcm0teSc+eTogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eU5vcm1JbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItbW92ZS1ub3JtLXknIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMScgZGlzYWJsZWQ9eyFzdWJtaXROb3JtfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1tb3ZlLW5vcm0teic+ejogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17ek5vcm1JbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItbW92ZS1ub3JtLXonIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgZGlzYWJsZWQ9eyFzdWJtaXROb3JtfSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLW1vdmUnIG9uQ2xpY2s9e21vdmVUYWd9Pk1vdmU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB0eXBlIE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gT3Blbih7IHNkaywgc2VsZWN0ZWRUYWcgfTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGZvcmNlT3BlbiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZm9yY2VEb2NrID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IG9wZW4gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZm9yY2UgPSBmb3JjZU9wZW4uY3VycmVudD8uY2hlY2tlZCB8fCBmYWxzZTtcbiAgICBzZGsuVGFnLm9wZW4oc2VsZWN0ZWRUYWcsIHsgZm9yY2UgfSk7XG4gIH0sIFtzZGsuVGFnLCBzZWxlY3RlZFRhZ10pO1xuXG4gIGNvbnN0IGRvY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZm9yY2UgPSBmb3JjZURvY2suY3VycmVudD8uY2hlY2tlZCB8fCBmYWxzZTtcbiAgICBzZGsuVGFnLmRvY2soc2VsZWN0ZWRUYWcsIHsgZm9yY2UgfSk7XG4gIH0sIFtzZGsuVGFnLCBzZWxlY3RlZFRhZ10pO1xuXG4gIGNvbnN0IGNsb3NlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHNkay5UYWcuY2xvc2Uoc2VsZWN0ZWRUYWcpO1xuICB9LCBbc2RrLlRhZywgc2VsZWN0ZWRUYWddKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgcmVhZE9ubHkgcGxhY2Vob2xkZXI9eycobm9uZSknfSB2YWx1ZT17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgb25DbGljaz17b3Blbn0+T3BlbjwvYnV0dG9uPlxuICAgICAgICA8bGFiZWwgc3R5bGU9e3sgbWFyZ2luTGVmdDogJzVweCcgfX0+Zm9yY2U6PC9sYWJlbD48aW5wdXQgcmVmPXtmb3JjZU9wZW59IGlkPSd0YWctZm9yY2Utb3BlbicgdHlwZT0nY2hlY2tib3gnIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgb25DbGljaz17ZG9ja30+RG9jazwvYnV0dG9uPlxuICAgICAgICA8bGFiZWwgc3R5bGU9e3sgbWFyZ2luTGVmdDogJzVweCcgfX0+Zm9yY2U6PC9sYWJlbD48aW5wdXQgcmVmPXtmb3JjZURvY2t9IGlkPSd0YWctZm9yY2UtZG9jaycgdHlwZT0nY2hlY2tib3gnIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgb25DbGljaz17Y2xvc2V9PkNsb3NlPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gUmVnaXN0ZXJBdHRhY2htZW50KHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3Qgc3JjSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgcmVnaXN0ZXJBdHRhY2htZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChzcmNJbnB1dC5jdXJyZW50KSB7XG4gICAgICBwcm9wcy5zZGsuVGFnLnJlZ2lzdGVyQXR0YWNobWVudChzcmNJbnB1dC5jdXJyZW50LnZhbHVlKTtcbiAgICB9XG4gIH0sIFtwcm9wcy5zZGsuVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1yZWdpc3Rlci1hdHRhY2htZW50LXNyYyc+U3JjOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3NyY0lucHV0fSB0eXBlPSd0ZXh0JyBpZD0ndGFnMi1yZWdpc3Rlci1hdHRhY2htZW50LXNyYycgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZWdpc3RlckF0dGFjaG1lbnR9PlJlZ2lzdGVyPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWdpc3RlclNhbmRib3gocHJvcHM6IE9taXQ8UHJvcHMsICdzZWxlY3RlZFRhZyc+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBodG1sSW5wdXQgPSB1c2VSZWY8SFRNTFRleHRBcmVhRWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IG5hbWVJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgd0lucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBoSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cblxuICBjb25zdCByZWdpc3RlclNhbmRib3ggPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKGh0bWxJbnB1dC5jdXJyZW50ICYmIG5hbWVJbnB1dC5jdXJyZW50ICYmIHdJbnB1dC5jdXJyZW50ICYmIGhJbnB1dC5jdXJyZW50KSB7XG4gICAgICBjb25zdCBbLCBwbV0gPSBhd2FpdCBwcm9wcy5zZGsuVGFnLnJlZ2lzdGVyU2FuZGJveChodG1sSW5wdXQuY3VycmVudC52YWx1ZSwge1xuICAgICAgICBuYW1lOiBuYW1lSW5wdXQuY3VycmVudC52YWx1ZSxcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIGg6IHBhcnNlSW50KGhJbnB1dC5jdXJyZW50LnZhbHVlLCAxMCksXG4gICAgICAgICAgdzogcGFyc2VJbnQod0lucHV0LmN1cnJlbnQudmFsdWUsIDEwKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBnZW5Db2xvcigpIHtcbiAgICAgICAgbGV0IHJnYiA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICAgIHJnYiArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIycgKyByZ2I7XG4gICAgICB9XG4gICAgICAvLyBkaXJlY3RseSBjb21tdW5pY2F0ZSB3aXRoIHRoZSBpZnJhbWUgdGhhdCB3YXMganVzdCBpbmplY3RlZFxuICAgICAgcG0ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGU6IGFueSkge1xuICAgICAgICBjb25zdCBuZXdDb2xvciA9IGdlbkNvbG9yKCk7XG4gICAgICAgIHBtLnNlbmQoJ3VwZGF0ZS5idXR0b24nLCBuZXdDb2xvciwgbmV3Q29sb3IudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm9wcy5zZGsuVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aW5wdXQgcmVmPXtuYW1lSW5wdXR9IHR5cGU9J3RleHQnIHBsYWNlaG9sZGVyPXsnbmFtZSd9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYSBzdHlsZT17eyBoZWlnaHQ6ICc3ZW0nIH19IHJlZj17aHRtbElucHV0fSBkZWZhdWx0VmFsdWU9e2RlZmF1bHRJbmplY3RlZFNjcmlwdH0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgd2lkdGg6PGlucHV0IGNsYXNzTmFtZT17J3NtYWxsLWlucHV0J30gcmVmPXt3SW5wdXR9IHR5cGU9J251bWJlcicgZGVmYXVsdFZhbHVlPXszNTB9Lz5cbiAgICAgICAgaGVpZ2h0OjxpbnB1dCBjbGFzc05hbWU9eydzbWFsbC1pbnB1dCd9IHJlZj17aElucHV0fSB0eXBlPSdudW1iZXInIGRlZmF1bHRWYWx1ZT17MTUwfS8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17cmVnaXN0ZXJTYW5kYm94fT5SZWdpc3RlcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cblxuY29uc3QgZGVmYXVsdEluamVjdGVkU2NyaXB0ID0gYDxzdHlsZT5cbmJvZHkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjY2NjO1xufVxuI2J0bjEge1xuICB3aWR0aDogMTAwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuPC9zdHlsZT5cbjxicj5cbjxicj5cbjxkaXYgaWQ9J2J0bjEnPkNMSUNLIE1FITwvZGl2PlxuPGRpdiBpZD0ndGFnJz48L2Rpdj5cbjxkaXYgaWQ9J2RvY2tlZCc+PC9kaXY+XG48c2NyaXB0PlxuY29uc3QgYnRuMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4xJyk7XG5idG4xLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICB3aW5kb3cuc2VuZCgnY2xpY2snLCB7YnV0dG9uSWQ6IDEyMzQzMjF9KTtcbn0pO1xud2luZG93Lm9uKCd1cGRhdGUuYnV0dG9uJywgZnVuY3Rpb24gKGNvbG9yLCBtZXNzYWdlKSB7XG4gIGJ0bjEuaW5uZXJUZXh0ID0gbWVzc2FnZTtcbiAgYnRuMS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbn0pO1xuY29uc3QgdGFnT3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZycpO1xudGFnT3V0cHV0LmlubmVySFRNTCA9ICdDdXJyZW50IHRhZzogJyArIHdpbmRvdy50YWc7XG5jb25zdCBkb2NrZWRPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG9ja2VkJyk7XG5kb2NrZWRPdXRwdXQuaW5uZXJIVE1MID0gJ0RvY2tlZDogJyArIHdpbmRvdy5kb2NrZWQ7XG48L3NjcmlwdD5gO1xuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVtb3ZlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgcmVtb3ZlVGFnID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHByb3BzLnNkay5UYWcucmVtb3ZlKHByb3BzLnNlbGVjdGVkVGFnKTtcbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLXJlbW92ZScgb25DbGljaz17cmVtb3ZlVGFnfT5SZW1vdmU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIFRvZ2dsZVNldHRpbmcoe3RvZ2dsZVNldHRpbmd9OiB7IHRvZ2dsZVNldHRpbmc6IChlbmFibGU/OiBib29sZWFuKSA9PiBQcm9taXNlPHZvaWQ+IH0pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHRvZ2dsZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGVTZXR0aW5nKCk7XG4gIH0sIFt0b2dnbGVTZXR0aW5nXSk7XG5cbiAgY29uc3Qgc2hvdyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGVTZXR0aW5nKHRydWUpO1xuICB9LCBbdG9nZ2xlU2V0dGluZ10pO1xuXG4gIGNvbnN0IGhpZGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgdG9nZ2xlU2V0dGluZyhmYWxzZSk7XG4gIH0sIFt0b2dnbGVTZXR0aW5nXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBvbkNsaWNrPXt0b2dnbGV9PlRvZ2dsZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIG9uQ2xpY2s9e3Nob3d9PlNob3c8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBvbkNsaWNrPXtoaWRlfT5IaWRlPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHR5cGUgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGxhYmVsQWxwaGFTb3J0KGl0ZW0xOiBNcFNkay5UYWcuVGFnRGF0YSwgaXRlbTI6IE1wU2RrLlRhZy5UYWdEYXRhKTogbnVtYmVyIHtcbiAgaWYgKGl0ZW0xLmxhYmVsIDwgaXRlbTIubGFiZWwpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKGl0ZW0xLmxhYmVsID4gaXRlbTIubGFiZWwpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEltcG9ydFRhZ3MocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBzcGFjZUlkSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IFt0ZXh0LCBzZXRUZXh0XSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IGltcG9ydFRhZ3MgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNwYWNlSWRJbnB1dC5jdXJyZW50KSB7XG4gICAgICBjb25zdCB0YWdzID0gYXdhaXQgcHJvcHMuc2RrLlRhZy5pbXBvcnRUYWdzKHNwYWNlSWRJbnB1dC5jdXJyZW50LnZhbHVlKTtcblxuICAgICAgc2V0VGV4dChgTmV3IHRhZyBpZHM6ICR7dGFnc31gKTtcbiAgICB9XG4gIH0sIFtwcm9wcy5zZGsuVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0nc3BhY2UtaWQnPnNwYWNlSWQ6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3NwYWNlSWRJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3NwYWNlLWlkJyB0eXBlPSdzdHJpbmcnLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBpZD0nY29weS10YWdzJyBvbkNsaWNrPXtpbXBvcnRUYWdzfT5JbXBvcnQ8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHRleHRhcmVhXG4gICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzgwJScgfX1cbiAgICAgICAgcmVhZE9ubHlcbiAgICAgICAgdmFsdWU9e3RleHR9XG4gICAgICAgIC8+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5pbXBvcnQgeyBBZGQgfSBmcm9tICcuL0FkZCc7XG5pbXBvcnQgeyBBbGxvd0FjdGlvbiB9IGZyb20gJy4vQWxsb3dBY3Rpb24nO1xuaW1wb3J0IHsgQXR0YWNoIH0gZnJvbSAnLi9BdHRhY2gnO1xuaW1wb3J0IHsgRWRpdEJpbGxib2FyZCB9IGZyb20gJy4vRWRpdEJpbGxib2FyZCc7XG5pbXBvcnQgeyBFZGl0Q29sb3IgfSBmcm9tICcuL0VkaXRDb2xvcic7XG5pbXBvcnQgeyBFZGl0U3RlbSB9IGZyb20gJy4vRWRpdFN0ZW0nO1xuaW1wb3J0IHsgRWRpdEljb24gfSBmcm9tICcuL0VkaXRJY29uJztcbmltcG9ydCB7IEVkaXRPcGFjaXR5IH0gZnJvbSAnLi9FZGl0T3BhY2l0eSc7XG5pbXBvcnQgeyBNb3ZlIH0gZnJvbSAnLi9Nb3ZlJztcbmltcG9ydCB7IE9wZW4gfSBmcm9tICcuL09wZW4nO1xuaW1wb3J0IHsgUmVnaXN0ZXJBdHRhY2htZW50IH0gZnJvbSAnLi9SZWdpc3RlckF0dGFjaG1lbnQnO1xuaW1wb3J0IHsgUmVnaXN0ZXJTYW5kYm94IH0gZnJvbSAnLi9SZWdpc3RlclNhbmRib3gnO1xuaW1wb3J0IHsgUmVtb3ZlIH0gZnJvbSAnLi9SZW1vdmUnO1xuaW1wb3J0IHsgVG9nZ2xlU2V0dGluZyB9IGZyb20gJy4vVG9nZ2xlU2V0dGluZyc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuLi9Db250cm9sUGFuZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9PYnNlcnZhYmxlQ29sbGVjdGlvbic7XG5pbXBvcnQgeyBsYWJlbEFscGhhU29ydCB9IGZyb20gJy4vdGFnU29ydCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBJbXBvcnRUYWdzIH0gZnJvbSAnLi9JbXBvcnRUYWdzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRBc3NldDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGFnKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3NlbGVjdGVkVGFnLCBzZWxlY3RUYWddID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbc2VsZWN0ZWRBdHRhY2htZW50LCBzZWxlY3RBdHRhY2htZW50XSA9IHVzZVN0YXRlKCcnKTtcblxuICBjb25zdCB0YWdPcHRpb25MYWJlbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpdGVtOiBNcFNkay5UYWcuVGFnRGF0YSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGl0ZW0ubGFiZWwgfHwgJyhubyBsYWJlbCknO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgYXR0YWNobWVudEhvdmVyTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaXRlbTogTXBTZGsuVGFnLkF0dGFjaG1lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiBpdGVtLnNyYztcbiAgfSwgW10pO1xuICBjb25zdCBhdHRhY2htZW50T3B0aW9uTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaXRlbTogTXBTZGsuVGFnLkF0dGFjaG1lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiBpdGVtLnNyYy5zbGljZSgwLCAzMCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB7IHNkayB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIGNvbGxlY3Rpb249e3Nkay5UYWcuZGF0YX1cbiAgICAgICAgICBuYW1lPXsnVGFncyd9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcuYXR0YWNobWVudHMgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIGNvbGxlY3Rpb249e3Nkay5UYWcuYXR0YWNobWVudHN9XG4gICAgICAgICAgbmFtZT17J0F0dGFjaG1lbnRzJ31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29sbGVjdGlvbkluc3BlY3RvclxuICAgICAgICBsYWJlbD17J1RhZyd9XG4gICAgICAgIGNvbGxlY3Rpb249e3Nkay5UYWcuZGF0YX1cbiAgICAgICAgb25DaGFuZ2VkPXtzZWxlY3RUYWd9XG4gICAgICAgIG9wdGlvbkxhYmVsPXt0YWdPcHRpb25MYWJlbH1cbiAgICAgICAgc29ydD17bGFiZWxBbHBoYVNvcnR9XG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzPXtbJ3N0ZW1IZWlnaHQnLCAnZGlzY1Bvc2l0aW9uJ119XG4gICAgICAvPlxuXG4gICAgICA8Q29sbGVjdGlvbkluc3BlY3RvclxuICAgICAgICBsYWJlbD17J0F0dGFjaG1lbnQnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVGFnLmF0dGFjaG1lbnRzfVxuICAgICAgICBvbkNoYW5nZWQ9e3NlbGVjdEF0dGFjaG1lbnR9XG4gICAgICAgIG9wdGlvbkxhYmVsPXthdHRhY2htZW50T3B0aW9uTGFiZWx9XG4gICAgICAgIGhvdmVyTGFiZWw9e2F0dGFjaG1lbnRIb3ZlckxhYmVsfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBBZGQnfT5cbiAgICAgICAgPEFkZCBzZGs9e3Nka30gc2VsZWN0ZWRBc3NldD17cHJvcHMuc2VsZWN0ZWRBc3NldH0gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIFJlbW92ZSd9PlxuICAgICAgICA8UmVtb3ZlIHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBPcGVuJ30+XG4gICAgICAgIDxPcGVuIHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBcIk9wZW4gVGFnc1wiJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlXG4gICAgICAgICAgb2JzZXJ2YWJsZT17c2RrLlRhZy5vcGVuVGFnc31cbiAgICAgICAgICBuYW1lPXsnT3BlbiBUYWdzJ31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIEVkaXQnfT5cbiAgICAgICAgPEVkaXRCaWxsYm9hcmQgc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIENvbG9yJ30+XG4gICAgICAgIDxFZGl0Q29sb3Igc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIEVkaXQgSWNvbid9PlxuICAgICAgICA8RWRpdEljb24gc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gc2VsZWN0ZWRBc3NldD17cHJvcHMuc2VsZWN0ZWRBc3NldH0gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIE9wYWNpdHknfT5cbiAgICAgICAgPEVkaXRPcGFjaXR5IHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBTdGVtJ30+XG4gICAgICAgIDxFZGl0U3RlbSBzZGs9e3Nka30gc2VsZWN0ZWRUYWc9e3NlbGVjdGVkVGFnfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gTW92ZSd9PlxuICAgICAgICA8TW92ZSBzZGs9e3Nka30gc2VsZWN0ZWRUYWc9e3NlbGVjdGVkVGFnfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gQWxsb3cgQWN0aW9ucyd9PlxuICAgICAgICA8QWxsb3dBY3Rpb24gc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIEF0dGFjaCd9PlxuICAgICAgICA8QXR0YWNoIHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IHNlbGVjdGVkQXR0YWNobWVudD17c2VsZWN0ZWRBdHRhY2htZW50fSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gUmVnaXN0ZXIgQXR0YWNobWVudCd9PlxuICAgICAgICA8UmVnaXN0ZXJBdHRhY2htZW50IHNkaz17c2RrfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gUmVnaXN0ZXIgU2FuZGJveCd9PlxuICAgICAgICA8UmVnaXN0ZXJTYW5kYm94IHNkaz17c2RrfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gRG9ja2luZyBDb250cm9scyd9PlxuICAgICAgICA8VG9nZ2xlU2V0dGluZyB0b2dnbGVTZXR0aW5nPXtzZGsuVGFnLnRvZ2dsZURvY2tpbmd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBOYXZpZ2F0aW9uIENvbnRyb2xzJ30+XG4gICAgICAgIDxUb2dnbGVTZXR0aW5nIHRvZ2dsZVNldHRpbmc9e3Nkay5UYWcudG9nZ2xlTmF2Q29udHJvbHN9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBTaGFyaW5nIENvbnRyb2xzJ30+XG4gICAgICAgIDxUb2dnbGVTZXR0aW5nIHRvZ2dsZVNldHRpbmc9e3Nkay5UYWcudG9nZ2xlU2hhcmluZ30gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIEltcG9ydCBUYWdzJ30+XG4gICAgICAgIDxJbXBvcnRUYWdzIHNkaz17c2RrfS8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkaywgVG91ciB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFRvdXJHZXREYXRhKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3RvdXJTbmFwc2hvdHMsIHNldFRvdXJTbmFwc2hvdHNdID0gdXNlU3RhdGU8VG91ci5TbmFwc2hvdFtdPihbXSk7XG5cbiAgY29uc3QgZ2V0RGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzZGtUb3VyU25hcHNob3RzID0gYXdhaXQgcHJvcHMuc2RrLlRvdXIuZ2V0RGF0YSgpIGFzIFRvdXIuU25hcHNob3RbXTtcbiAgICBzZXRUb3VyU25hcHNob3RzKHNka1RvdXJTbmFwc2hvdHMpO1xuICB9LCBbXSk7XG5cbiAgbGV0IHNlcmlhbGl6ZWQgPSAnJztcblxuICBpZiAodG91clNuYXBzaG90cy5sZW5ndGggPiAwKSB7XG4gICAgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KHRvdXJTbmFwc2hvdHMsIG51bGwsIDIpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8dHI+XG4gICAgICA8dGQ+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17Z2V0RGF0YX0+Z2V0RGF0YTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSBkZWZhdWx0VmFsdWU9e3NlcmlhbGl6ZWR9Lz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgVG91ckdldERhdGEgfSBmcm9tICcuL1RvdXJHZXREYXRhJztcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi9FdmVudCc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuL0NvbnRyb2xQYW5lbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuY29uc3QgY29udHJvbFBhbmVsU3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7XG4gIG92ZXJmbG93WTogJ2F1dG8nLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFRvdXIocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgc3R5bGU9e2NvbnRyb2xQYW5lbFN0eWxlfSBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YFRvdXJgfTwvZGl2PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPFRvdXJHZXREYXRhIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgICA8RXZlbnQgc2RrPXtwcm9wcy5zZGt9IGVudW09e3Byb3BzLnNkay5Ub3VyLkV2ZW50fS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUb3VyIC0gU3RhdGUnfT5cbiAgICAgICAgPE9ic2VydmFibGUgbmFtZT0nY3VycmVudCBzdGVwJyBvYnNlcnZhYmxlPXtwcm9wcy5zZGsuVG91ci5jdXJyZW50U3RlcH0gLz5cbiAgICAgICAgPE9ic2VydmFibGUgbmFtZT0ncGxheSBzdGF0ZScgb2JzZXJ2YWJsZT17cHJvcHMuc2RrLlRvdXIuc3RhdGV9IC8+XG4gICAgICAgIDxPYnNlcnZhYmxlIG5hbWU9J3RyYW5zaXRpb24nIG9ic2VydmFibGU9e3Byb3BzLnNkay5Ub3VyLnRyYW5zaXRpb259IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgdHlwZSBWaWV3IH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNlbGVjdGVkVmlldzogVmlldy5WaWV3IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWN0aXZhdGVWaWV3KHtzZWxlY3RlZFZpZXd9OiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgYWN0aXZhdGVWaWV3ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZFZpZXcpIHtcbiAgICAgIHNlbGVjdGVkVmlldy5zZXRBY3RpdmUoKTtcbiAgICB9XG4gIH0sIFtzZWxlY3RlZFZpZXddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIHNlbGVjdGVkOiA8aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkVmlldz8uaWQgPz8gJ05vbmUnfSBkaXNhYmxlZC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17YWN0aXZhdGVWaWV3fT5BY3RpdmF0ZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHR5cGUgVmlldyB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNlbGVjdGVkTGF5ZXI6IFZpZXcuTGF5ZXIgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gVG9nZ2xlTGF5ZXIoe3NlbGVjdGVkTGF5ZXJ9OiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgdG9nZ2xlTGF5ZXIgPSB1c2VDYWxsYmFjaygoYWN0aXZhdGU6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoc2VsZWN0ZWRMYXllcikge1xuICAgICAgc2VsZWN0ZWRMYXllci50b2dnbGUoYWN0aXZhdGUpO1xuICAgIH1cbiAgfSwgW3NlbGVjdGVkTGF5ZXJdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdj5cbiAgICAgICAgc2VsZWN0ZWQ6IDxpbnB1dCB0eXBlPSd0ZXh0JyB2YWx1ZT17c2VsZWN0ZWRMYXllcj8uaWQgPz8gJ05vbmUnfSBkaXNhYmxlZCAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRvZ2dsZUxheWVyKHRydWUpfT5Ub2dnbGUgT248L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0b2dnbGVMYXllcihmYWxzZSl9PlRvZ2dsZSBPZmY8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IHsgdHlwZSBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlLCB0eXBlIENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHNwYW5TdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHdpZHRoOiAnNTBweCcsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTGF5ZXJDb250cm9scyh7XG4gIHNlbGVjdGVkVmlldyxcbiAgc2VsZWN0ZWRMYXllcixcbn06IHtzZWxlY3RlZFZpZXc/OiBNcFNkay5WaWV3LlZpZXc7IHNlbGVjdGVkTGF5ZXI/OiBNcFNkay5WaWV3LkxheWVyfSk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IGFkZExheWVyID0gdXNlQ2FsbGJhY2soYXN5bmMoKSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZFZpZXcgfHwgIXNlbGVjdGVkTGF5ZXIpIHtcbiAgICAgIHNldE1lc3NhZ2UoJ25vdCByZWFkeScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2VsZWN0ZWRWaWV3LmFkZExheWVyKHNlbGVjdGVkTGF5ZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoJ1thZGRMYXllcl0gRXJyb3I6JyArIGUpO1xuICAgIH1cbiAgfSwgW3NlbGVjdGVkTGF5ZXIsIHNlbGVjdGVkVmlld10pO1xuICBjb25zdCByZW1vdmVMYXllciA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXNlbGVjdGVkVmlldyB8fCAhc2VsZWN0ZWRMYXllcikge1xuICAgICAgc2V0TWVzc2FnZSgnbm90IHJlYWR5Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBzZWxlY3RlZFZpZXcucmVtb3ZlTGF5ZXIoc2VsZWN0ZWRMYXllcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0TWVzc2FnZSgnW3JlbW92ZUxheWVyXSBFcnJvcjonICsgZSk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRMYXllciwgc2VsZWN0ZWRWaWV3XSk7XG4gIGNvbnN0IGhhc0xheWVyID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc2VsZWN0ZWRWaWV3IHx8ICFzZWxlY3RlZExheWVyKSB7XG4gICAgICBzZXRNZXNzYWdlKCdub3QgcmVhZHknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0TWVzc2FnZShzZWxlY3RlZFZpZXcuaGFzTGF5ZXIoc2VsZWN0ZWRMYXllcikudG9TdHJpbmcoKSk7XG4gIH0sIFtzZWxlY3RlZExheWVyLCBzZWxlY3RlZFZpZXddKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlxuICAgICAgICA8c3BhbiBzdHlsZT17c3BhblN0eWxlfT5WaWV3Ojwvc3Bhbj48aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkVmlldz8uaWQgPz8gJ05vbmUnfSBkaXNhYmxlZC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxzcGFuIHN0eWxlPXtzcGFuU3R5bGV9PkxheWVyOjwvc3Bhbj48aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkTGF5ZXI/LmlkID8/ICdOb25lJ30gZGlzYWJsZWQvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIHN0eWxlPXt7d2lkdGg6ICc3MHB4J319IG9uQ2xpY2s9e2FkZExheWVyfT5BZGQ8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBzdHlsZT17e3dpZHRoOiAnNzBweCd9fSBvbkNsaWNrPXtyZW1vdmVMYXllcn0+UmVtb3ZlPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gc3R5bGU9e3t3aWR0aDogJzcwcHgnfX0gb25DbGljaz17aGFzTGF5ZXJ9PkhhczwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8dGV4dGFyZWEgc3R5bGU9e3t3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICc2ZW0nfX0gdmFsdWU9e21lc3NhZ2V9IGRpc2FibGVkLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkaywgVmlldyB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuLi9Db250cm9sUGFuZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9PYnNlcnZhYmxlQ29sbGVjdGlvbic7XG5pbXBvcnQgeyBBY3RpdmF0ZVZpZXcgfSBmcm9tICcuL0FjdGl2YXRlVmlldyc7XG5pbXBvcnQgeyBUb2dnbGVMYXllciB9IGZyb20gJy4vVG9nZ2xlTGF5ZXInO1xuaW1wb3J0IHsgTGF5ZXJDb250cm9scyB9IGZyb20gJy4vTGF5ZXJDb250cm9scyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBWaWV3KHtzZGt9OiB7c2RrOiBNcFNka30pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtzZWxlY3RlZFZpZXcsIHNlbGVjdFZpZXddID0gdXNlU3RhdGU8Vmlldy5WaWV3PigpO1xuICBjb25zdCBbc2VsZWN0ZWRMYXllciwgc2VsZWN0TGF5ZXJdID0gdXNlU3RhdGU8Vmlldy5MYXllcj4oKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1ZpZXcudmlld3MgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIG5hbWU9eyd2aWV3cyd9XG4gICAgICAgICAgY29sbGVjdGlvbj17c2RrLlZpZXcudmlld3N9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb2xsZWN0aW9uSW5zcGVjdG9yXG4gICAgICAgIGxhYmVsPXsnVmlld3MnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVmlldy52aWV3c31cbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM9e1snaWQnLCAnbmFtZScsICdsYXllcnMnXX1cbiAgICAgICAgcHJvcGVydHlUcmFuc2Zvcm1zPXt7XG4gICAgICAgICAgbGF5ZXJzOiAobGF5ZXJzKSA9PiBbLi4ubGF5ZXJzXS5tYXAobGF5ZXIgPT4gbGF5ZXIuaWQpLFxuICAgICAgICB9fVxuICAgICAgICBvbkNoYW5nZWQ9eyhfLCB2aWV3KSA9PiBzZWxlY3RWaWV3KHZpZXcpfVxuICAgICAgLz5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldy5sYXllcnMgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIG5hbWU9eydsYXllcnMnfVxuICAgICAgICAgIGNvbGxlY3Rpb249e3Nkay5WaWV3LmxheWVyc31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbGxlY3Rpb25JbnNwZWN0b3JcbiAgICAgICAgbGFiZWw9eydMYXllcnMnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVmlldy5sYXllcnN9XG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzPXtbJ2lkJywgJ25hbWUnXX1cbiAgICAgICAgb25DaGFuZ2VkPXsoXywgbGF5ZXIpID0+IHNlbGVjdExheWVyKGxheWVyKX1cbiAgICAgIC8+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1ZpZXcgLSBDdXJyZW50J30+XG4gICAgICAgIDxPYnNlcnZhYmxlXG4gICAgICAgICAgbmFtZT17J2N1cnJlbnQnfVxuICAgICAgICAgIG9ic2VydmFibGU9e3Nkay5WaWV3LmN1cnJlbnR9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldyAtIEFjdGl2YXRlJ30+XG4gICAgICAgIDxBY3RpdmF0ZVZpZXcgc2VsZWN0ZWRWaWV3PXtzZWxlY3RlZFZpZXd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTGF5ZXIgLSBUb2dnbGUnfT5cbiAgICAgICAgPFRvZ2dsZUxheWVyIHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldy5sYXllcnMgY29udHJvbHMnfT5cbiAgICAgICAgPExheWVyQ29udHJvbHNcbiAgICAgICAgICBzZWxlY3RlZFZpZXc9e3NlbGVjdGVkVmlld31cbiAgICAgICAgICBzZWxlY3RlZExheWVyPXtzZWxlY3RlZExheWVyfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuL0NvbnRyb2xQYW5lbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFZpZXdtb2RlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydWaWV3bW9kZSAtIFRyYW5zaXRpb24nfT5cbiAgICAgICAgPE9ic2VydmFibGUgbmFtZT1cInZpZXdtb2RlIGN1cnJlbnRcIiBvYnNlcnZhYmxlPXtwcm9wcy5zZGsuTW9kZS5jdXJyZW50fSAvPlxuICAgICAgICA8T2JzZXJ2YWJsZSBuYW1lPVwidmlld21vZGUgdHJhbnNpdGlvblwiIG9ic2VydmFibGU9e3Byb3BzLnNkay5Nb2RlLnRyYW5zaXRpb259IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnLi9Bc3NldCc7XG5pbXBvcnQgeyBDb252ZXJzaW9uIH0gZnJvbSAnLi9Db252ZXJzaW9uJztcbmltcG9ydCB7IEZsb29yIH0gZnJvbSAnLi9GbG9vcic7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJy4vTGFiZWwnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJy4vTGluayc7XG5pbXBvcnQgeyBNYXR0ZXJ0YWcgfSBmcm9tICcuL01hdHRlcnRhZyc7XG5pbXBvcnQgeyBNZWFzdXJlbWVudHMgfSBmcm9tICcuL01lYXN1cmVtZW50cyc7XG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4vTW9kZWwnO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnLi9QbHVnaW4nO1xuaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJy4vUG9pbnRlcic7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4vUmVuZGVyZXInO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gJy4vUm9vbSc7XG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4vU2NlbmUnO1xuaW1wb3J0IHsgU2Vuc29yIH0gZnJvbSAnLi9TZW5zb3InO1xuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tICcuL1NldHRpbmdzJztcbmltcG9ydCB7IFN3ZWVwIH0gZnJvbSAnLi9Td2VlcCc7XG5pbXBvcnQgeyBTd2VlcEdyYXBoIH0gZnJvbSAnLi9Td2VlcEdyYXBoJztcbmltcG9ydCB7IFRhZyB9IGZyb20gJy4vVGFnJztcbmltcG9ydCB7IFRvdXIgfSBmcm9tICcuL1RvdXInO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vVmlldyc7XG5pbXBvcnQgeyBWaWV3bW9kZSB9IGZyb20gJy4vVmlld21vZGUnO1xuaW1wb3J0IHR5cGUgeyBCdW5kbGUsIEludGVybmFsTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBzdGFydFJlYWN0ID0gZnVuY3Rpb24oc2RrOiBCdW5kbGUuTXBTZGspOiB2b2lkIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0LXJvb3QnKTtcbiAgaWYgKCFjb250YWluZXIpIHJldHVybjtcblxuICBjcmVhdGVSb290KGNvbnRhaW5lcikucmVuZGVyKFxuICAgIDxkaXY+XG4gICAgICA8Q29udHJvbHMgc2RrPXtzZGt9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5mdW5jdGlvbiBDb250cm9scyh7IHNkayB9OiB7IHNkazogQnVuZGxlLk1wU2RrOyB9KSB7XG4gIGNvbnN0IFtzZWxlY3RlZEFzc2V0LCBzZWxlY3RBc3NldF0gPSB1c2VTdGF0ZSgnJyk7XG4gIC8vIGEgbWFwIGJldHdlZW4gYW4gYXNzZXQgaWQgYW5kIHRoZSBhc3NldCBzcmNcbiAgY29uc3QgW2Fzc2V0cywgc2V0QXNzZXRzXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KHt9KTtcblxuICBjb25zdCBhZGRBc3NldCA9IHVzZUNhbGxiYWNrKChpZDogc3RyaW5nLCBzcmM6IHN0cmluZykgPT4ge1xuICAgIHNldEFzc2V0cygoY3VycmVudEFzc2V0cykgPT4gKHtcbiAgICAgIC4uLmN1cnJlbnRBc3NldHMsXG4gICAgICBbaWRdOiBzcmMsXG4gICAgfSkpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8QXNzZXQgc2RrPXtzZGt9IGFzc2V0cz17YXNzZXRzfSBzZXRBc3NldHM9e3NldEFzc2V0c30gc2V0U2VsZWN0ZWRBc3NldD17c2VsZWN0QXNzZXR9IC8+XG4gICAgICA8Q29udmVyc2lvbiBzZGs9e3Nka30vPlxuICAgICAgPEZsb29yIHNkaz17c2RrfS8+XG4gICAgICA8TGFiZWwgc2RrPXtzZGt9Lz5cbiAgICAgIDxMaW5rIHNkaz17c2RrfS8+XG4gICAgICA8TWF0dGVydGFnIHNkaz17c2RrfSBzZWxlY3RlZEFzc2V0PXtzZWxlY3RlZEFzc2V0fSBhZGRBc3NldD17YWRkQXNzZXR9IC8+XG4gICAgICA8TWVhc3VyZW1lbnRzIHNkaz17c2RrfS8+XG4gICAgICA8TW9kZWwgc2RrPXtzZGt9Lz5cbiAgICAgIHsgJ1BsdWdpbicgaW4gc2RrICYmIDxQbHVnaW4gc2RrPXtzZGsgYXMgYW55IGFzIEludGVybmFsTXBTZGsuTXBTZGt9Lz4gfVxuICAgICAgPFBvaW50ZXIgc2RrPXtzZGt9IHNlbGVjdGVkQXNzZXQ9e3NlbGVjdGVkQXNzZXR9IGFkZEFzc2V0PXthZGRBc3NldH0gLz5cbiAgICAgIDxSZW5kZXJlciBzZGs9e3Nka30vPlxuICAgICAgPFJvb20gc2RrPXtzZGt9Lz5cbiAgICAgIDxTY2VuZSBzZGs9e3Nka30vPlxuICAgICAgPFNlbnNvciBzZGs9e3Nka30vPlxuICAgICAgPFNldHRpbmdzIHNkaz17c2RrfS8+XG4gICAgICA8U3dlZXAgc2RrPXtzZGt9Lz5cbiAgICAgIDxTd2VlcEdyYXBoIHNkaz17c2RrfS8+XG4gICAgICB7ICdUYWcnIGluIHNkayAmJiA8VGFnIHNkaz17c2RrfSBzZWxlY3RlZEFzc2V0PXtzZWxlY3RlZEFzc2V0fSAvPiB9XG4gICAgICA8VG91ciBzZGs9e3Nka30vPlxuICAgICAgeyAnVmlldycgaW4gc2RrICYmIDxWaWV3IHNkaz17c2RrfS8+IH1cbiAgICAgIDxWaWV3bW9kZSBzZGs9e3Nka30vPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJleHBvcnQgdHlwZSB7IERpbWVuc2lvbnMgfSBmcm9tICcuL0RpbWVuc2lvbnMnO1xuaW1wb3J0IE91dE9mUmFuZ2VFeGNlcHRpb24gZnJvbSAnY3dmL2V4Y2VwdGlvbi9PdXRPZlJhbmdlRXhjZXB0aW9uJztcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gZnVuY3Rpb24odGltZTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgY2FuY2VsbGFibGVEZWxheSA9ICh0aW1lOiBudW1iZXIpOiB7IGNhbmNlbDogKCkgPT4gdm9pZCwgcHJvbWlzZTogUHJvbWlzZTxhbnk+IH0gPT4ge1xuICBsZXQgdGltZW91dEluZGV4ID0gLTE7XG4gIGxldCByZXNvbHZlUHJvbWlzZTogKCkgPT4gdm9pZDtcbiAgY29uc3QgcHJvbWlzZSA9ICBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIHRpbWVvdXRJbmRleCA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpO1xuICB9KS50aGVuKCgpID0+IHtcbiAgICB0aW1lb3V0SW5kZXggPSAtMTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcHJvbWlzZSxcbiAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgIGlmICh0aW1lb3V0SW5kZXggIT09IC0xKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dEluZGV4KTtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVVybCA9IGZ1bmN0aW9uICh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB1cmwucmVwbGFjZSgnaHR0cHM6Ly8nLCAnaHR0cDovLycpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRvbWFpbkZyb21VcmwgPSBmdW5jdGlvbiAodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBtYXRjaCA9IC9eKFteOl0qOlxcL1xcLyk/KHd3d1xcLik/KFteL10rKS8uZXhlYyh1cmwpO1xuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4gbWF0Y2hbM107XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07XG5cbmV4cG9ydCBjb25zdCBhdmVyYWdlID0gZnVuY3Rpb24oaXRlcmFibGU6IGFueVtdLCBhdHRyaWJ1dGU/OiBzdHJpbmcpOiBudW1iZXIgfCBudWxsIHtcblxuICBpZiAoaXRlcmFibGUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgc3VtID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcblxuICBmb3IgKGxldCBpdGVtIG9mIGl0ZXJhYmxlKSB7XG4gICAgaXRlbSA9IGF0dHJpYnV0ZSA/IGl0ZW1bYXR0cmlidXRlXSA6IGl0ZW07XG4gICAgc3VtICs9IGl0ZW07XG4gICAgY291bnQrKztcbiAgfVxuXG4gIHJldHVybiBzdW0gLyBjb3VudDtcblxufTtcblxuZXhwb3J0IGNvbnN0IHVuaXF1ZUtleXMgPSBmdW5jdGlvbiAoYXJyOiBhbnlbXSk6IGFueVtdIHtcbiAgY29uc3QgdW5pcXVlOiBhbnkgPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgIHVuaXF1ZVtpdGVtXSA9IGl0ZW07XG4gIH1cbiAgcmV0dXJuIHVuaXF1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb3VudFVuaXF1ZSA9IGZ1bmN0aW9uIChhcnI6IGFueVtdKTogbnVtYmVyIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHVuaXF1ZUtleXMoYXJyKSkubGVuZ3RoO1xufTtcblxuLy8gQ29uc2lkZXJzIGEgc3RyaW5nIHdpdGggb25seSBzcGFjZXMgYW5kL29yIG5ld2xpbmVzIGFzIGVtcHR5XG5leHBvcnQgY29uc3QgZW1wdHlTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAhKHN0ci5yZXBsYWNlKC9cXG4vZywgJycpLnRyaW0oKS5sZW5ndGgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVxdWFsTGlzdHMgPSBmdW5jdGlvbihhOiBhbnlbXSwgYjogYW55W10pOiBib29sZWFuIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGVxdWFsU2V0cyA9IGZ1bmN0aW9uPFQgPSBhbnk+KGE6IFNldDxUPiwgYjogU2V0PFQ+KTogYm9vbGVhbiB7XG4gIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3QgdmFsIG9mIGEpIHtcbiAgICBpZiAoIWIuaGFzKHZhbCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUGljayB0aGUgaXRlbSBhdCB0aGUgbnRoIHBlcmNlbnRpbGVcbiAqXG4gKiBAcGFyYW0gbGlzdFxuICogQHBhcmFtIG4gMC05OSwgNTAgYmVpbmcgbWVkaWFuXG4gKiBAcGFyYW0gc29ydCAodHJ1ZSkgU2V0IHRvIGZhbHNlIHRvIHNraXAgdGhlIHNvcnRpbmcsXG4gKiAgICAgICAgICAgICAgaWYgeW91IGtub3cgdGhlIGxpc3QgaXMgc29ydGVkXG4gKi9cbmV4cG9ydCBjb25zdCBwZXJjZW50aWxlID0gZnVuY3Rpb24gKFxuICBsaXN0OiBudW1iZXJbXSwgbjogbnVtYmVyLCBzb3J0OiBib29sZWFuID0gdHJ1ZSk6IG51bWJlciB8IG51bGwge1xuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoc29ydCkge1xuICAgIGxpc3Quc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGI7IC8vIE90aGVyd2lzZSBpdCBkb2VzIGFuIGFzY2lpIGNvbXBhcmlzb24uIFllcywgcmVhbGx5IVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGZhY3RvciA9IG4gLyAxMDAuMDtcbiAgY29uc3QgaSA9IE1hdGguZmxvb3IobGlzdC5sZW5ndGggKiBmYWN0b3IpO1xuICByZXR1cm4gbGlzdFtpXTtcbn07XG5cbi8vIEFycmF5LnNvcnQgaXMgbm90IHN0YWJsZSwgdGhpcyBvbmUgaXNcbmV4cG9ydCBjb25zdCBzdGFibGVTb3J0ID0gZnVuY3Rpb24obGlzdDogYW55W10sIGNtcDogKHZhbHVlQTogYW55LCB2YWx1ZUI6IGFueSkgPT4gYW55KTogYW55W10ge1xuICByZXR1cm4gbGlzdC5tYXAoZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlLFxuICAgICAgaW5kZXgsXG4gICAgfTtcbiAgfSkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgY29uc3QgcmVzID0gY21wKGEudmFsdWUsIGIudmFsdWUpO1xuICAgIGlmIChyZXMgIT09IDApIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIC8vIFRoaXMgaXMgdGhlIHN0YWJsZSBwYXJ0IC0gaWYgdGhlIGNtcCBpcyAwLCB3ZSBzb3J0XG4gICAgLy8gb24gdGhlIGluZGV4LCB3aGljaCB3aWxsIGtlZXAgaXQgaW4gdGhlIG5vcm1hbCBvcmRlclxuICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgfSkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkYXRlOiBEYXRlKTogc3RyaW5nIHtcbiAgcmV0dXJuIFtcbiAgICBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgZGF0ZS5nZXRNb250aCgpICsgMSwgLy8gWmVybyBpbmRleGVkIG1vbnRoc1xuICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICBdLmpvaW4oJy0nKTtcbn07XG5cbi8qKiBSZXR1cm5zIHRoZSBzcGVjaWZpYyBmb3JtYXQgdXNlZCBhcyB0aGUgZGVmYXVsdCBuYW1lIGZvciBzbmFwc2hvdHMgKi9cbmV4cG9ydCBjb25zdCBmb3JtYXREYXRldGltZSA9IGZ1bmN0aW9uIChkYXRldGltZTogRGF0ZSk6IHN0cmluZyB7XG4gIHJldHVybiBbXG4gICAgcGFkTGVmdChkYXRldGltZS5nZXRNb250aCgpICsgMSksICcuJywgLy8gWmVybyBpbmRleGVkIG1vbnRoc1xuICAgIHBhZExlZnQoZGF0ZXRpbWUuZ2V0RGF0ZSgpKSwgJy4nLFxuICAgIGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksICdfJyxcbiAgICBwYWRMZWZ0KGRhdGV0aW1lLmdldEhvdXJzKCkpLCAnLicsXG4gICAgcGFkTGVmdChkYXRldGltZS5nZXRNaW51dGVzKCkpLCAnLicsXG4gICAgcGFkTGVmdChkYXRldGltZS5nZXRTZWNvbmRzKCkpLFxuICBdLmpvaW4oJycpO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhZExlZnQgPSBmdW5jdGlvbihudW1iZXJUb1BhZDogbnVtYmVyLCBkaWdpdHM6IG51bWJlciA9IDIsIGNocjogc3RyaW5nID0gJzAnLCByYWRpeDogbnVtYmVyID0gMTApOiBzdHJpbmcge1xuICBjb25zdCBwYXJzZWROdW1iZXIgPSBudW1iZXJUb1BhZC50b1N0cmluZyhyYWRpeCk7XG4gIGNvbnN0IGxlbiA9IChkaWdpdHMgLSBwYXJzZWROdW1iZXIubGVuZ3RoKSArIDE7XG4gIHJldHVybiBsZW4gPiAwID8gbmV3IEFycmF5KGxlbikuam9pbihjaHIpICsgcGFyc2VkTnVtYmVyIDogcGFyc2VkTnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIChsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gIGxldCB0ZXh0ID0gJyc7XG4gIGNvbnN0IGFscGhhYmV0ID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRleHQgKz0gYWxwaGFiZXQuY2hhckF0KCBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoICkpO1xuICB9XG4gIHJldHVybiB0ZXh0O1xufTtcblxuZXhwb3J0IGNvbnN0IG50aCA9IGZ1bmN0aW9uIChuOiBudW1iZXIpOiBzdHJpbmcge1xuICBuID0gbiAlIDEwO1xuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDE6IHJldHVybiBuICsgJ3N0JztcbiAgICBjYXNlIDI6IHJldHVybiBuICsgJ25kJztcbiAgICBjYXNlIDM6IHJldHVybiBuICsgJ3JkJztcbiAgfVxuICByZXR1cm4gbiArICd0aCc7XG59O1xuXG5leHBvcnQgY29uc3Qgd2FpdCA9ICh0aW1lOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgdWludDhUb0Jhc2U2NCA9ICh1aW50ODogVWludDhBcnJheSk6IHN0cmluZyA9PiB7XG4gIC8vIHRoaXMgdmFsdWUgc2VlbXMgdG8gaGF2ZSBkZWNlbnQgcGVyZm9ybWFuY2Ugd2l0aG91dCBjYXVzaW5nIGFueSBvdmVyZmxvd3MgaW4gdGhlIGBTdHJpZ24uZnJvbUNoYXJDb2RlLmFwcGx5YFxuICBjb25zdCBjaHVua1NpemUgPSA4MTkyO1xuICBjb25zdCBiYXNlNjRjaHVua3M6IHN0cmluZ1tdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdWludDgubGVuZ3RoOyBpICs9IGNodW5rU2l6ZSkge1xuICAgIGJhc2U2NGNodW5rcy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdWludDguc3ViYXJyYXkoaSwgaSArIGNodW5rU2l6ZSkpKTtcbiAgfVxuXG4gIHJldHVybiBidG9hKGJhc2U2NGNodW5rcy5qb2luKCcnKSk7XG59O1xuXG5leHBvcnQgY29uc3QgYm9vbGVhbk1hcEZyb21MaXN0ID0gKGV4Y2x1ZGU6IHN0cmluZ1tdID0gW10pOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9PiB7XG4gIGNvbnN0IGV4Y2x1ZGVNYXA6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XG4gIGZvciAoY29uc3Qgc3dlZXBJZCBvZiBleGNsdWRlKSB7XG4gICAgZXhjbHVkZU1hcFtzd2VlcElkXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4Y2x1ZGVNYXA7XG59O1xuXG4vKipcbiAqIFdyYXBzIE9iamVjdC5oYXNPd25Qcm9wZXJ0eSB0byByZXF1aXJlIHRoZSBwcm9wZXJ0eSB0byBiZSBvbiBUIGluIHRoZSBmaXJzdCBwbGFjZVxuICogQHBhcmFtIHtUfSBvYmpcbiAqIEBwYXJhbSB7a2V5b2YgVH0ga2V5XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093blByb3BlcnR5PFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihvYmo6IFQsIGtleToga2V5b2YgVCk6IGJvb2xlYW4ge1xuICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KGtleSk7XG59XG5cbmV4cG9ydCBjb25zdCB0cnVuY2F0ZVN0cmluZyA9IChzdHI6IHN0cmluZywgbWF4TGVudGg6IG51bWJlciwgcG9zdGZpeDogc3RyaW5nID0gJy4uLicpOiBzdHJpbmcgPT4ge1xuICBpZiAoc3RyLmxlbmd0aCA8PSBtYXhMZW50aCkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgcmV0dXJuIGAke3N0ci5zdWJzdHIoMCwgbWF4TGVudGgpfSR7cG9zdGZpeH1gO1xufTtcblxuLyoqXG4gKiBTd2FwIHR3byBiaXRzIHdpdGhpbiBhIDMyLWJpdCBudW1iZXIgKGR1ZSB0byBKUyBsaW1pdGF0aW9ucylcbiAqIFRoZSBpbnB1dCBhbmQgb3V0cHV0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHVuc2lnbmVkIHZhbHVlc1xuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gYml0MVxuICogQHBhcmFtIHtudW1iZXJ9IGJpdDJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB1bnNpZ25lZCByZXN1bHQgYWZ0ZXIgc3dhcHBpbmcgYGJpdDFgIGFuZCBgYml0MmAgaW4gYHZhbHVlYFxuICovXG5leHBvcnQgY29uc3Qgc3dhcEJpdHMgPSAodmFsdWU6IG51bWJlciwgYml0MTogbnVtYmVyLCBiaXQyOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICBjb25zdCB2YWx1ZUluUmFuZ2UgPSBNYXRoLmFicyh2YWx1ZSkgPCAoMHhmZmZmZmZmZiA+Pj4gMCk7XG4gIGNvbnN0IGJpdDFJblJhbmdlID0gYml0MSA8IDMyO1xuICBjb25zdCBiaXQySW5SYW5nZSA9IGJpdDIgPCAzMjtcbiAgaWYgKCF2YWx1ZUluUmFuZ2UgfHwgIWJpdDFJblJhbmdlIHx8ICFiaXQySW5SYW5nZSkge1xuICAgIHRocm93IG5ldyBPdXRPZlJhbmdlRXhjZXB0aW9uKCdhcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcbiAgfVxuICBjb25zdCBzd2FwcGVkQml0cyA9ICh2YWx1ZSA+Pj4gYml0MSBeIHZhbHVlID4+PiBiaXQyKSAmIDE7XG4gIHZhbHVlID0gdmFsdWUgXiAoc3dhcHBlZEJpdHMgPDwgYml0MSB8IHN3YXBwZWRCaXRzIDw8IGJpdDIpO1xuXG4gIHJldHVybiB2YWx1ZSA+Pj4gMDtcbn07XG5cbmV4cG9ydCBjb25zdCBoYXNoID0gKCgpID0+IHtcbiAgY29uc3QgbWFwOiBEaWN0PG51bWJlcj4gPSB7fTtcbiAgcmV0dXJuIChmcm9tOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIGlmIChtYXBbZnJvbV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgaCA9IGZyb20uc3BsaXQoJycpLnJlZHVjZSgoYSwgYikgPT4geyBhID0gKChhIDw8IDUpIC0gYSkgKyBiLmNoYXJDb2RlQXQoMCk7IHJldHVybiBhICYgYTsgfSwgMCk7XG4gICAgICBtYXBbZnJvbV0gPSBoO1xuICAgIH1cbiAgICByZXR1cm4gbWFwW2Zyb21dO1xuICB9O1xufSkoKTtcbiIsImltcG9ydCB7IG9uQ29ubmVjdCB9IGZyb20gJy4vY29udHJvbHMnO1xuaW1wb3J0IHsgc3RhcnRSZWFjdCB9IGZyb20gJy4vY29tcG9uZW50cy9SZWFjdFJvb3QnO1xuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5cbmltcG9ydCB7IGxvYWRTZGtCb290c3RyYXAsIGxvYWRTaG93Y2FzZSwgbG9hZEJ1bmRsZVNob3djYXNlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgY29udHJvbHMgZnJvbSAnLi9jb250cm9scy5odG1sJztcblxuaW1wb3J0IHR5cGUgeyBCdW5kbGUgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IGRlbGF5IH0gZnJvbSAnY3dmL3V0aWwnO1xuXG50eXBlIFNob3djYXNlRW1iZWQzV2luZG93ID0gV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMgJiB7XG4gIE1QX1NESzogTVBfU0RLO1xufVxuaW50ZXJmYWNlIE1QX1NESyB7XG4gIGNvbm5lY3QodGFyZ2V0OiBIVE1MSUZyYW1lRWxlbWVudCwgb3B0aW9ucz86IFBhcnRpYWw8QnVuZGxlLkNvbm5lY3RPcHRpb25zPik6IFByb21pc2U8QnVuZGxlLk1wU2RrPjtcbn1cblxuLy8gYWRkIHRoZSBjb250cm9scyB0byB0aGUgcGFnZVxuY29uc3QgY29udHJvbFJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1yb290JykgYXMgSFRNTEVsZW1lbnQ7XG5jb250cm9sUm9vdC5pbm5lckhUTUwgPSBjb250cm9scztcblxuY29uc3Qgc2hvd2Nhc2VFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3djYXNlJykgYXMgSFRNTElGcmFtZUVsZW1lbnQ7XG5cbmNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG5jb25zdCBjb25maWcgPSB7XG4gIGhvc3Q6IHBhcmFtcy5nZXQoJ2hvc3QnKSB8fCBwYXJhbXMuZ2V0KCdhcGlIb3N0JykgfHwgd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgc2RrS2V5OiBwYXJhbXMuZ2V0KCdzZGtLZXknKSB8fCBwYXJhbXMuZ2V0KCdhcHBsaWNhdGlvbktleScpIHx8ICd1Mm13OXcxcWUxc2FzcjBzYml1Y3JnY2ViJyxcbiAgYnVuZGxlVmVyc2lvbjogcGFyYW1zLmdldCgnYnVuZGxlVmVyc2lvbicpIHx8ICcnLFxuICB1c2VEaXJlY3RNZXNzYWdlczogKCEhcGFyYW1zLmdldCgnYnVuZGxlVmVyc2lvbicpIHx8ICEhcGFyYW1zLmdldCgnZG0nKSkgJiYgcGFyYW1zLmdldCgnZG0nKSAhPT0gJzAnLFxuICBzZGtWZXJzaW9uOiBwYXJhbXMuZ2V0KCdzZGtWZXJzaW9uJykgfHwgJzIuMC4xLTAtZzY0ZTdlODgnLFxuICB3b3Jrc2hvcDogcGFyYW1zLmdldCgnd29ya3Nob3AnKSB8fCAnJyxcbiAgY29ubmVjdGlvbkRlbGF5OiBwYXJzZUludChwYXJhbXMuZ2V0KCdkZWxheScpIHx8ICcwJywgMTApLFxuICBwcm92aWRlcjogcGFyYW1zLmdldCgncHJvdmlkZXInKSB8fCB1bmRlZmluZWQsXG59O1xuXG4vKipcbiAqIGNvbm5lY3QgdGhlIHNkayB1c2luZyB0aGUgY29ycmVjdCB3YXkgZGVwZW5kaW5nIG9uIGlmIHdlJ3JlIGNvbm5lY3Rpbmcgb3ZlciBwb3N0bWVzc2FnZSBvciBkaXJlY3RseVxuICpcbiAqIGlmIHdlIGZhaWwgY29ubmVjdGluZyB3aXRob3V0IGEga2V5LCB3ZSB0cnkgY29ubmVjdGluZyB3aXRoIGl0XG4gKiBpZiAmc2RrVmVyc2lvbj1sb2NhbCBpcyBwcm92aWRlZCwgYSBsb2NhbCB2ZXJzaW9uIG9mIHNkay5qcyB3aWxsIGJlIHVzZWQgKHJlYWxseSBvbmx5IHVzZWZ1bCBmb3IgbG9jYWwgZGVidWcpXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RTZGsoKTogUHJvbWlzZTxCdW5kbGUuTXBTZGs+IHtcbiAgaWYgKGNvbmZpZy5jb25uZWN0aW9uRGVsYXkgPiAwKSB7XG4gICAgYXdhaXQgZGVsYXkoY29uZmlnLmNvbm5lY3Rpb25EZWxheSk7XG4gIH1cbiAgaWYgKGNvbmZpZy51c2VEaXJlY3RNZXNzYWdlcykge1xuICAgIGNvbnN0IHNob3djYXNlV2luZG93ID0gc2hvd2Nhc2VFbGVtZW50LmNvbnRlbnRXaW5kb3cgYXMgQnVuZGxlLlNob3djYXNlQnVuZGxlV2luZG93O1xuICAgIGNvbnN0IGJ1bmRsZUNvbm5lY3RvciA9IHNob3djYXNlV2luZG93Lk1QX1NESztcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGJ1bmRsZUNvbm5lY3Rvci5jb25uZWN0KHNob3djYXNlV2luZG93LCB7XG4gICAgICAgIHByb3ZpZGVyOiBjb25maWcucHJvdmlkZXIsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBhd2FpdCAoYnVuZGxlQ29ubmVjdG9yIGFzIGFueSkuY29ubmVjdChzaG93Y2FzZVdpbmRvdywgY29uZmlnLnNka0tleSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbmZpZy5zZGtWZXJzaW9uID09PSAnbG9jYWwnKSB7XG4gICAgY29uc3QgeyBjb25uZWN0OiBlbWJlZENvbm5lY3QgfSA9IGF3YWl0IGltcG9ydCgnQHNkay9ib290c3RyYXAnKTtcbiAgICByZXR1cm4gYXdhaXQgZW1iZWRDb25uZWN0KHNob3djYXNlRWxlbWVudCwge1xuICAgICAgcHJvdmlkZXI6IGNvbmZpZy5wcm92aWRlcixcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0ICh3aW5kb3cgYXMgU2hvd2Nhc2VFbWJlZDNXaW5kb3cpLk1QX1NESy5jb25uZWN0KHNob3djYXNlRWxlbWVudCwge1xuICAgICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gYXdhaXQgKHdpbmRvdyBhcyBhbnkpLk1QX1NESy5jb25uZWN0KHNob3djYXNlRWxlbWVudCwgY29uZmlnLnNka0tleSwgJycpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIGNvbm5lY3QgdGhlIHNka1xuICogaWYgJmRtPTEsIGRpcmVjdCBtZXNzYWdpbmcgd2lsbCBiZSB1c2VkLiBEaXJlY3QgbWVzc2FnaW5nIGlzIHN1YmplY3QgdG8gWC1pZnJhbWUgbGltaXRhdGlvbnMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gIHRyeSB7XG4gICAgLy8gaWYgbm90IHVzaW5nIGRpcmVjdCBtZXNzYWdlcywgd2UgbG9hZCB0aGUgYm9vdHN0cmFwIHNjcmlwdCBvbiB0aGUgcGFnZVxuICAgIGlmICghY29uZmlnLnVzZURpcmVjdE1lc3NhZ2VzICYmIGNvbmZpZy5zZGtWZXJzaW9uICE9PSAnbG9jYWwnKSB7XG4gICAgICBhd2FpdCBsb2FkU2RrQm9vdHN0cmFwKGNvbmZpZy5zZGtWZXJzaW9uKTtcbiAgICB9XG4gICAgLy8gY2FzdCBhcyBidW5kbGUncyBNcFNkayB0eXBlLCBzaW5jZSB3ZSdyZSBzdXBwb3J0aW5nIHRoZSBlbWJlZCBhbmQgdGhlIGJ1bmRsZVxuICAgIGNvbnN0IHNob3djYXNlU2RrID0gYXdhaXQgY29ubmVjdFNkaygpO1xuICAgICh3aW5kb3cgYXMgYW55KS5TREtfSU5TVEFOQ0UgPSBzaG93Y2FzZVNkaztcbiAgICBvbkNvbm5lY3Qoc2hvd2Nhc2VTZGssIHNob3djYXNlRWxlbWVudCk7XG4gICAgc3RhcnRSZWFjdChzaG93Y2FzZVNkayk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cbiAgKHdpbmRvdyBhcyBhbnkpLlRIUkVFID0gKHNob3djYXNlRWxlbWVudC5jb250ZW50V2luZG93IGFzIGFueSk/LlRIUkVFO1xufVxuXG4vKipcbiAqIHBvcHVsYXRlIHRoZSBpZnJhbWUgd2l0aCBub3JtYWwgU2hvd2Nhc2UgKGBidW5kbGVWZXJzaW9uYCB1bnNwZWNpZmllZClcbiAqIG9yIHRoZSBidW5kbGUgU0RLIHZlcnNpb24gb2YgU2hvd2Nhc2UgKGBidW5kbGVWZXJzaW9uYCB3YXMgcHJvdmlkZWQpXG4gKi9cbihhc3luYyBmdW5jdGlvbiBsb2FkKCkge1xuICBpZiAoIXBhcmFtcy5nZXQoJ20nKSAmJiAhcGFyYW1zLmdldCgnbW9kZWwnKSkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICdObyBtb2RlbCBzcGVjaWZpZWQuIFNwZWNpZnkgYSBtb2RlbCB1c2luZyA/bT1bbW9kZWxTaWRdJztcbiAgICBjb25zdCBzdGF0dXNCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzJykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgc3RhdHVzQmFyLmNsYXNzTGlzdC5hZGQoJ2Vycm9yJyk7XG4gICAgc3RhdHVzQmFyLmlubmVyVGV4dCA9IGVycm9yTWVzc2FnZTtcblxuICAgIHRocm93IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cbiAgY29uZmlnLmJ1bmRsZVZlcnNpb24gP1xuICAgIGxvYWRCdW5kbGVTaG93Y2FzZShzaG93Y2FzZUVsZW1lbnQsIGNvbmZpZywgY29ubmVjdCkgOlxuICAgIGxvYWRTaG93Y2FzZShzaG93Y2FzZUVsZW1lbnQsIGNvbmZpZywgY29ubmVjdCk7XG59KSgpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGxvYWRTaG93Y2FzZShzaG93Y2FzZUVsZW1lbnQsIGNvbmZpZywgb25Mb2FkKSB7XG4gIHNob3djYXNlRWxlbWVudC5vbmxvYWQgPSBvbkxvYWQ7XG4gIGNvbnN0IHBsYXllclBhdGggPSBjb25maWcud29ya3Nob3AgPyAnL3dvcmsvJyA6ICcvc2hvdy8nO1xuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICBwYXJhbXMuc2V0KCdhcHBsaWNhdGlvbktleScsIGNvbmZpZy5zZGtLZXkpO1xuICBzaG93Y2FzZUVsZW1lbnQuc3JjID0gY29uZmlnLmhvc3QgKyBwbGF5ZXJQYXRoICsgJz8nICsgZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50b1N0cmluZygpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRCdW5kbGVTaG93Y2FzZShzaG93Y2FzZUVsZW1lbnQsIGNvbmZpZywgb25Mb2FkKSB7XG4gIGNvbnN0IGJ1bmRsZVZlcnNpb25PclBhdGggPSBjb25maWcuYnVuZGxlVmVyc2lvbjtcbiAgY29uc3QgaXNGdWxsUGF0aCA9IGJ1bmRsZVZlcnNpb25PclBhdGguc3RhcnRzV2l0aCgnaHR0cCcpO1xuICBzaG93Y2FzZUVsZW1lbnQub25sb2FkID0gb25Mb2FkO1xuICBsZXQgc3JjID0gJyc7XG4gIC8vIHNldCB0aGUgaWZyYW1lIHNyYyB0byB0aGUgcGF0aCBwcm92aWRlZCBvciBkZWZhdWx0IHRvIHN0YXRpYy5tYXR0ZXJwb3J0LmNvbVxuICBpZiAoaXNGdWxsUGF0aCkge1xuICAgIHNyYyArPSBidW5kbGVWZXJzaW9uT3JQYXRoICsnL3Nob3djYXNlLmh0bWwnO1xuICB9IGVsc2Uge1xuICAgIHNyYyArPSAnaHR0cHM6Ly9zdGF0aWMubWF0dGVycG9ydC5jb20vc2hvd2Nhc2Utc2RrL2J1bmRsZS8nICsgYnVuZGxlVmVyc2lvbk9yUGF0aCArICcvc2hvd2Nhc2UuaHRtbCc7XG4gIH1cbiAgLy8gYXBwZW5kIHRoZSBvdGhlciB1cmwgcGFyYW1zIGFuZCBtYWtlIHN1cmUgYGFwaUhvc3RgIGlzIGRlZmluZWQgc28gdGhhdCB0aGUgYnVuZGxlIHByb3Blcmx5IGNvbm5lY3RzXG4gIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gIHBhcmFtcy5zZXQoJ2FwcGxpY2F0aW9uS2V5JywgY29uZmlnLnNka0tleSk7XG4gIHBhcmFtcy5zZXQoJ2FwaUhvc3QnLCBjb25maWcuaG9zdCk7XG4gIHNob3djYXNlRWxlbWVudC5zcmMgPSBzcmMgKyAnPycgKyBkZWNvZGVVUklDb21wb25lbnQocGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTZGtCb290c3RyYXAoYm9vdHN0cmFwVmVyc2lvbikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIFNESyBib290c3RyYXAgdmVyc2lvbjonLCBib290c3RyYXBWZXJzaW9uKTtcbiAgICB2YXIgc2NyaXB0TG9jYXRpb24gPSAnaHR0cHM6Ly9zdGF0aWMubWF0dGVycG9ydC5jb20vc2hvd2Nhc2Utc2RrLycgKyBib290c3RyYXBWZXJzaW9uICsgJy9zZGsuanMnO1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSBzY3JpcHRMb2NhdGlvbjtcbiAgICBzY3JpcHQub25sb2FkID0gcmVzO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiYWEiLCJiYSIsInAiLCJhIiwiYiIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjYSIsIlNldCIsImRhIiwiZWEiLCJmYSIsImFkZCIsImhhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWEiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImphIiwia2EiLCJsYSIsInEiLCJkIiwiZSIsImYiLCJnIiwidGhpcyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ0eXBlIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInBhIiwicWEiLCJ0b1VwcGVyQ2FzZSIsInJhIiwic2xpY2UiLCJuYSIsImlzTmFOIiwib2EiLCJjYWxsIiwidGVzdCIsIm1hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwic2EiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInRhIiwiU3ltYm9sIiwiZm9yIiwidWEiLCJ2YSIsIndhIiwieGEiLCJ5YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJpdGVyYXRvciIsIklhIiwiSmEiLCJBIiwiYXNzaWduIiwiS2EiLCJFcnJvciIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiTGEiLCJNYSIsInByZXBhcmVTdGFja1RyYWNlIiwiZGVmaW5lUHJvcGVydHkiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJrIiwiZGlzcGxheU5hbWUiLCJpbmNsdWRlcyIsIm5hbWUiLCJOYSIsInRhZyIsInJlbmRlciIsIk9hIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJQYSIsIlFhIiwiUmEiLCJub2RlTmFtZSIsIlRhIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbnN0cnVjdG9yIiwiZ2V0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJTYSIsIlVhIiwiY2hlY2tlZCIsInZhbHVlIiwiVmEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIldhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJYYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYSIsIlphIiwiJGEiLCJhYiIsIm93bmVyRG9jdW1lbnQiLCJiYiIsIkFycmF5IiwiaXNBcnJheSIsImNiIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJkYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJlYiIsImZiIiwiZ2IiLCJ0ZXh0Q29udGVudCIsImhiIiwiaWIiLCJqYiIsImtiIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsInRvU3RyaW5nIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIm1iIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm5iIiwib2IiLCJwYiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5Iiwia2V5cyIsImNoYXJBdCIsInN1YnN0cmluZyIsInFiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIiwicmIiLCJzYiIsImlzIiwidGIiLCJ1YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ2YiIsIndiIiwieGIiLCJ5YiIsInpiIiwic3RhdGVOb2RlIiwiQWIiLCJCYiIsInB1c2giLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJLYiIsImFwcGx5IiwibSIsIm9uRXJyb3IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJTYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiVGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlViIiwiV2IiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiVmIiLCJYYiIsIlliIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIlpiIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCIkYiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiYWMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJEIiwidW5zdGFibGVfbm93IiwiYmMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImNjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJkYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZjIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImhjIiwiaWMiLCJsYyIsIk1hdGgiLCJjbHozMiIsIm1jIiwibmMiLCJsb2ciLCJMTjIiLCJvYyIsInBjIiwicWMiLCJyYyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJzYyIsInVjIiwidmMiLCJ3YyIsImV2ZW50VGltZXMiLCJ5YyIsIkUiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJNYXAiLCJMYyIsIk1jIiwiTmMiLCJPYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlBjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlJjIiwiU2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJUYyIsIlVjIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiJGMiLCJ0cmFuc2l0aW9uIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJRYyIsInN0b3BQcm9wYWdhdGlvbiIsImVkIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJqZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsImtkIiwibGQiLCJtZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInJkIiwic2QiLCJ0ZCIsIm5kIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsIm9kIiwicGQiLCJ2aWV3IiwiZGV0YWlsIiwicWQiLCJ2ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ1ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJ3ZCIsInlkIiwiZGF0YVRyYW5zZmVyIiwiQWQiLCJDZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJFZCIsImNsaXBib2FyZERhdGEiLCJHZCIsImRhdGEiLCJIZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJJZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJKZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJLZCIsIk1kIiwia2V5IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJPZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlFkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlNkIiwiVWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlZkIiwiV2QiLCJYZCIsImRvY3VtZW50TW9kZSIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwiZ2UiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiaGUiLCJpZSIsImplIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJrZSIsImxlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwib25pbnB1dCIsInZlIiwiZGV0YWNoRXZlbnQiLCJ3ZSIsInhlIiwiYXR0YWNoRXZlbnQiLCJ5ZSIsInplIiwiQWUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIkdlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIkhlIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIkllIiwiY29udGVudEVkaXRhYmxlIiwiSmUiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIm1pbiIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiS2UiLCJMZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJSZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlNlIiwiVGUiLCJVZSIsImFuaW1hdGlvbiIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImZmIiwiZ2YiLCJjb25jYXQiLCJoZiIsIlJiIiwiaW5zdGFuY2UiLCJsaXN0ZW5lciIsIkYiLCJqZiIsImhhcyIsImtmIiwibGYiLCJtZiIsInJhbmRvbSIsIm5mIiwiYmluZCIsImNhcHR1cmUiLCJwYXNzaXZlIiwibiIsInYiLCJDIiwidCIsIngiLCJyIiwiQiIsIm9mIiwicGYiLCJwYXJlbnRXaW5kb3ciLCJxZiIsInJmIiwiTyIsIlQiLCJ6YSIsIkwiLCJlZSIsImNoYXIiLCJmZSIsInVuc2hpZnQiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsIl9faHRtbCIsInpmIiwic2V0VGltZW91dCIsIkFmIiwiY2xlYXJUaW1lb3V0IiwiQmYiLCJQcm9taXNlIiwiRGYiLCJxdWV1ZU1pY3JvdGFzayIsInJlc29sdmUiLCJ0aGVuIiwiY2F0Y2giLCJDZiIsIkVmIiwiRmYiLCJHZiIsInByZXZpb3VzU2libGluZyIsIkhmIiwiSWYiLCJKZiIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJHIiwiSCIsIlBmIiwiSSIsIlFmIiwiUmYiLCJTZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlRmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJVZiIsIlZmIiwiV2YiLCJnZXRDaGlsZENvbnRleHQiLCJYZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImRnIiwiZWciLCJmZyIsImRlZmF1bHRQcm9wcyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIl9jdXJyZW50VmFsdWUiLCJtZyIsImNoaWxkTGFuZXMiLCJuZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwib2ciLCJwZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwibmV4dCIsInFnIiwicmciLCJzZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiaW50ZXJsZWF2ZWQiLCJlZmZlY3RzIiwidGciLCJ1ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJ2ZyIsIkoiLCJtb2RlIiwiSyIsIndnIiwieGciLCJ5ZyIsInciLCJ1IiwieSIsInpnIiwiQWciLCJCZyIsIkNvbXBvbmVudCIsInJlZnMiLCJDZyIsIkZnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiTSIsIkRnIiwiRWciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiR2ciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkhnIiwiY29udGV4dFR5cGUiLCJzdGF0ZSIsInVwZGF0ZXIiLCJJZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIkpnIiwicHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIk4iLCJaZyIsIiRnIiwiYWgiLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsImJoIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsImNoIiwiZGgiLCJlaCIsImZoIiwibWVtb2l6ZWRQcm9wcyIsImdoIiwiaGgiLCJpaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJqaCIsImpvaW4iLCJraCIsImxoIiwiaW5kZXgiLCJtaCIsIm5oIiwib2giLCJpbXBsZW1lbnRhdGlvbiIsInBoIiwicWgiLCJkb25lIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInRhZ05hbWUiLCJ6aCIsIkFoIiwiQmgiLCJQIiwiQ2giLCJyZXZlYWxPcmRlciIsIkRoIiwiRWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIkZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIkdoIiwiSGgiLCJRIiwiUiIsIlMiLCJJaCIsIkpoIiwiS2giLCJMaCIsIlUiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJVaCIsIlZoIiwiV2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImdldFNuYXBzaG90IiwiYmkiLCJjaSIsImRpIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsImVpIiwiZmkiLCJnaSIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsInppIiwibWVzc2FnZSIsIkFpIiwiY29uc29sZSIsImVycm9yIiwiTGkiLCJOaSIsIk9pIiwiQmkiLCJXZWFrTWFwIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIkdpIiwiY29tcG9uZW50U3RhY2siLCJIaSIsInBpbmdDYWNoZSIsIklpIiwiSmkiLCJLaSIsIlBpIiwidGFpbE1vZGUiLCJ0YWlsIiwiViIsInN1YnRyZWVGbGFncyIsIlFpIiwicGVuZGluZ0NvbnRleHQiLCJSaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlciLCJTaSIsInJlbmRlcmluZyIsIlRpIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwiaXNCYWNrd2FyZHMiLCJsYXN0IiwiVWkiLCJWaSIsIldpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJYaSIsIllpIiwiWmkiLCIkaSIsImFqIiwiY29tcGFyZSIsImJqIiwiY2oiLCJkaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsImVqIiwiZmoiLCJnaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImhqIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsImZhbGxiYWNrIiwibmoiLCJvaiIsInBqIiwicWoiLCJfcmVhY3RSZXRyeSIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ4aiIsInlqIiwiemoiLCJBaiIsIldlYWtTZXQiLCJYIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJLaiIsIkxqIiwiTWoiLCJOaiIsIk9qIiwiUGoiLCJRaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaiIsIlNqIiwiVGoiLCJYaiIsIllqIiwiWmoiLCJhayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiV2oiLCJMayIsImJrIiwiY2VpbCIsImNrIiwiZGsiLCJlayIsIlkiLCJaIiwiZmsiLCJnayIsImhrIiwiaWsiLCJqayIsIlZqIiwiSW5maW5pdHkiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicGsiLCJxayIsInJrIiwic2siLCJ0ayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsInRjIiwiY2FsbGJhY2tQcmlvcml0eSIsImNnIiwidWsiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJGayIsInRpbWVvdXRIYW5kbGUiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwibXV0YWJsZVJlYWRMYW5lcyIsInhjIiwiRmoiLCJkaXNwbGF5IiwiVWoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImpjIiwib25SZWNvdmVyYWJsZUVycm9yIiwiTWsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJOayIsIk9rIiwiUWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiUmsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiU2siLCJjYWNoZSIsInRyYW5zaXRpb25zIiwiVGsiLCJVayIsIlZrIiwiV2siLCJYayIsIllrIiwiWmsiLCJ3aiIsIlBrIiwiYWwiLCJyZXBvcnRFcnJvciIsImJsIiwiX2ludGVybmFsUm9vdCIsImNsIiwiZGwiLCJlbCIsImZsIiwiaGwiLCJnbCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInNwbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsImlsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwiamwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImtsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImxsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJleHBvcnRzIiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJtb2R1bGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIkZyYWdtZW50IiwianN4IiwianN4cyIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJDaGlsZHJlbiIsIm1hcCIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJjaHVua0lkIiwiYWxsIiwicmVkdWNlIiwicHJvbWlzZXMiLCJtaW5pQ3NzRiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIm9iaiIsInByb3AiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaSIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwidGltZW91dCIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2Iiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJmbiIsImhlYWQiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwiaW5zdGFsbGVkQ2h1bmtzIiwiOTAxIiwiaiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZWplY3QiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiZmlsdGVyRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiZWx0cyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJlbHQiLCJSZWdFeHAiLCJwYXJlbnRFbGVtZW50Iiwic3RhdHVzRWxlbWVudCIsInJlcG9ydCIsInByZWZpeCIsIm1zZyIsImNsYXNzTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJ3YXJuIiwicmVwb3J0Q29tcGxldGlvbiIsInJlcG9ydEJ1c3kiLCJjbGVhclNlbGVjdG9yIiwic2VsZWN0b3IiLCJvbkNvbm5lY3QiLCJzaG93Y2FzZSIsInNob3djYXNlRWxlbWVudCIsInNlbGVjdGVkVGFnIiwiY3VycmVudExvY2tzIiwibG9ja0JpbGxib2FyZCIsImxvY2tOYXZpZ2F0aW9uIiwiZ2V0TG9ja3MiLCJjdXJyZW50TG9jayIsImJpbGxib2FyZCIsIm5hdmlnYXRpb24iLCJvbkxvY2tzQ2hhbmdlIiwiTWF0dGVydGFnIiwicHJldmVudEFjdGlvbiIsIm9wZW5pbmciLCJuYXZpZ2F0aW5nIiwic2V0dXBNYXR0ZXJ0YWdQcmV2ZW50IiwidGl0bGUiLCJkZXNjIiwicG9zWCIsInBvc1kiLCJwb3NaIiwibm9ybVgiLCJub3JtWSIsIm5vcm1aIiwibWVkaWFUeXBlIiwibWVkaWFTcmMiLCJsYWJlbCIsImRlc2NyaXB0aW9uIiwiYW5jaG9yUG9zaXRpb24iLCJwYXJzZUZsb2F0Iiwic3RlbVZlY3RvciIsIm1lZGlhIiwiZWRpdFBvc2l0aW9uIiwicmVtb3ZlIiwidGFnTWVkaWF0eXBlU2VsZWN0b3JzIiwiZGVmYXVsdE9wdGlvbiIsIk1lZGlhVHlwZSIsIm9wdGlvbiIsInRhZ0VkaXRUaXRsZSIsInRhZ0VkaXRNZWRpYSIsInRhZ0VkaXREZXNjIiwidGFnTWVkaWF0eXBlU2VsZWN0b3IiLCJlZGl0QmlsbGJvYXJkIiwidGFnTGFiZWwiLCJzZWxlY3RlZEluZGV4IiwiaW5uZXJUZXh0IiwiZWRpdENvbG9yIiwic3RlbUhlaWdodEVsdCIsInN0ZW1WaXNpYmxlRWx0Iiwic3RlbUhlaWdodCIsInN0ZW1WaXNpYmxlIiwiZWRpdFN0ZW0iLCJ0YWdFZGl0T3BhY2l0eSIsImVkaXRPcGFjaXR5Iiwid2lkZ2V0VyIsIndpZGdldEgiLCJ3aWRnZXRTb3VyY2UiLCJpbmplY3RIVE1MIiwiZ2xvYmFsVmFyaWFibGVNYXAiLCJvbiIsIm9mZiIsInNlbmQiLCJwbSIsImdlbkNvbG9yIiwicmdiIiwibmV3Q29sb3IiLCJuYXZpZ2F0aW9uVHlwZVNlbGVjdG9yIiwiZm9yY2VOYXZpZ2F0aW9uIiwibmF2aWdhdGVUb1RhZyIsIlRyYW5zaXRpb24iLCJpbmZvIiwic2V0dXBNYXR0ZXJ0YWdDb250cm9scyIsInN3ZWVwQ29sbGVjdGlvbiIsInN3ZWVwU2VsZWN0b3JzIiwiY2FtZXJhUG9zZSIsIlN3ZWVwIiwic3Vic2NyaWJlIiwib25BZGRlZCIsIml0ZW0iLCJvblJlbW92ZWQiLCJvbkNvbGxlY3Rpb25VcGRhdGVkIiwiY29sbGVjdGlvbiIsImhhc0NoaWxkTm9kZXMiLCJzd2VlcElkIiwicG9zaXRpb25YIiwicG9zaXRpb25aIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwicm90YXRpb25TcGVlZCIsImZseVN0eWxlIiwic3dlZXBSb3RhdGlvblgiLCJzd2VlcFJvdGF0aW9uWSIsInN3ZWVwVHJhbnNpdGlvblRpbWUiLCJwb3NlU3Vic2NyaXB0aW9uIiwicG9zZU91dHB1dCIsInByZXZpZXciLCJ0YWdzIiwiTW9kZWwiLCJFdmVudCIsIk1PREVMX0xPQURFRCIsIm1vZGVsRGF0YSIsIk1vZGUiLCJDSEFOR0VfU1RBUlQiLCJvbGRNb2RlIiwibmV3TW9kZSIsIkNhbWVyYSIsIk1PVkUiLCJwb3NlIiwiQ0xJQ0siLCJ0YWdJZCIsImNsaWNrZWRUYWciLCJkaXNjV29ybGRQb3NpdGlvbiIsInNjcmVlblBvc2l0aW9uIiwiZ2V0RGlzY1Bvc2l0aW9uIiwiQ29udmVyc2lvbiIsIndvcmxkVG9TY3JlZW4iLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm1vdmVJbkRpcmVjdGlvbiIsIkRpcmVjdGlvbiIsInBhbiIsImFuZ2xlIiwiZGlyZWN0aW9uIiwicm90YXRlSW5EaXJlY3Rpb24iLCJyb3RhdGUiLCJzcGVlZCIsInNldFJvdGF0aW9uIiwiVHJhbnNpdGlvblR5cGUiLCJtb3ZlVG8iLCJzd2VlcCIsInJvdGF0aW9uIiwidHJhbnNpdGlvblRpbWUiLCJjYW5jZWwiLCJvbkNoYW5nZWQiLCJSZW5kZXJlciIsInRha2VTY3JlZW5TaG90IiwibWF0dGVydGFncyIsInNzVXJsIiwidGFrZUVxdWlyZWN0YW5ndWxhciIsImN1cnJlbnRTd2VlcCIsInNpZCIsInRhZ1NlbGVjdG9ycyIsInRhZ1NlbGVjdG9yT3B0aW9uc01hcCIsImNyZWF0ZU9wdGlvbiIsIm5leHRDaGlsZCIsImxvY2FsZUNvbXBhcmUiLCJvblVwZGF0ZWQiLCJwb3B1bGF0ZU1hdHRlcnRhZ1NlbGVjdG9ycyIsIlRvdXIiLCJzdG9wIiwic3RlcCIsInBhcnNlSW50IiwibGV2ZWwiLCJkZWx0YSIsInBvaW50ZXJTdWJzY3JpcHRpb24iLCJwb2ludGVyT3V0cHV0IiwiUG9pbnRlciIsImludGVyc2VjdGlvbiIsIm1vdXNlIiwidG9GaXhlZCIsInpvb21CeSIsIm5ld1pvb20iLCJ6b29tVG8iLCJ6b29tUmVzZXQiLCJzd2VlcFNlbGVjdG9yIiwiY3VycmVudEVuYWJsZW1lbnRNYXAiLCJlbmFibGVTd2VlcCIsIm9uRW5hYmxlZENoYW5nZSIsImVuYWJsZSIsImRpc2FibGUiLCJjdXJyZW50RW5hYmxlbWVudCIsImVuYWJsZWQiLCJhZGRTd2VlcFRvZ2dsZSIsIkNvbGxlY3Rpb25TZWxlY3QiLCJzdXBlciIsIm9wdGlvbk1hcCIsIm9uVmFsdWVDaGFuZ2VkIiwiYXZhaWxhYmxlT3B0aW9ucyIsInNlbGVjdFJlZiIsInN1YnNjcmlwdGlvbiIsImlkeCIsImZpbHRlciIsInNvcnRlZEVudHJpZXMiLCJlbnRyaWVzIiwic29ydCIsIml0ZW0xIiwiaXRlbTIiLCJvbkNoYW5nZSIsInJlbmRlck9wdGlvbnMiLCJob3ZlckxhYmVsIiwib3B0aW9uTGFiZWwiLCJjb250cm9sUGFuZWxTdHlsZSIsIm92ZXJmbG93WSIsIkNvbnRyb2xQYW5lbCIsImhlYWRlciIsIkNvbGxlY3Rpb25JbnNwZWN0b3IiLCJzZWxlY3RlZEl0ZW0iLCJzZWxlY3RJdGVtIiwib3V0cHV0IiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJyZWFkT25seSIsInByb3BlcnR5VHJhbnNmb3JtcyIsInRyYW5zZm9ybVJlY29yZCIsInRyYW5zZm9ybSIsInNlcmlhbGl6ZU91dHB1dCIsIlJlZ2lzdGVyIiwiaWRJbnB1dCIsInNyY0lucHV0IiwicmVnaXN0ZXIiLCJzZGsiLCJBc3NldCIsInJlZ2lzdGVyVGV4dHVyZSIsIm9uUmVnaXN0ZXIiLCJpbml0aWFsSWNvbnMiLCJDaHJvbWUiLCJGaXJlZm94IiwiRWRnZSIsImh0bWxGb3IiLCJhc3NldENvbGxlY3Rpb24iLCJvYnNlcnZlcnMiLCJhc3NldHMiLCJvYnNlcnZlciIsImFzc2V0Iiwic2V0QXNzZXRzIiwiY3VycmVudEFzc2V0cyIsInNldFNlbGVjdGVkQXNzZXQiLCJDb252ZXJzaW9uV29ybGRUb1NjcmVlbiIsInNldE1lc3NhZ2UiLCJ4SW5wdXRFbGVtZW50IiwieUlucHV0RWxlbWVudCIsInpJbnB1dEVsZW1lbnQiLCJleGVjdXRlIiwid2FpdFVudGlsIiwicG9zZUNhbGxiYWNrIiwic2hvd2Nhc2VTaXplIiwicmVzdWx0IiwidHJ1bmMiLCJjb21wdXRlVmFsdWUiLCJwbGFjZWhvbGRlciIsImNvbFNwYW4iLCJ0ZXh0QXJlYVN0eWxlIiwiRmxvb3JHZXREYXRhIiwiZmxvb3JzIiwic2V0Rmxvb3JzIiwic2RrRmxvb3JzIiwiRmxvb3IiLCJnZXREYXRhIiwic2VyaWFsaXplZCIsInJvd3MiLCJGbG9vck1vdmVUbyIsIm1vdmVDYW1lcmFPcHRpb25DaGFuZ2VkIiwic2V0TW92ZUNhbWVyYU9wdGlvbkNoYW5nZWQiLCJpbnB1dEVsZW1lbnQiLCJjaGVja2JveEVsZW1lbnQiLCJmbG9vckluZGV4IiwibmV3Rmxvb3IiLCJzdXBwcmVzc0NhbWVyYSIsInRvZ2dsZU1vdmVDYW1lcmFPcHRpb24iLCJtb3ZlQ2FtZXJhRGVzYyIsIkZsb29yU2hvd0FsbCIsInNob3dBbGwiLCJjc3MiLCJSb3dTcGFjZXIiLCJldmVudExpc3RTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJDb2xvciIsImlucHV0U3R5bGUiLCJtYXhXaWR0aCIsIm9sU3R5bGUiLCJwYWRkaW5nIiwidW5zdWJiZWRTdHlsZSIsImJhY2tncm91bmRDb2xvciIsIk9ic2VydmFibGVDb2xsZWN0aW9uIiwiZXZlbnRMaXN0Iiwic2V0RXZlbnRMaXN0IiwiaXNTdWJzY3JpYmVkIiwic3ViIiwic3ViVG9Db2xsZWN0aW9uIiwiaGFuZGxlciIsIm5ld0V2ZW50IiwiY3VycmVudEV2ZW50cyIsImRvU3Vic2NyaXB0aW9uIiwiY2hlY2tib3giLCJvbkNoZWNrYm94Q2hhbmdlZCIsIm5ld0FycmF5Iiwic2hvdyIsIk9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwibmV3VmFsdWUiLCJwcm9wVmFsdWUiLCJ2YWx1ZXMiLCJoYW5kbGVFdmVudCIsImV2ZW50VHlwZSIsImFyZ3MiLCJhcmciLCJlbnVtIiwianVzdGlmeUNvbnRlbnQiLCJmbG9hdCIsIkxhYmVsR2V0RGF0YSIsImxhYmVscyIsInNldExhYmVscyIsImN1cnJlbnRMYWJlbFNpZCIsInNldEN1cnJlbnRMYWJlbFNpZCIsInNka0xhYmVscyIsIkxhYmVsIiwibGFiZWxPcHRpb25zIiwiZmluZEluZGV4IiwibGFiZWxJdGVtIiwib25TZWxlY3RlZCIsInZhbCIsIkFwcCIsIkdyYXBoIiwiTGluayIsIlJvb20iLCJTZW5zb3IiLCJUYWciLCJTY2VuZSIsIktleXMiLCJLZXlTdGF0ZSIsIlBvaW50ZXJCdXR0b24iLCJQb2ludGVyQnV0dG9uTWFzayIsIkxpbmtDcmVhdGUiLCJzZXRMaW5rIiwibmV3TGluayIsImNyZWF0ZUxpbmsiLCJDcmVhdGlvblBvbGljeSIsInNldFBvbGljeSIsInBvbGljeSIsIk1BVFRFUlBPUlQiLCJpbmNsdWRlUGFyYW1zIiwiUkVGRVJSRVIiLCJPcGVuaW5nUG9saWN5IiwiT3BlblBvbGljeSIsInRlbXBsYXRlSHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwiRXh0ZXJuYWxMaW5raW5nUG9saWN5IiwibmV3V2luZG93UG9saWN5Iiwic2V0U2hhcmVMaW5rUG9saWN5IiwiY3JlYXRlRGVlcExpbmsiLCJzZXRNb2RlbExpbmtQb2xpY3kiLCJzZXROYXZpZ2F0aW9uTGlua1BvbGljeSIsInNldFNhbWVPcmlnaW5MaW5rUG9saWN5Iiwic2V0RXh0ZXJuYWxMaW5rUG9saWN5IiwiRWRpdEljb24iLCJlZGl0SWNvbiIsInNlbGVjdGVkTWF0dGVydGFnIiwic2VsZWN0ZWRBc3NldCIsInJlc2V0SWNvbiIsIlBoYXNlIiwiQXBwbGljYXRpb24iLCJBdHRhY2htZW50Q2F0ZWdvcnkiLCJQYXJlbnRUeXBlIiwiQVN0YXJTdGF0dXMiLCJEZXN0aW5hdGlvblBvbGljeSIsIkxpbmtUeXBlIiwiRGVzY3JpcHRpb25DaHVua1R5cGUiLCJDb2xsaWRlcnMiLCJTZW5zb3JUeXBlIiwiU291cmNlVHlwZSIsIkFsaWdubWVudCIsIlBsYWNlbWVudCIsIkF0dGFjaG1lbnRUeXBlIiwiUGxheVN0YXRlIiwiSW50ZXJhY3Rpb25UeXBlIiwiUGF0aFR5cGUiLCJSZWdpc3Rlckljb24iLCJyZWdpc3Rlckljb24iLCJhZGRBc3NldCIsInNlbGVjdE1hdHRlcnRhZyIsIm1hdHRlcnRhZ09wdGlvbkxhYmVsIiwibWF0dGVydGFnT3B0aW9uU29ydCIsIk1lYXN1cmVtZW50c0dldERhdGEiLCJtZWFzdXJlbWVudHNEYXRhIiwiTWVhc3VyZW1lbnRzIiwiTWVhc3VyZW1lbnRNb2RlVG9nZ2xlIiwiYWN0aXZlIiwic2V0QWN0aXZlIiwidG9nZ2xlTW9kZSIsIk1vZGVsR2V0RGF0YSIsIk1vZGVsR2V0RGV0YWlscyIsIm1vZGVsRGV0YWlscyIsImdldERldGFpbHMiLCJQbHVnaW5Mb2FkIiwidXJsSW5wdXRFbGVtZW50IiwiYXBwS2V5SW5wdXRFbGVtZW50IiwicGx1Z2luSWRJbnB1dEVsZW1lbnQiLCJsb2FkUGx1Z2luIiwiYXBwbGljYXRpb25LZXkiLCJwbHVnaW5JZCIsInBsdWdpbiIsIlBsdWdpbiIsImxvYWQiLCJVUkwiLCJ1bmxvYWRQbHVnaW4iLCJ1bmxvYWQiLCJFZGl0VGV4dHVyZSIsImVkaXRUZXh0dXJlIiwicmVzZXRUZXh0dXJlIiwiUmVnaXN0ZXJUZXh0dXJlIiwiUmVuZGVyZXJHZXRTY3JlZW5Qb3NpdGlvbiIsImdldFNjcmVlblBvc2l0aW9uIiwiUmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YSIsImdldFdvcmxkUG9zaXRpb25EYXRhIiwiU2NlbmVQYXRoIiwiaW5wdXRSZWYiLCJwYXRoIiwibW9kZWxKc29uIiwiU2NlbmVEZXNlcmlhbGl6ZSIsInNjZW5lT2JqZWN0SW5mbyIsInNldFNjZW5lT2JqZWN0SW5mbyIsImNsZWFyU2NlbmUiLCJvYmplY3QiLCJvYmplY3RzIiwicHJvY2Vzc1RleHRGcm9tRmlsZUxvYWRlZCIsInRleHRGcm9tRmlsZUxvYWRlZCIsImRlc2VyaWFsaXplZCIsImRlc2VyaWFsaXplIiwicGF0aHMiLCJqc29uIiwicGFyc2UiLCJuZXdQYXRocyIsImZpbGVzIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJmaWxlTG9hZGVkRXZlbnQiLCJyZWFkQXNUZXh0IiwiY2xlYXJDYWxsYmFjayIsImFjY2VwdCIsImlucHV0UGF0aHMiLCJwYXRoSXRlcmF0b3IiLCJJTlBVVCIsInJlbmRlclBhdGhzIiwiU2Vuc29yQWRkU291cmNlIiwiU2V0dGluZ3NHZXQiLCJnZXRTZXR0aW5nIiwibmV3S2V5IiwiU2V0dGluZ3MiLCJTZXR0aW5nc1VwZGF0ZSIsImtleUlucHV0RWxlbWVudCIsInZhbHVlSW5wdXRFbGVtZW50IiwidXBkYXRlU2V0dGluZyIsInVwZGF0ZSIsIlN3ZWVwRGlzYWJsZSIsInN3ZWVwSW5wdXRFbGVtZW50IiwidXBkYXRlU3dlZXAiLCJTd2VlcEVuYWJsZSIsIlN3ZWVwTW9kaWZ5TmVpZ2hib3JzIiwibGFiZWxNYXAiLCJzZXRMYWJlbE1hcCIsImFsbFN3ZWVwcyIsInNldEFsbFN3ZWVwcyIsImFsbFN3ZWVwSWRzIiwic2V0QWxsU3dlZXBJZHMiLCJhY3RpdmVTd2VlcE5laWdoYm9ycyIsInNldEFjdGl2ZVN3ZWVwTmVpZ2hib3JzIiwiY3VycmVudFN3ZWVwSWQiLCJzZXRDdXJyZW50U3dlZXBJZCIsImFjdGl2ZVN3ZWVwSWQiLCJzZXRBY3RpdmVTd2VlcElkIiwiaW5pdGlhbGl6ZWQiLCJhY3RpdmVTd2VlcElkUmVmIiwiYWN0aXZhdGVTd2VlcCIsIm5laWdoYm9ycyIsInN1YnMiLCJwaGFzZSIsIlBMQVlJTkciLCJjcmVhdGVJZE1hcCIsInN3ZWVwRGF0YSIsImlkRGljdCIsImFsbFN3ZWVwRGljdCIsIm5ld0FsbFN3ZWVwSWRzIiwiYWN0aXZlSWQiLCJ1cGRhdGVBbGxTd2VlcHNEaWN0IiwibmV3TGFiZWxNYXAiLCJnZXRMYWJlbEZyb21JZCIsIm1hcElkc1RvTGFiZWxzIiwicnVuVXNlRWZmZWN0IiwiYWxsU3dlZXBPcHRpb25zIiwicmVtb3ZlSWQiLCJyZW1vdmVOZWlnaGJvcnMiLCJhZGRJZCIsImFkZE5laWdoYm9ycyIsIlN3ZWVwR3JhcGgiLCJwYXRoRGlydHkiLCJzZXRQYXRoRGlydHkiLCJncmFwaCIsInBhdGhFbmRQb2ludHMiLCJhU3RhclN1YiIsInJ1bm5lciIsIm9uU3RhcnRDaGFuZ2VkIiwidXBkYXRlUGF0aCIsIm9uRW5kQ2hhbmdlZCIsInZlcnRleCIsImNyZWF0ZUFTdGFyUnVubmVyIiwiY3JlYXRlR3JhcGgiLCJzd2VlcEdyYXBoIiwicmVzdWx0UmVmIiwicmVjYWxjUGF0aCIsImV4ZWMiLCJzdGF0dXMiLCJTVUNDRVNTIiwiZW5hYmxlZFN3ZWVwRmlsdGVyIiwid2hpdGVTcGFjZSIsIkFkZCIsImxhYmVsSW5wdXQiLCJkZXNjSW5wdXQiLCJ4SW5wdXQiLCJ5SW5wdXQiLCJ6SW5wdXQiLCJ4Tm9ybUlucHV0IiwieU5vcm1JbnB1dCIsInpOb3JtSW5wdXQiLCJvcGFjaXR5SW5wdXQiLCJzdWJtaXRJY29uIiwiYWRkVGFnIiwiaWNvbklkIiwiQWxsb3dBY3Rpb24iLCJhbGxvd0RvY2tpbmciLCJhbGxvd09wZW5pbmciLCJhbGxvd05hdmlnYXRpb24iLCJhbGxvd1NoYXJpbmciLCJhbGxvd2VkQWN0aW9ucyIsInNldEFsbG93ZWRBY3Rpb25zIiwiYWxsb3dBY3Rpb25zIiwiYWxsb3dBY3Rpb24iLCJkb2NraW5nIiwic2hhcmluZyIsImNoYW5nZUFsbG93ZWRBY3Rpb25zIiwiY3VycmVudEFjdGlvbnMiLCJzZWxlY3RlZFRhZ0FjdGlvbnMiLCJsYWJlbFN0eWxlIiwiQXR0YWNoIiwic2VsZWN0ZWRBdHRhY2htZW50IiwiYXR0YWNoIiwiZGV0YWNoIiwiRWRpdEJpbGxib2FyZCIsInRpdGxlSW5wdXQiLCJlZGl0VGFnIiwiRWRpdENvbG9yIiwicklucHV0IiwiZ0lucHV0IiwiYklucHV0IiwibWF4IiwiRWRpdFN0ZW0iLCJzdWJtaXRIZWlnaHQiLCJzZXRTdWJtaXRIZWlnaHQiLCJzdWJtaXRWaXNpYmlsaXR5Iiwic2V0U3VibWl0VmlzaWJpbGl0eSIsImhlaWdodElucHV0IiwidmlzaWJsZUlucHV0Iiwic3VibWl0SGVpZ2h0Q2hhbmdlZCIsInN1Ym1pdFZpc2liaWxpdHlDaGFuZ2VkIiwiRWRpdE9wYWNpdHkiLCJNb3ZlIiwic3VibWl0UG9zIiwic2V0U3VibWl0UG9zIiwic3VibWl0Tm9ybSIsInNldFN1Ym1pdE5vcm0iLCJzdWJtaXRQb3NDaGFuZ2VkIiwic3VibWl0Tm9ybUNoYW5nZWQiLCJtb3ZlVGFnIiwiT3BlbiIsImZvcmNlT3BlbiIsImZvcmNlRG9jayIsIm9wZW4iLCJmb3JjZSIsImRvY2siLCJjbG9zZSIsIm1hcmdpbkxlZnQiLCJSZWdpc3RlckF0dGFjaG1lbnQiLCJyZWdpc3RlckF0dGFjaG1lbnQiLCJSZWdpc3RlclNhbmRib3giLCJodG1sSW5wdXQiLCJuYW1lSW5wdXQiLCJ3SW5wdXQiLCJoSW5wdXQiLCJyZWdpc3RlclNhbmRib3giLCJkZWZhdWx0SW5qZWN0ZWRTY3JpcHQiLCJSZW1vdmUiLCJyZW1vdmVUYWciLCJUb2dnbGVTZXR0aW5nIiwidG9nZ2xlU2V0dGluZyIsInRvZ2dsZSIsImhpZGUiLCJsYWJlbEFscGhhU29ydCIsIkltcG9ydFRhZ3MiLCJzcGFjZUlkSW5wdXQiLCJzZXRUZXh0IiwiaW1wb3J0VGFncyIsInNlbGVjdFRhZyIsInNlbGVjdEF0dGFjaG1lbnQiLCJ0YWdPcHRpb25MYWJlbCIsImF0dGFjaG1lbnRIb3ZlckxhYmVsIiwiYXR0YWNobWVudE9wdGlvbkxhYmVsIiwiYXR0YWNobWVudHMiLCJvcGVuVGFncyIsInRvZ2dsZURvY2tpbmciLCJ0b2dnbGVOYXZDb250cm9scyIsInRvZ2dsZVNoYXJpbmciLCJUb3VyR2V0RGF0YSIsInRvdXJTbmFwc2hvdHMiLCJzZXRUb3VyU25hcHNob3RzIiwic2RrVG91clNuYXBzaG90cyIsImN1cnJlbnRTdGVwIiwiQWN0aXZhdGVWaWV3Iiwic2VsZWN0ZWRWaWV3IiwiYWN0aXZhdGVWaWV3IiwiVG9nZ2xlTGF5ZXIiLCJzZWxlY3RlZExheWVyIiwidG9nZ2xlTGF5ZXIiLCJhY3RpdmF0ZSIsInNwYW5TdHlsZSIsIkxheWVyQ29udHJvbHMiLCJhZGRMYXllciIsInJlbW92ZUxheWVyIiwiaGFzTGF5ZXIiLCJWaWV3Iiwic2VsZWN0VmlldyIsInNlbGVjdExheWVyIiwidmlld3MiLCJsYXllcnMiLCJsYXllciIsIl8iLCJWaWV3bW9kZSIsIkNvbnRyb2xzIiwic2VsZWN0QXNzZXQiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJjb25maWciLCJob3N0Iiwic2RrS2V5IiwiYnVuZGxlVmVyc2lvbiIsInVzZURpcmVjdE1lc3NhZ2VzIiwic2RrVmVyc2lvbiIsIndvcmtzaG9wIiwiY29ubmVjdGlvbkRlbGF5IiwicHJvdmlkZXIiLCJjb25uZWN0U2RrIiwic2hvd2Nhc2VXaW5kb3ciLCJidW5kbGVDb25uZWN0b3IiLCJNUF9TREsiLCJjb25uZWN0IiwiZW1iZWRDb25uZWN0IiwiYm9vdHN0cmFwVmVyc2lvbiIsInJlcyIsInNjcmlwdExvY2F0aW9uIiwic2hvd2Nhc2VTZGsiLCJTREtfSU5TVEFOQ0UiLCJjb250YWluZXIiLCJzdGFydFJlYWN0IiwiVEhSRUUiLCJlcnJvck1lc3NhZ2UiLCJzdGF0dXNCYXIiLCJjbGFzc0xpc3QiLCJvbkxvYWQiLCJidW5kbGVWZXJzaW9uT3JQYXRoIiwiaXNGdWxsUGF0aCIsInN0YXJ0c1dpdGgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJsb2FkQnVuZGxlU2hvd2Nhc2UiLCJwbGF5ZXJQYXRoIiwibG9hZFNob3djYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==